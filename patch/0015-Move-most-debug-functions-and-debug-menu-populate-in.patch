From d2dd842b53500cade7608e8c02a7ec05c39748b8 Mon Sep 17 00:00:00 2001
From: kelson8 <kelson@kelsoncraft.net>
Date: Fri, 14 Feb 2025 03:25:11 -0500
Subject: [PATCH 15/42] Move most debug functions and debug menu populate into
 debug_functions.cpp.

---
 src/core/re3.cpp                     |  14 +-
 src/extras/debug/debug_functions.cpp | 816 +++++++++++++++++++++++++++
 src/extras/debug/debug_functions.h   |   1 +
 3 files changed, 830 insertions(+), 1 deletion(-)
 create mode 100644 src/extras/debug/debug_functions.cpp
 create mode 100644 src/extras/debug/debug_functions.h

diff --git a/src/core/re3.cpp b/src/core/re3.cpp
index c9b6efdc..b5435470 100644
--- a/src/core/re3.cpp
+++ b/src/core/re3.cpp
@@ -718,6 +718,10 @@ void SaveINISettings()
 
 // TODO Move these into another file, and all debug functions.
 #ifdef DEBUGMENU
+
+// These have been moved into src/extras/debug/debug_menu.cpp
+#ifndef _MOVE_DEBUG_FILE
+
 void WeaponCheat1();
 void WeaponCheat2();
 void WeaponCheat3();
@@ -977,6 +981,9 @@ switchWeather(void)
 	CWeather::StreamAfterRainTimer = 0;
 }
 
+/// <summary>
+/// This is where everything is defined in the debug menu.
+/// </summary>
 void
 DebugMenuPopulate(void)
 {
@@ -1023,6 +1030,7 @@ DebugMenuPopulate(void)
 		DebugMenuAddVar("Time & Weather", "Extracolour", &CTimeCycle::m_ExtraColour, nil, 1, 0, 23, extracols);
 		DebugMenuAddVar("Time & Weather", "Time scale", (float*)&CTimer::GetTimeScale(), nil, 0.1f, 0.0f, 10.0f);
 
+		// Extras from kelson8
 		#ifdef CUSTOM_CODE
 		#define _TEST1
 		// Custom added by kelson8, these can be disabled by commenting out CUSTOM_CODE in config.h
@@ -1045,7 +1053,7 @@ DebugMenuPopulate(void)
 		// Spawn a PCJ 600, test with my own code.
 		DebugMenuAddCmd("Cheats", "Spawn PCJ 600", CustomCheats::SpawnCarTestCheat);
 		// Test spawning a ped
-		DebugMenuAddCmd("Cheats", "Spawn Ped", CustomCheats::SpawnPedTest);
+		//DebugMenuAddCmd("Cheats", "Spawn Ped", CustomCheats::SpawnPedTest);
 
 		//
 		DebugMenuAddCmd("Cheats", "Drop a bomb", CustomCheats::ExplosionCheat);
@@ -1082,6 +1090,8 @@ DebugMenuPopulate(void)
 		// End custom added
 		#endif //CUSTOM_CODE
 
+		// End extras from kelson8
+
 		DebugMenuAddCmd("Cheats", "Weapon set 1", WeaponCheat1);
 		DebugMenuAddCmd("Cheats", "Weapon set 2", WeaponCheat2);
 		DebugMenuAddCmd("Cheats", "Weapon set 3", WeaponCheat3);
@@ -1313,6 +1323,8 @@ extern bool gbRenderWorld2;
 }
 #endif
 
+#endif //!_MOVE_DEBUG_FILE
+
 #ifndef __MWERKS__
 #ifndef MASTER
 const int   re3_buffsize = 1024;
diff --git a/src/extras/debug/debug_functions.cpp b/src/extras/debug/debug_functions.cpp
new file mode 100644
index 00000000..849c3e8d
--- /dev/null
+++ b/src/extras/debug/debug_functions.cpp
@@ -0,0 +1,816 @@
+#include <csignal>
+#define WITHWINDOWS
+#include "common.h"
+#if defined DETECT_JOYSTICK_MENU && defined XINPUT
+#include <xinput.h>
+#if !defined(PSAPI_VERSION) || (PSAPI_VERSION > 1)
+#pragma comment( lib, "Xinput9_1_0.lib" )
+#else
+#pragma comment( lib, "Xinput.lib" )
+#endif
+#endif
+#include "Renderer.h"
+#include "Occlusion.h"
+#include "Credits.h"
+#include "Camera.h"
+#include "Weather.h"
+#include "Timecycle.h"
+#include "Clock.h"
+#include "World.h"
+#include "Vehicle.h"
+#include "ModelIndices.h"
+#include "Streaming.h"
+#include "Boat.h"
+#include "Heli.h"
+#include "Automobile.h"
+#include "Bike.h"
+#include "Console.h"
+#include "Debug.h"
+#include "Hud.h"
+#include "SceneEdit.h"
+#include "Pad.h"
+#include "PlayerPed.h"
+#include "Radar.h"
+#include "debugmenu.h"
+#include "Frontend.h"
+#include "WaterLevel.h"
+#include "main.h"
+#include "Script.h"
+#include "MBlur.h"
+#include "postfx.h"
+#include "custompipes.h"
+#include "MemoryHeap.h"
+#include "FileMgr.h"
+#include "Camera.h"
+#include "MBlur.h"
+#include "ControllerConfig.h"
+#include "CarCtrl.h"
+#include "Population.h"
+#include "IniFile.h"
+#include "Zones.h"
+
+#include "crossplatform.h"
+
+#ifndef _WIN32
+#include "assert.h"
+#include <stdarg.h>
+#endif
+
+#include <list>
+
+// Extra
+#include "Garages.h"
+#include "extras/imgui_test.h"
+#include "extras/test/cheats/custom_cheats.h"
+
+
+//
+
+/////////////////////
+// Debug functions
+/////////////////////
+
+// TODO Move these into another file, and all debug functions.
+
+
+#ifdef _MOVE_DEBUG_FILE
+
+#ifdef DEBUGMENU
+void
+WeaponCheat1();
+void
+WeaponCheat2();
+void
+WeaponCheat3();
+void
+HealthCheat();
+void
+VehicleCheat(int model);
+void
+BlowUpCarsCheat();
+void
+ChangePlayerCheat();
+void
+MayhemCheat();
+void
+EverybodyAttacksPlayerCheat();
+void
+WeaponsForAllCheat();
+void
+FastTimeCheat();
+void
+SlowTimeCheat();
+void
+MoneyCheat();
+void
+ArmourCheat();
+void
+WantedLevelUpCheat();
+void
+WantedLevelDownCheat();
+void
+SunnyWeatherCheat();
+void
+CloudyWeatherCheat();
+void
+RainyWeatherCheat();
+void
+FoggyWeatherCheat();
+void
+FastWeatherCheat();
+void
+OnlyRenderWheelsCheat();
+void
+ChittyChittyBangBangCheat();
+void
+StrongGripCheat();
+void
+SpecialCarCheats();
+void
+PickUpChicksCheat();
+
+// Custom added by kelson8
+#define _TEST
+#ifdef _TEST
+void
+SuicideCheat();
+void
+ArmourCheat();
+void
+VehicleCheat(int model);
+void
+NoUpsideDownBlowUpCheat();
+
+// New
+void
+NeverWantedCheat();
+
+// Moved the rest of these into DebugMenuPopulate
+#endif //_TEST
+
+#ifndef _TEST
+void
+InfiniteHealthCheat();
+void
+NeverWantedCheat();
+void
+InvincibleVehicleCheat();
+// 6-26-2024 @ 3:55PM
+void
+SpawnCarTestCheat();
+// 7:34PM:
+void
+SpawnPedTest();
+// 6-6-2024 @ 5:03PM
+void
+SuicideCheat();
+void
+ExplosionCheat();
+#endif //!_TEST
+#undef _TEST
+
+// This one is accessing it from CGarages::ToggleRespray
+// void ToggleRespray();
+//  Oops, this killed it by being defined again :\
+//bool m_allowAllVehiclesRespray;
+// 5-28-2024 @ 3:16AM
+// I never did get this working.
+// void ToggleVehicleUpsideDownBlowUp();
+// 3-26-2024 @ 2:55AM
+// void NoUpsideDownBlowUpCheat();
+
+DebugMenuEntry *carCol1;
+DebugMenuEntry *carCol2;
+
+void
+SpawnCar(int id)
+{
+	CVector playerpos;
+	CStreaming::RequestModel(id, 0);
+	CStreaming::LoadAllRequestedModels(false);
+	if(CStreaming::HasModelLoaded(id)) {
+		playerpos = FindPlayerCoors();
+		int node;
+		if(!CModelInfo::IsBoatModel(id)) {
+			node = ThePaths.FindNodeClosestToCoors(playerpos, 0, 100.0f, false, false);
+			if(node < 0) return;
+		}
+
+		CVehicle *v;
+		if(CModelInfo::IsBoatModel(id))
+			v = new CBoat(id, RANDOM_VEHICLE);
+		else if(CModelInfo::IsBikeModel(id))
+			v = new CBike(id, RANDOM_VEHICLE);
+		else
+			v = new CAutomobile(id, RANDOM_VEHICLE);
+
+		v->bHasBeenOwnedByPlayer = true;
+		if(carCol1) DebugMenuEntrySetAddress(carCol1, &v->m_currentColour1);
+		if(carCol2) DebugMenuEntrySetAddress(carCol2, &v->m_currentColour2);
+
+		if(CModelInfo::IsBoatModel(id))
+			v->SetPosition(TheCamera.GetPosition() + TheCamera.GetForward() * 15.0f);
+		else
+			v->SetPosition(ThePaths.m_pathNodes[node].GetPosition());
+
+		v->GetMatrix().GetPosition().z += 4.0f;
+		v->SetOrientation(0.0f, 0.0f, 3.49f);
+		v->SetStatus(STATUS_ABANDONED);
+		v->m_nDoorLock = CARLOCK_UNLOCKED;
+		CWorld::Add(v);
+	}
+}
+
+static void
+FixCar(void)
+{
+	CVehicle *veh = FindPlayerVehicle();
+	if(veh == nil) return;
+	veh->m_fHealth = 1000.0f;
+	if(veh->IsCar()) {
+		((CAutomobile *)veh)->Damage.SetEngineStatus(0);
+		((CAutomobile *)veh)->Fix();
+	} else if(veh->IsBike()) {
+		((CBike *)veh)->Fix();
+	}
+}
+
+#ifdef MAP_ENHANCEMENTS
+static void
+TeleportToWaypoint(void)
+{
+	if(CRadar::TargetMarkerId == -1) return;
+	CEntity *pEntityToTeleport = FindPlayerEntity();
+	CVector vNewPos = CRadar::TargetMarkerPos;
+	CStreaming::LoadScene(vNewPos);
+	CStreaming::LoadSceneCollision(vNewPos);
+	vNewPos.z = CWorld::FindGroundZForCoord(vNewPos.x, vNewPos.y) + pEntityToTeleport->GetDistanceFromCentreOfMassToBaseOfModel();
+	pEntityToTeleport->Teleport(vNewPos);
+}
+#endif
+
+static void
+SwitchCarCollision(void)
+{
+	if(FindPlayerVehicle() && FindPlayerVehicle()->IsCar()) FindPlayerVehicle()->bUsesCollision = !FindPlayerVehicle()->bUsesCollision;
+}
+
+static void
+ToggleComedy(void)
+{
+	CVehicle *veh = FindPlayerVehicle();
+	if(veh == nil) return;
+	veh->bComedyControls = !veh->bComedyControls;
+}
+
+static void
+PlaceOnRoad(void)
+{
+	CVehicle *veh = FindPlayerVehicle();
+	if(veh == nil) return;
+
+	if(veh->IsCar()) ((CAutomobile *)veh)->PlaceOnRoadProperly();
+}
+
+static void
+ResetCamStatics(void)
+{
+	TheCamera.Cams[TheCamera.ActiveCam].ResetStatics = true;
+}
+
+#ifdef MISSION_SWITCHER
+int8 nextMissionToSwitch = 0;
+static void
+SwitchToMission(void)
+{
+	CTheScripts::SwitchToMission(nextMissionToSwitch);
+}
+#endif
+
+static const char *carnames[] = {
+    "landstal", "idaho",   "stinger",  "linerun",  "peren",    "sentinel", "rio",      "firetruk", "trash",    "stretch",  "manana",  "infernus",
+    "voodoo",   "pony",    "mule",     "cheetah",  "ambulan",  "fbicar",   "moonbeam", "esperant", "taxi",     "washing",  "bobcat",  "mrwhoop",
+    "bfinject", "hunter",  "police",   "enforcer", "securica", "banshee",  "predator", "bus",      "rhino",    "barracks", "cuban",   "chopper",
+    "angel",    "coach",   "cabbie",   "stallion", "rumpo",    "rcbandit", "romero",   "packer",   "sentxs",   "admiral",  "squalo",  "seaspar",
+    "pizzaboy", "gangbur", "airtrain", "deaddodo", "speeder",  "reefer",   "tropic",   "flatbed",  "yankee",   "caddy",    "zebra",   "topfun",
+    "skimmer",  "pcj600",  "faggio",   "freeway",  "rcbaron",  "rcraider", "glendale", "oceanic",  "sanchez",  "sparrow",  "patriot", "lovefist",
+    "coastg",   "dinghy",  "hermes",   "sabre",    "sabretur", "pheonix",  "walton",   "regina",   "comet",    "deluxo",   "burrito", "spand",
+    "marquis",  "baggage", "kaufman",  "maverick", "vcnmav",   "rancher",  "fbiranch", "virgo",    "greenwoo", "jetmax",   "hotring", "sandking",
+    "blistac",  "polmav",  "boxville", "benson",   "mesa",     "rcgoblin", "hotrina",  "hotrinb",  "bloodra",  "bloodrb",  "vicechee"};
+
+static CTweakVar **TweakVarsList;
+static int TweakVarsListSize = -1;
+static bool bAddTweakVarsNow = false;
+static const char *pTweakVarsDefaultPath = NULL;
+
+void
+CTweakVars::Add(CTweakVar *var)
+{
+	if(TweakVarsListSize == -1) {
+		TweakVarsList = (CTweakVar **)malloc(64 * sizeof(CTweakVar *));
+		TweakVarsListSize = 0;
+	}
+	if(TweakVarsListSize > 63) TweakVarsList = (CTweakVar **)realloc(TweakVarsList, (TweakVarsListSize + 1) * sizeof(CTweakVar *));
+
+	TweakVarsList[TweakVarsListSize++] = var;
+	//	TweakVarsList.push_back(var);
+
+	if(bAddTweakVarsNow) var->AddDBG(pTweakVarsDefaultPath);
+}
+
+void
+CTweakVars::AddDBG(const char *path)
+{
+	pTweakVarsDefaultPath = path;
+
+	for(int i = 0; i < TweakVarsListSize; ++i) TweakVarsList[i]->AddDBG(pTweakVarsDefaultPath);
+
+	bAddTweakVarsNow = true;
+}
+
+void
+CTweakSwitch::AddDBG(const char *path)
+{
+	DebugMenuEntry *e = DebugMenuAddVar(m_pPath == NULL ? path : m_pPath, m_pVarName, (int32_t *)m_pIntVar, m_pFunc, 1, m_nMin, m_nMax, m_aStr);
+	DebugMenuEntrySetWrap(e, true);
+}
+
+void
+CTweakFunc::AddDBG(const char *path)
+{
+	DebugMenuAddCmd(m_pPath == NULL ? path : m_pPath, m_pVarName, m_pFunc);
+}
+void
+CTweakBool::AddDBG(const char *path)
+{
+	DebugMenuAddVarBool8(m_pPath == NULL ? path : m_pPath, m_pVarName, (int8_t *)m_pBoolVar, NULL);
+}
+void
+CTweakInt8::AddDBG(const char *path)
+{
+	DebugMenuAddVar(m_pPath == NULL ? path : m_pPath, m_pVarName, (int8_t *)m_pIntVar, NULL, m_nStep, m_nLoawerBound, m_nUpperBound, NULL);
+}
+void
+CTweakUInt8::AddDBG(const char *path)
+{
+	DebugMenuAddVar(m_pPath == NULL ? path : m_pPath, m_pVarName, (uint8_t *)m_pIntVar, NULL, m_nStep, m_nLoawerBound, m_nUpperBound, NULL);
+}
+void
+CTweakInt16::AddDBG(const char *path)
+{
+	DebugMenuAddVar(m_pPath == NULL ? path : m_pPath, m_pVarName, (int16_t *)m_pIntVar, NULL, m_nStep, m_nLoawerBound, m_nUpperBound, NULL);
+}
+void
+CTweakUInt16::AddDBG(const char *path)
+{
+	DebugMenuAddVar(m_pPath == NULL ? path : m_pPath, m_pVarName, (uint16_t *)m_pIntVar, NULL, m_nStep, m_nLoawerBound, m_nUpperBound, NULL);
+}
+void
+CTweakInt32::AddDBG(const char *path)
+{
+	DebugMenuAddVar(m_pPath == NULL ? path : m_pPath, m_pVarName, (int32_t *)m_pIntVar, NULL, m_nStep, m_nLoawerBound, m_nUpperBound, NULL);
+}
+void
+CTweakUInt32::AddDBG(const char *path)
+{
+	DebugMenuAddVar(m_pPath == NULL ? path : m_pPath, m_pVarName, (uint32_t *)m_pIntVar, NULL, m_nStep, m_nLoawerBound, m_nUpperBound, NULL);
+}
+void
+CTweakFloat::AddDBG(const char *path)
+{
+	DebugMenuAddVar(m_pPath == NULL ? path : m_pPath, m_pVarName, (float *)m_pIntVar, NULL, m_nStep, m_nLoawerBound, m_nUpperBound);
+}
+
+/*
+static const char *wt[] = {
+                        "Sunny", "Cloudy", "Rainy", "Foggy"
+                };
+
+SETTWEAKPATH("TEST");
+TWEAKSWITCH(CWeather::NewWeatherType, 0, 3, wt, NULL);
+*/
+
+void
+switchWeather(void)
+{
+	CWeather::StreamAfterRainTimer = 0;
+}
+
+/// <summary>
+/// This is where everything is defined in the debug menu.
+/// </summary>
+void
+DebugMenuPopulate(void)
+{
+	CustomCheats *customCheats = new CustomCheats();
+	// customCheats->InfiniteHealthCheat();
+	// customCheats->
+	// CustomCheats::InfiniteHealthCheat();
+
+	if(1) {
+		static const char *weathers[] = {"Sunny", "Cloudy", "Rainy", "Foggy", "Extrasunny", "Stormy"};
+		static const char *extracols[] = {"1 - Malibu club",
+		                                  "2 - Strib club",
+		                                  "3 - Hotel",
+		                                  "4 - Bank",
+		                                  "5 - Police HQ",
+		                                  "6 - Mall",
+		                                  "7 - Rifle Range",
+		                                  "8 - Mansion",
+		                                  "9 - Dirt ring",
+		                                  "10 - Blood ring",
+		                                  "11 - Hot ring",
+		                                  "12 - Concert hall",
+		                                  "13 - Auntie Poulets",
+		                                  "14 - Intro at docks",
+		                                  "15 - Biker bar",
+		                                  "16 - Intro cafe",
+		                                  "17 - Studio",
+		                                  "18",
+		                                  "19",
+		                                  "20",
+		                                  "21",
+		                                  "22",
+		                                  "23",
+		                                  "24"};
+		DebugMenuEntry *e;
+		e = DebugMenuAddVar("Time & Weather", "Current Hour", &CClock::GetHoursRef(), nil, 1, 0, 23, nil);
+		DebugMenuEntrySetWrap(e, true);
+		e = DebugMenuAddVar(
+		    "Time & Weather", "Current Minute", &CClock::GetMinutesRef(), []() { CWeather::InterpolationValue = CClock::GetMinutes() / 60.0f; }, 1, 0,
+		    59, nil);
+		DebugMenuEntrySetWrap(e, true);
+		e = DebugMenuAddVar("Time & Weather", "Old Weather", (int16 *)&CWeather::OldWeatherType, switchWeather, 1, 0, 5, weathers);
+		DebugMenuEntrySetWrap(e, true);
+		e = DebugMenuAddVar("Time & Weather", "New Weather", (int16 *)&CWeather::NewWeatherType, switchWeather, 1, 0, 5, weathers);
+		DebugMenuEntrySetWrap(e, true);
+		DebugMenuAddVarBool32("Time & Weather", "Extracolours On", &CTimeCycle::m_bExtraColourOn, nil);
+		DebugMenuAddVar("Time & Weather", "Extracolour", &CTimeCycle::m_ExtraColour, nil, 1, 0, 23, extracols);
+		DebugMenuAddVar("Time & Weather", "Time scale", (float *)&CTimer::GetTimeScale(), nil, 0.1f, 0.0f, 10.0f);
+
+// Extras from kelson8
+#ifdef CUSTOM_CODE
+#define _TEST1
+// Custom added by kelson8, these can be disabled by commenting out CUSTOM_CODE in config.h
+#ifdef _TEST1
+		DebugMenuAddCmd("Cheats", "Infinite Health", CustomCheats::InfiniteHealthCheat);
+		DebugMenuAddCmd("Cheats", "Never wanted", CustomCheats::NeverWantedCheat);
+		DebugMenuAddCmd("Cheats", "Invincible Vehicle", customCheats->InvincibleVehicleCheat);
+		DebugMenuAddCmd("Cheats", "Suicide", SuicideCheat);
+
+		// New menu test
+		DebugMenuAddCmd("Vehicle", "Lock Doors", CustomCheats::LockDoors);
+		DebugMenuAddCmd("Vehicle", "Unlock Doors", CustomCheats::UnlockDoors);
+		// This adds another menu to it, i didn't know it was that simple.
+		// DebugMenuAddCmd("Test", "Suicide", SuicideCheat);
+
+		// Allow all cars to be repaired in the garages, incomplete.
+		// DebugMenuAddCmd("Cheats", "Toggle all vehicle repair", ToggleRespray);
+		DebugMenuAddCmd("Cheats", "Toggle all vehicle repair", CGarages::ToggleRespray);
+
+		// Spawn a PCJ 600, test with my own code.
+		DebugMenuAddCmd("Cheats", "Spawn PCJ 600", CustomCheats::SpawnCarTestCheat);
+		// Test spawning a ped
+		// DebugMenuAddCmd("Cheats", "Spawn Ped", CustomCheats::SpawnPedTest);
+
+		//
+		DebugMenuAddCmd("Cheats", "Drop a bomb", CustomCheats::ExplosionCheat);
+#else
+		DebugMenuAddCmd("Cheats", "Infinite Health", InfiniteHealthCheat);
+		DebugMenuAddCmd("Cheats", "Never wanted", NeverWantedCheat);
+		DebugMenuAddCmd("Cheats", "Invincible Vehicle", InvincibleVehicleCheat);
+		DebugMenuAddCmd("Cheats", "Suicide", SuicideCheat);
+
+		// Allow all cars to be repaired in the garages, incomplete.
+		// DebugMenuAddCmd("Cheats", "Toggle all vehicle repair", ToggleRespray);
+		DebugMenuAddCmd("Cheats", "Toggle all vehicle repair", CGarages::ToggleRespray);
+
+		// Spawn a PCJ 600, test with my own code.
+		DebugMenuAddCmd("Cheats", "Spawn PCJ 600", SpawnCarTestCheat);
+		// Test spawning a ped
+		DebugMenuAddCmd("Cheats", "Spawn Ped", SpawnPedTest);
+
+		//
+		DebugMenuAddCmd("Cheats", "Drop a bomb", ExplosionCheat);
+#endif
+
+// DebugMenuAddCmd("Cheats", "Toggle all vehicle repair", m_allowAllVehiclesRespray);
+// DebugMenuAddCmd("Cheats", "Toggle Vehicle upside down explode", ToggleVehicleUpsideDownBlowUp);
+//  TODO Add toggle for No burn cars on flipped upside down,
+//  So no cars will catch fire when upside down.
+// DebugMenuAddCmd("Cheats", "No burn on flip", NoUpsideDownBlowUpCheat);
+
+// This almost works, it fully freezes the game though.
+#ifdef IMGUI_TEST
+		DebugMenuAddCmd("Cheats", "ImGui Test", ImGuiVCTest::CreateImGuiWindow);
+#endif // IMGUI_TEST
+// End custom added
+#endif // CUSTOM_CODE
+
+		// End extras from kelson8
+
+		DebugMenuAddCmd("Cheats", "Weapon set 1", WeaponCheat1);
+		DebugMenuAddCmd("Cheats", "Weapon set 2", WeaponCheat2);
+		DebugMenuAddCmd("Cheats", "Weapon set 3", WeaponCheat3);
+		DebugMenuAddCmd("Cheats", "Money", MoneyCheat);
+		DebugMenuAddCmd("Cheats", "Health", HealthCheat);
+		DebugMenuAddCmd("Cheats", "Wanted level up", WantedLevelUpCheat);
+		DebugMenuAddCmd("Cheats", "Wanted level down", WantedLevelDownCheat);
+		DebugMenuAddCmd("Cheats", "Tank", []() { VehicleCheat(MI_TAXI); });
+		DebugMenuAddCmd("Cheats", "Blow up cars", BlowUpCarsCheat);
+		DebugMenuAddCmd("Cheats", "Change player", ChangePlayerCheat);
+		DebugMenuAddCmd("Cheats", "Mayhem", MayhemCheat);
+		DebugMenuAddCmd("Cheats", "Everybody attacks player", EverybodyAttacksPlayerCheat);
+		DebugMenuAddCmd("Cheats", "Weapons for all", WeaponsForAllCheat);
+		DebugMenuAddCmd("Cheats", "Fast time", FastTimeCheat);
+		DebugMenuAddCmd("Cheats", "Slow time", SlowTimeCheat);
+		DebugMenuAddCmd("Cheats", "Armour", ArmourCheat);
+		DebugMenuAddCmd("Cheats", "Sunny weather", SunnyWeatherCheat);
+		DebugMenuAddCmd("Cheats", "Cloudy weather", CloudyWeatherCheat);
+		DebugMenuAddCmd("Cheats", "Rainy weather", RainyWeatherCheat);
+		DebugMenuAddCmd("Cheats", "Foggy weather", FoggyWeatherCheat);
+		DebugMenuAddCmd("Cheats", "Fast weather", FastWeatherCheat);
+		DebugMenuAddCmd("Cheats", "Only render wheels", OnlyRenderWheelsCheat);
+		DebugMenuAddCmd("Cheats", "Chitty chitty bang bang", ChittyChittyBangBangCheat);
+		DebugMenuAddCmd("Cheats", "Strong grip", StrongGripCheat);
+		DebugMenuAddCmd("Cheats", "Special car", SpecialCarCheats);
+		DebugMenuAddCmd("Cheats", "Pickup chicks", PickUpChicksCheat);
+
+		static int spawnCarId = MI_LANDSTAL;
+		e = DebugMenuAddVar("Spawn", "Spawn Car ID", &spawnCarId, nil, 1, MI_LANDSTAL, MI_VICECHEE, carnames);
+		DebugMenuEntrySetWrap(e, true);
+		DebugMenuAddCmd("Spawn", "Spawn Car", []() {
+			if(spawnCarId == MI_CHOPPER || spawnCarId == MI_AIRTRAIN || spawnCarId == MI_DEADDODO) return;
+			SpawnCar(spawnCarId);
+		});
+		static uint8 dummy;
+		carCol1 = DebugMenuAddVar("Spawn", "First colour", &dummy, nil, 1, 0, 255, nil);
+		carCol2 = DebugMenuAddVar("Spawn", "Second colour", &dummy, nil, 1, 0, 255, nil);
+		DebugMenuAddCmd("Spawn", "Spawn Stinger", []() { SpawnCar(MI_STINGER); });
+		DebugMenuAddCmd("Spawn", "Spawn Infernus", []() { SpawnCar(MI_INFERNUS); });
+		DebugMenuAddCmd("Spawn", "Spawn Cheetah", []() { SpawnCar(MI_CHEETAH); });
+		DebugMenuAddCmd("Spawn", "Spawn Phoenix", []() { SpawnCar(MI_PHEONIX); });
+		DebugMenuAddCmd("Spawn", "Spawn Banshee", []() { SpawnCar(MI_BANSHEE); });
+		DebugMenuAddCmd("Spawn", "Spawn Esperanto", []() { SpawnCar(MI_ESPERANT); });
+		DebugMenuAddCmd("Spawn", "Spawn Stallion", []() { SpawnCar(MI_STALLION); });
+		DebugMenuAddCmd("Spawn", "Spawn Admiral", []() { SpawnCar(MI_ADMIRAL); });
+		DebugMenuAddCmd("Spawn", "Spawn Washington", []() { SpawnCar(MI_WASHING); });
+		DebugMenuAddCmd("Spawn", "Spawn Taxi", []() { SpawnCar(MI_TAXI); });
+		DebugMenuAddCmd("Spawn", "Spawn Police", []() { SpawnCar(MI_POLICE); });
+		DebugMenuAddCmd("Spawn", "Spawn Enforcer", []() { SpawnCar(MI_ENFORCER); });
+		DebugMenuAddCmd("Spawn", "Spawn Cuban", []() { SpawnCar(MI_CUBAN); });
+		DebugMenuAddCmd("Spawn", "Spawn Voodoo", []() { SpawnCar(MI_VOODOO); });
+		DebugMenuAddCmd("Spawn", "Spawn BF injection", []() { SpawnCar(MI_BFINJECT); });
+		DebugMenuAddCmd("Spawn", "Spawn Maverick", []() { SpawnCar(MI_MAVERICK); });
+		DebugMenuAddCmd("Spawn", "Spawn VCN Maverick", []() { SpawnCar(MI_VCNMAV); });
+		DebugMenuAddCmd("Spawn", "Spawn Sparrow", []() { SpawnCar(MI_SPARROW); });
+		DebugMenuAddCmd("Spawn", "Spawn Sea Sparrow", []() { SpawnCar(MI_SEASPAR); });
+		DebugMenuAddCmd("Spawn", "Spawn Hunter", []() { SpawnCar(MI_HUNTER); });
+		DebugMenuAddCmd("Spawn", "Spawn Rhino", []() { SpawnCar(MI_RHINO); });
+		DebugMenuAddCmd("Spawn", "Spawn Firetruck", []() { SpawnCar(MI_FIRETRUCK); });
+		DebugMenuAddCmd("Spawn", "Spawn Predator", []() { SpawnCar(MI_PREDATOR); });
+		DebugMenuAddCmd("Spawn", "Spawn PCJ 600", []() { SpawnCar(MI_PCJ600); });
+		DebugMenuAddCmd("Spawn", "Spawn Faggio", []() { SpawnCar(MI_FAGGIO); });
+		DebugMenuAddCmd("Spawn", "Spawn Freeway", []() { SpawnCar(MI_FREEWAY); });
+		DebugMenuAddCmd("Spawn", "Spawn Squalo", []() { SpawnCar(MI_SQUALO); });
+		DebugMenuAddCmd("Spawn", "Spawn Skimmer", []() { SpawnCar(MI_SKIMMER); });
+
+		DebugMenuAddVarBool8("Render", "Draw hud", &CHud::m_Wants_To_Draw_Hud, nil);
+#ifdef PROPER_SCALING
+		DebugMenuAddVarBool8("Render", "Proper Scaling", &CDraw::ms_bProperScaling, nil);
+#endif
+#ifdef FIX_RADAR
+		DebugMenuAddVarBool8("Render", "Fix Radar", &CDraw::ms_bFixRadar, nil);
+#endif
+#ifdef FIX_SPRITES
+		DebugMenuAddVarBool8("Render", "Fix Sprites", &CDraw::ms_bFixSprites, nil);
+#endif
+		DebugMenuAddVarBool8("Render", "Backface Culling", &gBackfaceCulling, nil);
+		DebugMenuAddVarBool8("Render", "PS2 Alpha test Emu", &gPS2alphaTest, nil);
+		DebugMenuAddVarBool8("Render", "Frame limiter", &FrontEndMenuManager.m_PrefsFrameLimiter, nil);
+		DebugMenuAddVarBool8("Render", "VSynch", &FrontEndMenuManager.m_PrefsVsync, nil);
+		DebugMenuAddVar("Render", "Max FPS", &RsGlobal.maxFPS, nil, 1, 1, 1000, nil);
+#ifdef NEW_RENDERER
+		DebugMenuAddVarBool8("Render", "New Renderer", &gbNewRenderer, nil);
+		extern bool gbRenderRoads;
+		extern bool gbRenderEverythingBarRoads;
+		extern bool gbRenderFadingInUnderwaterEntities;
+		extern bool gbRenderFadingInEntities;
+		extern bool gbRenderWater;
+		extern bool gbRenderBoats;
+		extern bool gbRenderVehicles;
+		extern bool gbRenderWorld0;
+		extern bool gbRenderWorld1;
+		extern bool gbRenderWorld2;
+		DebugMenuAddVarBool8("Debug Render", "gbRenderRoads", &gbRenderRoads, nil);
+		DebugMenuAddVarBool8("Debug Render", "gbRenderEverythingBarRoads", &gbRenderEverythingBarRoads, nil);
+		DebugMenuAddVarBool8("Debug Render", "gbRenderFadingInUnderwaterEntities", &gbRenderFadingInUnderwaterEntities, nil);
+		DebugMenuAddVarBool8("Debug Render", "gbRenderFadingInEntities", &gbRenderFadingInEntities, nil);
+		DebugMenuAddVarBool8("Debug Render", "gbRenderWater", &gbRenderWater, nil);
+		DebugMenuAddVarBool8("Debug Render", "gbRenderBoats", &gbRenderBoats, nil);
+		DebugMenuAddVarBool8("Debug Render", "gbRenderVehicles", &gbRenderVehicles, nil);
+		DebugMenuAddVarBool8("Debug Render", "gbRenderWorld0", &gbRenderWorld0, nil);
+		DebugMenuAddVarBool8("Debug Render", "gbRenderWorld1", &gbRenderWorld1, nil);
+		DebugMenuAddVarBool8("Debug Render", "gbRenderWorld2", &gbRenderWorld2, nil);
+#endif
+
+#ifdef EXTENDED_COLOURFILTER
+		static const char *filternames[] = {"None", "Simple", "Normal", "Mobile"};
+		e = DebugMenuAddVar("Render", "Colourfilter", &CPostFX::EffectSwitch, nil, 1, CPostFX::POSTFX_OFF, CPostFX::POSTFX_MOBILE, filternames);
+		DebugMenuEntrySetWrap(e, true);
+		DebugMenuAddVar("Render", "Intensity", &CPostFX::Intensity, nil, 0.05f, 0, 10.0f);
+		DebugMenuAddVarBool8("Render", "Blur", &CPostFX::BlurOn, nil);
+		DebugMenuAddVarBool8("Render", "Motion Blur", &CPostFX::MotionBlurOn, nil);
+#endif
+		DebugMenuAddVar("Render", "Drunkness", &CMBlur::Drunkness, nil, 0.05f, 0, 1.0f);
+#ifndef MASTER
+		DebugMenuAddVarBool8("Render", "Occlusion debug", &bDispayOccDebugStuff, nil);
+#endif
+#ifdef LIBRW
+		DebugMenuAddVarBool32("Render", "MatFX env map apply light", &rw::MatFX::envMapApplyLight, nil);
+		DebugMenuAddVarBool32("Render", "MatFX env map flip U", &rw::MatFX::envMapFlipU, nil);
+		DebugMenuAddVarBool32("Render", "MatFX env map use matcolor", &rw::MatFX::envMapUseMatColor, nil);
+#endif
+#ifdef EXTENDED_PIPELINES
+		static const char *vehpipenames[] = {"MatFX", "Neo"};
+		e = DebugMenuAddVar("Render", "Vehicle Pipeline", &CustomPipes::VehiclePipeSwitch, nil, 1, CustomPipes::VEHICLEPIPE_MATFX,
+		                    CustomPipes::VEHICLEPIPE_NEO, vehpipenames);
+		DebugMenuEntrySetWrap(e, true);
+		DebugMenuAddVar("Render", "Neo Vehicle Shininess", &CustomPipes::VehicleShininess, nil, 0.1f, 0, 1.0f);
+		DebugMenuAddVar("Render", "Neo Vehicle Specularity", &CustomPipes::VehicleSpecularity, nil, 0.1f, 0, 1.0f);
+		DebugMenuAddVarBool8("Render", "Neo Ped Rim light enable", &CustomPipes::RimlightEnable, nil);
+		DebugMenuAddVar("Render", "Mult", &CustomPipes::RimlightMult, nil, 0.1f, 0, 1.0f);
+		DebugMenuAddVarBool8("Render", "Neo World Lightmaps enable", &CustomPipes::LightmapEnable, nil);
+		DebugMenuAddVar("Render", "Mult", &CustomPipes::LightmapMult, nil, 0.1f, 0, 1.0f);
+		DebugMenuAddVarBool8("Render", "Neo Road Gloss enable", &CustomPipes::GlossEnable, nil);
+		DebugMenuAddVar("Render", "Mult", &CustomPipes::GlossMult, nil, 0.1f, 0, 1.0f);
+#endif
+		DebugMenuAddVarBool8("Debug Render", "Show Ped Paths", &gbShowPedPaths, nil);
+		DebugMenuAddVarBool8("Debug Render", "Show Car Paths", &gbShowCarPaths, nil);
+		DebugMenuAddVarBool8("Debug Render", "Show Car Path Links", &gbShowCarPathsLinks, nil);
+		DebugMenuAddVarBool8("Debug Render", "Show Collision Lines", &gbShowCollisionLines, nil);
+		DebugMenuAddVarBool8("Debug Render", "Show Collision Polys", &gbShowCollisionPolys, nil);
+		DebugMenuAddVarBool8("Debug Render", "Don't render Buildings", &gbDontRenderBuildings, nil);
+		DebugMenuAddVarBool8("Debug Render", "Don't render Big Buildings", &gbDontRenderBigBuildings, nil);
+		DebugMenuAddVarBool8("Debug Render", "Don't render Peds", &gbDontRenderPeds, nil);
+		DebugMenuAddVarBool8("Debug Render", "Don't render Vehicles", &gbDontRenderVehicles, nil);
+		DebugMenuAddVarBool8("Debug Render", "Don't render Objects", &gbDontRenderObjects, nil);
+		DebugMenuAddVarBool8("Debug Render", "Don't Render Water", &gbDontRenderWater, nil);
+
+#ifdef DRAW_GAME_VERSION_TEXT
+		DebugMenuAddVarBool8("Debug", "Version Text", &gbDrawVersionText, nil);
+#endif
+		DebugMenuAddVarBool8("Debug", "Show DebugStuffInRelease", &gbDebugStuffInRelease, nil);
+#ifdef TIMEBARS
+		DebugMenuAddVarBool8("Debug", "Show Timebars", &gbShowTimebars, nil);
+#endif
+#ifndef FINAL
+		DebugMenuAddVarBool8("Debug", "Use debug render groups", &bDebugRenderGroups, nil);
+		DebugMenuAddVarBool8("Debug", "Print Memory Usage", &gbPrintMemoryUsage, nil);
+#ifdef USE_CUSTOM_ALLOCATOR
+		DebugMenuAddCmd("Debug", "Parse Heap", ParseHeap);
+#endif
+#endif
+
+		DebugMenuAddVarBool8("Debug", "pad 1 -> pad 2", &CPad::m_bMapPadOneToPadTwo, nil);
+#ifdef GTA_SCENE_EDIT
+		DebugMenuAddVarBool8("Debug", "Edit on", &CSceneEdit::m_bEditOn, nil);
+#endif
+		// DebugMenuAddCmd("Debug", "Start Credits", CCredits::Start);
+		// DebugMenuAddCmd("Debug", "Stop Credits", CCredits::Stop);
+
+#ifdef RELOADABLES
+// maybe put it back if we have more to reload
+//		DebugMenuAddCmd("Reload", "HUD.TXD", CHud::ReloadTXD);
+#endif
+
+#ifdef MAP_ENHANCEMENTS
+		DebugMenuAddCmd("Game", "Teleport to map waypoint", TeleportToWaypoint);
+#endif
+		DebugMenuAddCmd("Game", "Fix Car", FixCar);
+		DebugMenuAddCmd("Game", "Place Car on Road", PlaceOnRoad);
+		DebugMenuAddCmd("Game", "Switch car collision", SwitchCarCollision);
+		DebugMenuAddCmd("Game", "Toggle Comedy Controls", ToggleComedy);
+
+#ifdef MISSION_SWITCHER
+		DebugMenuEntry *missionEntry;
+		static const char *missions[] = {"Initial",
+		                                 "Intro",
+		                                 "An Old Friend",
+		                                 "The Party",
+		                                 "Back Alley Brawl",
+		                                 "Jury Fury",
+		                                 "Riot",
+		                                 "Treacherous Swine",
+		                                 "Mall Shootout",
+		                                 "Guardian Angels",
+		                                 "Sir, Yes Sir!",
+		                                 "All Hands On Deck!",
+		                                 "The Chase",
+		                                 "Phnom Penh '86",
+		                                 "The Fastest Boat",
+		                                 "Supply & Demand",
+		                                 "Rub Out",
+		                                 "Death Row",
+		                                 "Four Iron",
+		                                 "Demolition Man",
+		                                 "Two Bit Hit",
+		                                 "No Escape?",
+		                                 "The Shootist",
+		                                 "The Driver",
+		                                 "The Job",
+		                                 "Gun Runner",
+		                                 "Boomshine Saigon",
+		                                 "Recruitment Drive",
+		                                 "Dildo Dodo",
+		                                 "Martha's Mug Shot",
+		                                 "G-spotlight",
+		                                 "Shakedown",
+		                                 "Bar Brawl",
+		                                 "Cop Land",
+		                                 "Spilling the Beans",
+		                                 "Hit the Courier",
+		                                 "Printworks Buy",
+		                                 "Sunshine Autos",
+		                                 "Interglobal Films Buy",
+		                                 "Cherry Popper Icecreams Buy",
+		                                 "Kaufman Cabs Buy",
+		                                 "Malibu Club Buy",
+		                                 "The Boatyard Buy",
+		                                 "Pole Position Club Buy",
+		                                 "El Swanko Casa Buy",
+		                                 "Links View Apartment Buy",
+		                                 "Hyman Condo Buy",
+		                                 "Ocean Heighs Aprt. Buy",
+		                                 "1102 Washington Street Buy",
+		                                 "Vice Point Buy",
+		                                 "Skumole Shack Buy",
+		                                 "Cap the Collector",
+		                                 "Keep your Friends Close...",
+		                                 "Alloy Wheels of Steel",
+		                                 "Messing with the Man",
+		                                 "Hog Tied",
+		                                 "Stunt Boat Challenge",
+		                                 "Cannon Fodder",
+		                                 "Naval Engagement",
+		                                 "Trojan Voodoo",
+		                                 "Juju Scramble",
+		                                 "Bombs Away!",
+		                                 "Dirty Lickin's",
+		                                 "Love Juice",
+		                                 "Psycho Killer",
+		                                 "Publicity Tour",
+		                                 "Weapon Range",
+		                                 "Road Kill",
+		                                 "Waste the Wife",
+		                                 "Autocide",
+		                                 "Check Out at the Check In",
+		                                 "Loose Ends",
+		                                 "V.I.P.",
+		                                 "Friendly Rivalry",
+		                                 "Cabmaggedon",
+		                                 "TAXI DRIVER",
+		                                 "PARAMEDIC",
+		                                 "FIREFIGHTER",
+		                                 "VIGILANTE",
+		                                 "HOTRING",
+		                                 "BLOODRING",
+		                                 "DIRTRING",
+		                                 "Sunshine Autos Races",
+		                                 "Distribution",
+		                                 "Downtown Chopper Checkpoint",
+		                                 "Ocean Beach Chopper Checkpoint",
+		                                 "Vice Point Chopper Checkpoint",
+		                                 "Little Haiti Chopper Checkpoint",
+		                                 "Trial by Dirt",
+		                                 "Test Track",
+		                                 "PCJ Playground",
+		                                 "Cone Crazy",
+		                                 "PIZZA BOY",
+		                                 "RC Raider Pickup",
+		                                 "RC Bandit Race",
+		                                 "RC Baron Race",
+		                                 "Checkpoint Charlie"};
+
+		missionEntry = DebugMenuAddVar("Game", "Select mission", &nextMissionToSwitch, nil, 1, 0, ARRAY_SIZE(missions) - 1, missions);
+		DebugMenuEntrySetWrap(missionEntry, true);
+		DebugMenuAddCmd("Game", "Start selected mission ", SwitchToMission);
+#endif
+		extern bool PrintDebugCode;
+		extern int16 DebugCamMode;
+		DebugMenuAddVarBool8("Cam", "Use mouse Cam", &CCamera::m_bUseMouse3rdPerson, nil);
+#ifdef FREE_CAM
+		DebugMenuAddVarBool8("Cam", "Free Cam", &CCamera::bFreeCam, nil);
+#endif
+		DebugMenuAddVarBool8("Cam", "Print Debug Code", &PrintDebugCode, nil);
+		DebugMenuAddVar("Cam", "Cam Mode", &DebugCamMode, nil, 1, 0, CCam::MODE_EDITOR, nil);
+		DebugMenuAddCmd("Cam", "Normal", []() { DebugCamMode = 0; });
+		DebugMenuAddCmd("Cam", "Reset Statics", ResetCamStatics);
+
+		CTweakVars::AddDBG("Debug");
+	}
+}
+#endif
+
+
+#endif //_MOVE_DEBUG_FILE
\ No newline at end of file
diff --git a/src/extras/debug/debug_functions.h b/src/extras/debug/debug_functions.h
new file mode 100644
index 00000000..6f70f09b
--- /dev/null
+++ b/src/extras/debug/debug_functions.h
@@ -0,0 +1 @@
+#pragma once
-- 
2.45.1.windows.1

