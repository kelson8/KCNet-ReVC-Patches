From 5aafc1b83115ee9c6f8e6f552530acce041ff099 Mon Sep 17 00:00:00 2001
From: kelson8 <kelson@kelsoncraft.net>
Date: Fri, 4 Apr 2025 14:48:32 -0400
Subject: [PATCH 158/165] Copy changes from ReLCS

warp_menu changes:
* Fix the warp menu to have create warp category and button.

ini_functions changes:
Added functions:
* void AppendLocationToIni()
* void AppendWarpWithInput()

* Added imgui_defines.h for ImGui color macros, and a bunch of useful macros for ImGui.

* Add file_functions, so far this checks if a file exists, and gets the current directory.
* bool RemoveLocationFromIni()

* Add 10 to the warp list in ini functions for a cleaner output with a few values.
* Comment and document ini functions a bit more.
---
 src/extras/functions/file_functions.cpp |  76 ++++++++++++++
 src/extras/functions/file_functions.h   |  22 ++++
 src/extras/functions/ini_functions.cpp  | 129 +++++++++++++++++++++++-
 src/extras/functions/ini_functions.h    |  11 ++
 src/extras/menus/warp_menu.cpp          | 102 +++++++++++++++++++
 src/extras/utils/imgui_defines.h        |  70 +++++++++++++
 6 files changed, 407 insertions(+), 3 deletions(-)
 create mode 100644 src/extras/functions/file_functions.cpp
 create mode 100644 src/extras/functions/file_functions.h
 create mode 100644 src/extras/utils/imgui_defines.h

diff --git a/src/extras/functions/file_functions.cpp b/src/extras/functions/file_functions.cpp
new file mode 100644
index 00000000..52abedfc
--- /dev/null
+++ b/src/extras/functions/file_functions.cpp
@@ -0,0 +1,76 @@
+#include "file_functions.h"
+
+#include <iostream>
+#include <fstream>
+
+#ifdef _WIN32
+#include <Windows.h>
+#endif
+
+//------------- File functions ---------------/
+
+#ifdef _WIN32
+bool FileFunctions::DoesFileExist(const std::string& fileName)
+{
+	std::ifstream file(fileName);
+	return file.good();
+}
+
+std::string FileFunctions::CurrentDirectory()
+{
+    char current_dir[MAX_PATH];
+    if (GetCurrentDirectoryA(MAX_PATH, current_dir) != 0)
+    {
+        return current_dir;
+    }
+    else {
+        return "Error getting current directory.";
+    }
+}
+
+#endif
+
+
+/// <summary>
+/// Check if a directory exists, for now this only works for Windows.
+/// TODO Make this work on Linux if I get around to testing it on there.
+/// </summary>
+/// <param name="folderPath">The path to check</param>
+/// <returns>If the folder exists</returns>
+bool
+#ifdef _WIN32
+FileFunctions::CheckDirectoryExists(LPCSTR folderPath)
+#else
+FileFunctions::CheckDirectoryExists(std::string folderPath)
+#endif //_WIN32
+{
+#ifdef _WIN32
+
+	// TODO Move this into another function.
+	// Create the directory if it doesn't already exist.
+	// CreateDirectory(logPath.c_str(), NULL);
+	// CreateDirectory(folderPath, NULL);
+
+	// Check if the directory exists
+	// https://stackoverflow.com/questions/8233842/how-to-check-if-directory-exist-using-c-and-winapi
+	DWORD ftyp = GetFileAttributesA(folderPath);
+	if(ftyp == INVALID_FILE_ATTRIBUTES) {
+		return false; // Something is wrong with the path
+	}
+
+	if(ftyp & FILE_ATTRIBUTE_DIRECTORY) {
+		return true; // This is a valid directory
+	}
+
+	return false; // Not a directory
+
+	//
+	// TRACE("KCNet - 'ViceExtended\logs' folder not found, creating one for you");
+#else
+	// Not implemented on other systems.
+	return false;
+#endif //_WIN32
+}
+
+//------------- End file functions ---------------/
+
diff --git a/src/extras/functions/file_functions.h b/src/extras/functions/file_functions.h
new file mode 100644
index 00000000..16c515de
--- /dev/null
+++ b/src/extras/functions/file_functions.h
@@ -0,0 +1,22 @@
+#pragma once
+
+#include <string>
+
+#ifdef _WIN32
+#include <Windows.h>
+#endif
+
+class FileFunctions {
+public:
+#ifdef _WIN32
+	// TODO Fix for Linux
+
+	// Folder stuff
+	static bool DoesFileExist(const std::string& fileName);
+	static std::string CurrentDirectory();
+
+	static bool CheckDirectoryExists(LPCSTR folderPath);
+#else 
+	static bool CheckDirectoryExists(std::string folderPath);
+#endif
+};
\ No newline at end of file
diff --git a/src/extras/functions/ini_functions.cpp b/src/extras/functions/ini_functions.cpp
index 584b4176..9f71a9d6 100644
--- a/src/extras/functions/ini_functions.cpp
+++ b/src/extras/functions/ini_functions.cpp
@@ -334,9 +334,87 @@ IniFunctions::LoadLocationsFromIni(const std::string &filename)
 	return categories;
 }
 
+// New, from ReLCS
+/// <summary>
+/// Append to the locations file
+/// This won't overwrite previous warps
+/// This seems to work
+/// TODO Add a checkbox to overwrite previous warps if requested, keep off by default.
+/// </summary>
+/// <param name="filename">The name of the ini to append to</param>
+/// <param name="categoryName">The warp category</param>
+/// <param name="locationName">The warp location name</param>
+/// <param name="warpData">The WarpData struct</param>
+/// <returns></returns>
+bool
+IniFunctions::AppendLocationToIni(const std::string &filename, const std::string &categoryName, const std::string &locationName,
+                                  const IniFunctions::WarpData &warpData)
+{
+	mINI::INIFile file(filename);
+	mINI::INIStructure ini;
+
+	if(!file.read(ini)) {
+		std::cerr << "Error reading INI file: " << filename << std::endl;
+		return false;
+	}
+
+	// Check if the category and location name already exist
+	if(ini.has(categoryName) && ini[categoryName].has(locationName)) {
+		std::cerr << Defines::KcLogString << "Category and/or location name already exists. Cannot overwrite." << std::endl;
+		return false;
+	}
+
+	std::stringstream ss;
+	ss << warpData.interiorId << ", " << warpData.x << ", " << warpData.y << ", " << warpData.z;
+	std::string locationDataStr = ss.str();
+
+	// Adds the key, as it was proven to not exist.
+	ini[categoryName][locationName] = locationDataStr;
+
+	if(!file.write(ini)) {
+		std::cerr << "Error writing to INI file: " << filename << std::endl;
+		return false;
+	}
+
+	return true;
+}
+
+/// <summary>
+/// This function is now in use for appending to my warps
+/// It takes the fileName, warp category name, warp location name, and a struct with the WarpData
+/// from IniFunctions
+/// </summary>
+/// <param name="filename">The name of the ini to append to</param>
+/// <param name="categoryName">The warp category</param>
+/// <param name="locationName">The warp location name</param>
+/// <param name="warpData">The WarpData struct</param>
+/// <returns></returns>
+bool
+IniFunctions::AppendWarpWithInput(const std::string &filename, std::string &categoryName, std::string &locationName, IniFunctions::WarpData &warpData)
+{
+	if(this->AppendLocationToIni(filename, categoryName, locationName, warpData)) {
+		std::cout << "Warp appended successfully." << std::endl;
+		return true;
+	} else {
+		std::cerr << "Failed to append warp." << std::endl;
+		return false;
+	}
+}
+//
+//
+
+//
+
+
 // This works without a button for categories
 
 
+/// <summary>
+/// Display the warp locations and teleport buttons with categories
+/// This is the ImGui part for the warp locations, runs menu handling for it.
+/// TODO Make a delete button for these
+/// </summary>
+/// <param name="categories"></param>
 void
 IniFunctions::DisplayLocations(const std::vector<IniFunctions::Category> &categories)
 {
@@ -346,7 +424,8 @@ IniFunctions::DisplayLocations(const std::vector<IniFunctions::Category> &catego
 	for(const auto &category : categories) {
 		if(ImGui::CollapsingHeader(category.name.c_str())) {
 			if(ImGui::BeginListBox(("##" + category.name).c_str(),
-			                       ImVec2(-FLT_MIN, category.locations.size() * ImGui::GetTextLineHeightWithSpacing()))) {
+			                       // Add 10 to this, so all of these are the same size.
+			                       ImVec2(-FLT_MIN, category.locations.size() + 10 * ImGui::GetTextLineHeightWithSpacing()))) {
 				for(const auto &location : category.locations) {
 					ImGui::Text("%s", location.first.c_str()); // Display the location name
 
@@ -354,6 +433,7 @@ IniFunctions::DisplayLocations(const std::vector<IniFunctions::Category> &catego
 					// if(ImGui::Selectable(location.first.c_str())) {}
 					ImGui::SameLine(); // Place the button on the same line
 
+					// Teleport button
 					if(ImGui::Button(("Teleport##" + location.first).c_str())) { // Add a teleport button
 						// Teleport to location when the button is clicked
 						//std::cout << "Teleporting to: " << category.name << " - " << location.first << std::endl;
@@ -372,20 +452,63 @@ IniFunctions::DisplayLocations(const std::vector<IniFunctions::Category> &catego
 // Setup loading for Game init
 std::vector<IniFunctions::Category> loadedLocations;
 
-// Calling this in CGame::Init
-// And as a button under warp_menu
+/// <summary>
+/// Calling this in CGame::Init
+/// And as a button under warp_menu
+/// </summary>
 void
 IniFunctions::LoadLocations()
 {
 	loadedLocations = LoadLocationsFromIni(defines.warpsIniFile);
 }
 
+/// <summary>
+/// Display the warp locations and teleport buttons
+/// </summary>
 void
 IniFunctions::DisplayLocationsImGui()
 {
 	DisplayLocations(loadedLocations);
 }
 
+// From ReLCS
+/// <summary>
+/// Remove warp locations from the ini file
+/// </summary>
+/// <param name="filename"></param>
+/// <param name="categoryName">Category to remove the warp from.</param>
+/// <param name="locationName">The warp name to remove</param>
+/// <returns>If a warp was removed</returns>
+bool
+IniFunctions::RemoveLocationFromIni(const std::string &filename, const std::string &categoryName, const std::string &locationName)
+{
+	mINI::INIFile file(filename);
+	mINI::INIStructure ini;
+
+	if(!file.read(ini)) {
+		std::cerr << "Error reading INI file: " << filename << std::endl;
+		return false;
+	}
+
+	if(ini.has(categoryName) && ini[categoryName].has(locationName)) {
+		ini[categoryName].remove(locationName);
+
+		// If the category is now empty, remove it too (optional)
+		if(ini[categoryName].size() == 0) { ini.remove(categoryName); }
+
+		if(!file.write(ini)) {
+			std::cerr << "Error writing to INI file: " << filename << std::endl;
+			return false;
+		}
+		return true;
+	} else {
+		std::cerr << "Category or location not found." << std::endl;
+		return false;
+	}
+}
+
+//
+
 //------------------
 // Read the data from the warp file
 //------------------
diff --git a/src/extras/functions/ini_functions.h b/src/extras/functions/ini_functions.h
index 219c343c..34363adc 100644
--- a/src/extras/functions/ini_functions.h
+++ b/src/extras/functions/ini_functions.h
@@ -72,6 +72,17 @@ public:
 	void DisplayLocationsImGui();
 	//
 
+	// Append to locations
+	bool AppendLocationToIni(const std::string &filename, const std::string &categoryName, const std::string &locationName,
+	                         const IniFunctions::WarpData &warpData);
+
+	// Append to warp locations with input
+	bool AppendWarpWithInput(const std::string &filename, std::string &categoryName, std::string &locationName, IniFunctions::WarpData &warpData);
+
+	// Addition for deleting warps from the ini file
+	bool RemoveLocationFromIni(const std::string &filename, const std::string &categoryName, const std::string &locationName);
+	//
+
 	// Load Vehicles
 	std::vector<VehicleCategory> LoadVehiclesFromIni(const std::string &filename);
 	void DisplayVehicles(const std::vector<IniFunctions::VehicleCategory> &categories);
diff --git a/src/extras/menus/warp_menu.cpp b/src/extras/menus/warp_menu.cpp
index 68e27897..26074395 100644
--- a/src/extras/menus/warp_menu.cpp
+++ b/src/extras/menus/warp_menu.cpp
@@ -29,6 +29,9 @@
 #include <map>
 #include <vector>
 
+// Add shortcuts for ImGui colors, and a lot of other ImGui commands
+#include "imgui_defines.h"
+
 // To add a warp, first add its name to this list.
 const char *warps[] = {"Airport", "Mansion", "Beach", "Mall"};
 int currentWarp = 0;
@@ -48,6 +51,10 @@ char m_LocBuf[INPUT_BUFFER_SIZE];
 char m_LocationBuf[INPUT_BUFFER_SIZE];
 char m_HeadingBuffer[INPUT_BUFFER_SIZE];
 
+#define WARP_NAME_BUFFER_SIZE 32
+char m_warpCategoryBuffer[WARP_NAME_BUFFER_SIZE];
+char m_warpLocationNameBuffer[WARP_NAME_BUFFER_SIZE];
+
 // Locations, possibly move these somewhere else later
 float airportX = -1515.1f;
 float airportY = -1182.1f;
@@ -209,6 +216,17 @@ WarpMenu::WarpTab()
 	float playerY = playerCoords.y;
 	float playerZ = playerCoords.z;
 
+	
+	// New for warp saving
+	static int interiorId = 0;
+	static float warpX = 0.0f;
+	static float warpY = 0.0f;
+	static float warpZ = 0.0f;
+
+	// Defaults to true, automatically clear the warp value on save.
+	static bool clearWarpOnSave = true;
+	//
+
 	// Heading, TODO Move into teleport function.
 	// Well this doesn't work.
 	// TODO Fix this.
@@ -274,6 +292,90 @@ WarpMenu::WarpTab()
 		iniFunctions.LoadLocations();
 	}
 
+	//
+	// Create a warp
+	if(ImGui::CollapsingHeader("Create Warp")) {
+
+		ImGui::Text("To add a warp, modify these below.");
+		IniFunctions::WarpData newLocation;
+
+		ImGui::Text("This will clear the entry when saved");
+		ImGui::Checkbox("Clear warp on save", &clearWarpOnSave);
+
+		// Set the warp category
+		ImGui::InputText("Category", m_warpCategoryBuffer, IM_ARRAYSIZE(m_warpCategoryBuffer));
+
+		// Set the warp name
+		ImGui::InputText("Name", m_warpLocationNameBuffer, IM_ARRAYSIZE(m_warpLocationNameBuffer));
+		// TODO Enable this for ReVC
+		// Set the interior ID
+#if defined(GTAVC)
+		ImGui::InputInt("Interior ID", &interiorId);
+#endif
+
+		float xCoord = ImGui::InputFloat("X Coord", &warpX);
+		// ImGui::SameLine();
+		float yCoord = ImGui::InputFloat("Y Coord", &warpY);
+		// ImGui::SameLine();
+		float zCoord = ImGui::InputFloat("Z Coord", &warpZ);
+
+		static bool locationEmpty = false;
+
+		// This seems to work now
+		if(ImGui::Button("Create warp")) {
+#if defined(GTAVC)
+			newLocation.interiorId = 0;
+#endif
+			newLocation.x = warpX;
+			newLocation.y = warpY;
+			newLocation.z = warpZ;
+
+			std::string category(m_warpCategoryBuffer);
+			std::string location(m_warpLocationNameBuffer);
+
+			// Check if the category is empty, if so, display an error message
+			if(category.empty() || location.empty()) {
+				std::cout << Defines::KcLogString << "Category or location can't be empty." << std::endl;
+
+				// This will set the text to show under this: Category or location can't be empty.
+				locationEmpty = true;
+			} else {
+				if(iniFunctions.AppendWarpWithInput(Defines::warpsIniFile, category, location, newLocation)) {
+					// Clear input fields after successful addition
+					// Make this reload the warps.ini, this will automatically add the warps to the menu.
+					// This will set the text to not under this: Category or location can't be empty.
+					locationEmpty = false;
+
+					iniFunctions.LoadLocations();
+					//
+					// TODO Add a checkbox option for this.
+					if(clearWarpOnSave) {
+						memset(m_warpCategoryBuffer, 0, sizeof(m_warpCategoryBuffer));
+						memset(m_warpLocationNameBuffer, 0, sizeof(m_warpLocationNameBuffer));
+#if defined(GTAVC)
+						interiorId = 0;
+#endif
+						warpX = 0.0f;
+						warpY = 0.0f;
+						warpZ = 0.0f;
+					}
+				}
+			}
+		}
+
+		// This seems to work
+		// Display the empty location text if the location isn't set.
+		if(locationEmpty) {
+			// Set the text color to red.
+			PUSH_TEXT_COLOR(IMGUI_RGBA_RED);
+			ImGui::Text("Error: Category or location can't be empty.");
+			// Remove the text color
+			POP_TEXT_COLOR();
+		}
+	}
+
+	//
+
 	// Current Position
 
 	ImGui::Separator();
diff --git a/src/extras/utils/imgui_defines.h b/src/extras/utils/imgui_defines.h
new file mode 100644
index 00000000..03291046
--- /dev/null
+++ b/src/extras/utils/imgui_defines.h
@@ -0,0 +1,70 @@
+#pragma once
+
+#include "imgui.h"
+
+// This file will add shortcuts for certain ImGui actions with a preprocessor
+// The idea for this came from Google Gemini, I've never really messed with these too much.
+
+// Set the style color with 'r, g, b, a' values 
+//#define PUSH_TEXT_COLOR(r, g, b, a) ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(r, g, b, a))
+
+
+//--------------------
+// RGBA Colors
+// Usage: PUSH_TEXT_COLOR(IMGUI_RGBA_RED);
+// -------------------
+// Set the RGBA colors
+// 
+// Another macro for my RGBA colors
+#define PUSH_TEXT_COLOR(color) ImGui::PushStyleColor(ImGuiCol_Text, ImGui::ColorConvertU32ToFloat4(color))
+
+#define IMGUI_RGBA_RED IM_COL32(255, 0, 0, 255)
+
+// Generated with Google Gemini
+// RGBA Color Codes (IM_COL32(R, G, B, A))
+#define IMGUI_RGBA_BLACK IM_COL32(0, 0, 0, 255)
+#define IMGUI_RGBA_WHITE IM_COL32(255, 255, 255, 255)
+#define IMGUI_RGBA_GREEN IM_COL32(0, 255, 0, 255)
+#define IMGUI_RGBA_BLUE IM_COL32(0, 0, 255, 255)
+#define IMGUI_RGBA_YELLOW IM_COL32(255, 255, 0, 255)
+#define IMGUI_RGBA_CYAN IM_COL32(0, 255, 255, 255)
+#define IMGUI_RGBA_MAGENTA IM_COL32(255, 0, 255, 255)
+#define IMGUI_RGBA_GRAY IM_COL32(128, 128, 128, 255)
+#define IMGUI_RGBA_DARK_RED IM_COL32(139, 0, 0, 255)
+#define IMGUI_RGBA_DARK_GREEN IM_COL32(0, 100, 0, 255)
+#define IMGUI_RGBA_DARK_BLUE IM_COL32(0, 0, 139, 255)
+#define IMGUI_RGBA_ORANGE IM_COL32(255, 165, 0, 255)
+#define IMGUI_RGBA_PINK IM_COL32(255, 192, 203, 255)
+#define IMGUI_RGBA_LIGHT_GRAY IM_COL32(211, 211, 211, 255)
+#define IMGUI_RGBA_DARK_GRAY IM_COL32(169, 169, 169, 255)
+#define IMGUI_RGBA_BROWN IM_COL32(165, 42, 42, 255)
+#define IMGUI_RGBA_OLIVE IM_COL32(128, 128, 0, 255)
+#define IMGUI_RGBA_PURPLE IM_COL32(128, 0, 128, 255)
+#define IMGUI_RGBA_TEAL IM_COL32(0, 128, 128, 255)
+#define IMGUI_RGBA_LIME IM_COL32(0, 255, 0, 255) // same as green.
+#define IMGUI_RGBA_NAVY IM_COL32(0, 0, 128, 255)
+
+// Remove the style color
+#define POP_TEXT_COLOR ImGui::PopStyleColor
+
+//--------------------
+// End RGBA colors
+//--------------------
+
+
+// This works for shortening the ImGui text.
+// Add it to files that use ImGui text.
+#define IMGUITEXT ImGui::Text
+
+// Changes from KCNet-ImGui-Test
+// Make a button
+#define IMGUIBUTTON ImGui::Button
+
+// Make a input int value
+#define IMGUI_INPUT_INT(LABEL, VALUE) ImGui::InputInt(LABEL, VALUE)
+
+// Make a input int with flags
+#define IMGUI_INPUT_INT_FLAGS(LABEL, VALUE, FLAGS) ImGui::InputInt(LABEL, VALUE, FLAGS)
+
+// Make an ImGui separator
+#define IMGUI_SEPERATOR ImGui::Separator
\ No newline at end of file
-- 
2.49.0.windows.1

