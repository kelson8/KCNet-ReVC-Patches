From abe516d020bd753c941de19049f2d34d780bb959 Mon Sep 17 00:00:00 2001
From: kelson8 <kelson@kelsoncraft.net>
Date: Thu, 27 Feb 2025 18:12:58 -0500
Subject: [PATCH 10/13] Add partially working photo mode code. Add
 EX_MORE_BUTTON_ICONS and EX_PC_KEY_ICONS.

---
 src/core/ControllerConfig.cpp  |  366 ++++-
 src/core/ControllerConfig.h    |   10 +
 src/core/Frontend.cpp          |   21 +
 src/core/Frontend.h            |    5 +
 src/core/Game.cpp              |   46 +
 src/core/MenuScreensCustom.cpp |    5 +
 src/core/Streaming.cpp         |   11 +
 src/core/Timer.cpp             |    8 +
 src/core/main.cpp              |   17 +
 src/extras/PhotoMode.cpp       | 2386 ++++++++++++++++++++++++++++++++
 src/extras/PhotoMode.h         |  179 +++
 src/renderer/Antennas.cpp      |    8 +
 src/renderer/Font.cpp          |  159 +++
 src/renderer/Font.h            |   34 +
 src/renderer/Hud.cpp           |   20 +
 src/renderer/Particle.cpp      |   13 +-
 src/renderer/Sprite.cpp        |    4 +
 src/renderer/Timecycle.cpp     |   20 +
 src/text/Messages.cpp          |   12 +
 19 files changed, 3316 insertions(+), 8 deletions(-)
 create mode 100644 src/extras/PhotoMode.cpp
 create mode 100644 src/extras/PhotoMode.h

diff --git a/src/core/ControllerConfig.cpp b/src/core/ControllerConfig.cpp
index 5f757b62..a61ea372 100644
--- a/src/core/ControllerConfig.cpp
+++ b/src/core/ControllerConfig.cpp
@@ -2472,6 +2472,200 @@ int32 CControllerConfigManager::GetNumOfSettingsForAction(e_ControllerAction act
 #define VFB(b)
 #endif
 
+#ifdef EX_MORE_BUTTON_ICONS // Controller buttons
+// CPad::GetPad(0)->Mode - 0, 1, 2, 3
+// Mode 1 - Standard/Modern
+// Mode 2 - Classic
+#define CONTROLLER_BUTTONS(T, O, X, Q, L1, L2, L3, R1, R2, R3, SELECT, RSU, RSD, RSL, RSR)                                                                                         \
+	{{                                                                                                                                                         \
+	     O,      /* PED_FIREWEAPON */                                                                                                                          \
+	     R2,     /* PED_CYCLE_WEAPON_RIGHT */                                                                                                                  \
+	     L2,     /* PED_CYCLE_WEAPON_LEFT */                                                                                                                   \
+	     nil,    /* GO_FORWARD */                                                                                                                              \
+	     nil,    /* GO_BACK */                                                                                                                                 \
+	     LEFT,    /* GO_LEFT */                                                                                                                                 \
+	     RIGHT,    /* GO_RIGHT */                                                                                                                                \
+	     Q,      /* PED_SNIPER_ZOOM_IN */                                                                                                                      \
+	     X,      /* PED_SNIPER_ZOOM_OUT */                                                                                                                     \
+	     T,      /* VEHICLE_ENTER_EXIT */                                                                                                                      \
+	     SELECT, /* CAMERA_CHANGE_VIEW_ALL_SITUATIONS */                                                                                                       \
+	     Q,      /* PED_JUMPING */                                                                                                                             \
+	     X,      /* PED_SPRINT */                                                                                                                              \
+	     R3,     /* PED_LOOKBEHIND */                                                                                                                          \
+	     L3,     /* PED_DUCK */                                                                                                                                \
+	     L1,     /* PED_ANSWER_PHONE */                                                                                                                        \
+	     VFB(O)  /* VEHICLE_FIREWEAPON */                                                                                                                      \
+	     X,      /* VEHICLE_ACCELERATE */                                                                                                                      \
+	     Q,      /* VEHICLE_BRAKE */                                                                                                                           \
+	     L1,     /* VEHICLE_CHANGE_RADIO_STATION */                                                                                                            \
+	     L3,     /* VEHICLE_HORN */                                                                                                                            \
+	     R3,     /* TOGGLE_SUBMISSIONS */                                                                                                                      \
+	     R1,     /* VEHICLE_HANDBRAKE */                                                                                                                       \
+	     nil,    /* PED_1RST_PERSON_LOOK_LEFT */                                                                                                               \
+	     nil,    /* PED_1RST_PERSON_LOOK_RIGHT */                                                                                                              \
+	     L2,     /* VEHICLE_LOOKLEFT */                                                                                                                        \
+	     R2,     /* VEHICLE_LOOKRIGHT */                                                                                                                       \
+	     nil,    /* VEHICLE_LOOKBEHIND */                                                                                                                      \
+	     RSL,    /* VEHICLE_TURRETLEFT */                                                                                                                      \
+	     RSR,    /* VEHICLE_TURRETRIGHT */                                                                                                                     \
+	     UP,    /* VEHICLE_TURRETUP */                                                                                                                        \
+	     DOWN,    /* VEHICLE_TURRETDOWN */                                                                                                                      \
+	     L2,     /* PED_CYCLE_TARGET_LEFT */                                                                                                                   \
+	     R2,     /* PED_CYCLE_TARGET_RIGHT */                                                                                                                  \
+	     L1,     /* PED_CENTER_CAMERA_BEHIND_PLAYER */                                                                                                         \
+	     R1,     /* PED_LOCK_TARGET */                                                                                                                         \
+	     nil,    /* NETWORK_TALK */                                                                                                                            \
+	     nil,    /* PED_1RST_PERSON_LOOK_UP */                                                                                                                 \
+	     nil,    /* PED_1RST_PERSON_LOOK_DOWN */                                                                                                               \
+	     nil,    /* _CONTROLLERACTION_36 */                                                                                                                    \
+	     nil,    /* TOGGLE_DPAD */                                                                                                                             \
+	     nil,    /* SWITCH_DEBUG_CAM_ON */                                                                                                                     \
+	     nil,    /* TAKE_SCREEN_SHOT */                                                                                                                        \
+	     nil,    /* UNKNOWN_ACTION */                                                                                                                          \
+	     nil,    /* SHOW_MOUSE_POINTER_TOGGLE */                                                                                                               \
+	 },                                                                                                                                                        \
+	 {                                                                                                                                                         \
+	     R2,      /* PED_FIREWEAPON */                                                                                                                          \
+	     DPAD_RIGHT,     /* PED_CYCLE_WEAPON_RIGHT */                                                                                                                  \
+	     DPAD_LEFT,     /* PED_CYCLE_WEAPON_LEFT */                                                                                                                   \
+	     nil,    /* GO_FORWARD */                                                                                                                              \
+	     nil,    /* GO_BACK */                                                                                                                                 \
+	     LEFT,   /* GO_LEFT */                                                                                                                                 \
+	     RIGHT,  /* GO_RIGHT */                                                                                                                                \
+	     DPAD_UP,      /* PED_SNIPER_ZOOM_IN */                                                                                                                      \
+	     DPAD_DOWN,      /* PED_SNIPER_ZOOM_OUT */                                                                                                                     \
+	     T,      /* VEHICLE_ENTER_EXIT */                                                                                                                      \
+	     SELECT, /* CAMERA_CHANGE_VIEW_ALL_SITUATIONS */                                                                                                       \
+	     Q,      /* PED_JUMPING */                                                                                                                             \
+	     X,      /* PED_SPRINT */                                                                                                                              \
+	     R3,     /* PED_LOOKBEHIND */                                                                                                                          \
+	     L3,     /* PED_DUCK */                                                                                                                                \
+	     L1,     /* PED_ANSWER_PHONE */                                                                                                                        \
+	     VFB(O)  /* VEHICLE_FIREWEAPON */                                                                                                                      \
+	     R2,      /* VEHICLE_ACCELERATE */                                                                                                                      \
+	     L2,      /* VEHICLE_BRAKE */                                                                                                                           \
+	     SELECT, /* VEHICLE_CHANGE_RADIO_STATION */                                                                                                            \
+	     L3,     /* VEHICLE_HORN */                                                                                                                            \
+	     DPAD_UP,     /* TOGGLE_SUBMISSIONS */                                                                                                                      \
+	     X,     /* VEHICLE_HANDBRAKE */                                                                                                                       \
+	     nil,    /* PED_1RST_PERSON_LOOK_LEFT */                                                                                                               \
+	     nil,    /* PED_1RST_PERSON_LOOK_RIGHT */                                                                                                              \
+	     L1,     /* VEHICLE_LOOKLEFT */                                                                                                                        \
+	     R1,     /* VEHICLE_LOOKRIGHT */                                                                                                                       \
+	     nil,    /* VEHICLE_LOOKBEHIND */                                                                                                                      \
+	     RSL,    /* VEHICLE_TURRETLEFT */                                                                                                                      \
+	     RSR,    /* VEHICLE_TURRETRIGHT */                                                                                                                     \
+	     UP,    /* VEHICLE_TURRETUP */                                                                                                                        \
+	     DOWN,    /* VEHICLE_TURRETDOWN */                                                                                                                      \
+	     DPAD_LEFT,     /* PED_CYCLE_TARGET_LEFT */                                                                                                                   \
+	     DPAD_RIGHT,     /* PED_CYCLE_TARGET_RIGHT */                                                                                                                  \
+	     L1,     /* PED_CENTER_CAMERA_BEHIND_PLAYER */                                                                                                         \
+	     L2,     /* PED_LOCK_TARGET */                                                                                                                         \
+	     nil,    /* NETWORK_TALK */                                                                                                                            \
+	     nil,    /* PED_1RST_PERSON_LOOK_UP */                                                                                                                 \
+	     nil,    /* PED_1RST_PERSON_LOOK_DOWN */                                                                                                               \
+	     nil,    /* _CONTROLLERACTION_36 */                                                                                                                    \
+	     nil,    /* TOGGLE_DPAD */                                                                                                                             \
+	     nil,    /* SWITCH_DEBUG_CAM_ON */                                                                                                                     \
+	     nil,    /* TAKE_SCREEN_SHOT */                                                                                                                        \
+	     nil,    /* UNKNOWN_ACTION */                                                                                                                          \
+	     nil,    /* SHOW_MOUSE_POINTER_TOGGLE */                                                                                                               \
+	 },                                                                                                                                                        \
+	 {                                                                                                                                                         \
+	     L1,      /* PED_FIREWEAPON */                                                                                                                          \
+	     R2,     /* PED_CYCLE_WEAPON_RIGHT */                                                                                                                  \
+	     L2,     /* PED_CYCLE_WEAPON_LEFT */                                                                                                                   \
+	     nil,    /* GO_FORWARD */                                                                                                                              \
+	     nil,    /* GO_BACK */                                                                                                                                 \
+	     LEFT,    /* GO_LEFT */                                                                                                                                 \
+	     RIGHT,    /* GO_RIGHT */                                                                                                                                \
+	     Q,      /* PED_SNIPER_ZOOM_IN */                                                                                                                      \
+	     X,      /* PED_SNIPER_ZOOM_OUT */                                                                                                                     \
+	     T,      /* VEHICLE_ENTER_EXIT */                                                                                                                      \
+	     SELECT, /* CAMERA_CHANGE_VIEW_ALL_SITUATIONS */                                                                                                       \
+	     Q,      /* PED_JUMPING */                                                                                                                             \
+	     X,      /* PED_SPRINT */                                                                                                                              \
+	     R3,     /* PED_LOOKBEHIND */                                                                                                                          \
+	     L3,     /* PED_DUCK */                                                                                                                                \
+	     L1,     /* PED_ANSWER_PHONE */                                                                                                                        \
+	     VFB(O)  /* VEHICLE_FIREWEAPON */                                                                                                                      \
+	     X,      /* VEHICLE_ACCELERATE */                                                                                                                      \
+	     Q,      /* VEHICLE_BRAKE */                                                                                                                           \
+	     L1,     /* VEHICLE_CHANGE_RADIO_STATION */                                                                                                            \
+	     L3,     /* VEHICLE_HORN */                                                                                                                            \
+	     R3,     /* TOGGLE_SUBMISSIONS */                                                                                                                      \
+	     R1,     /* VEHICLE_HANDBRAKE */                                                                                                                       \
+	     nil,    /* PED_1RST_PERSON_LOOK_LEFT */                                                                                                               \
+	     nil,    /* PED_1RST_PERSON_LOOK_RIGHT */                                                                                                              \
+	     L2,     /* VEHICLE_LOOKLEFT */                                                                                                                        \
+	     R2,     /* VEHICLE_LOOKRIGHT */                                                                                                                       \
+	     nil,    /* VEHICLE_LOOKBEHIND */                                                                                                                      \
+	     RSL,    /* VEHICLE_TURRETLEFT */                                                                                                                      \
+	     RSR,    /* VEHICLE_TURRETRIGHT */                                                                                                                     \
+	     UP,    /* VEHICLE_TURRETUP */                                                                                                                        \
+	     DOWN,    /* VEHICLE_TURRETDOWN */                                                                                                                      \
+	     L2,     /* PED_CYCLE_TARGET_LEFT */                                                                                                                   \
+	     R2,     /* PED_CYCLE_TARGET_RIGHT */                                                                                                                  \
+	     L1,     /* PED_CENTER_CAMERA_BEHIND_PLAYER */                                                                                                         \
+	     R1,     /* PED_LOCK_TARGET */                                                                                                                         \
+	     nil,    /* NETWORK_TALK */                                                                                                                            \
+	     nil,    /* PED_1RST_PERSON_LOOK_UP */                                                                                                                 \
+	     nil,    /* PED_1RST_PERSON_LOOK_DOWN */                                                                                                               \
+	     nil,    /* _CONTROLLERACTION_36 */                                                                                                                    \
+	     nil,    /* TOGGLE_DPAD */                                                                                                                             \
+	     nil,    /* SWITCH_DEBUG_CAM_ON */                                                                                                                     \
+	     nil,    /* TAKE_SCREEN_SHOT */                                                                                                                        \
+	     nil,    /* UNKNOWN_ACTION */                                                                                                                          \
+	     nil,    /* SHOW_MOUSE_POINTER_TOGGLE */                                                                                                               \
+	 },                                                                                                                                                        \
+	 {                                                                                                                                                         \
+	     R1,     /* PED_FIREWEAPON */                                                                                                                          \
+	     R2,     /* PED_CYCLE_WEAPON_RIGHT */                                                                                                                  \
+	     L2,     /* PED_CYCLE_WEAPON_LEFT */                                                                                                                   \
+	     nil,    /* GO_FORWARD */                                                                                                                              \
+	     nil,    /* GO_BACK */                                                                                                                                 \
+	     LEFT,   /* GO_LEFT */                                                                                                                                 \
+	     RIGHT,  /* GO_RIGHT */                                                                                                                                \
+	     Q,      /* PED_SNIPER_ZOOM_IN */                                                                                                                      \
+	     X,      /* PED_SNIPER_ZOOM_OUT */                                                                                                                     \
+	     T,      /* VEHICLE_ENTER_EXIT */                                                                                                                      \
+	     SELECT, /* CAMERA_CHANGE_VIEW_ALL_SITUATIONS */                                                                                                       \
+	     Q,      /* PED_JUMPING */                                                                                                                             \
+	     X,      /* PED_SPRINT */                                                                                                                              \
+	     R3,     /* PED_LOOKBEHIND */                                                                                                                          \
+	     L3,     /* PED_DUCK */                                                                                                                                \
+	     O,     /* PED_ANSWER_PHONE */                                                                                                                        \
+	     VFB(R1) /* VEHICLE_FIREWEAPON */                                                                                                                      \
+	     RSU,    /* VEHICLE_ACCELERATE */                                                                                                                      \
+	     RSD,    /* VEHICLE_BRAKE */                                                                                                                           \
+	     O,      /* VEHICLE_CHANGE_RADIO_STATION */                                                                                                            \
+	     L3,     /* VEHICLE_HORN */                                                                                                                            \
+	     Q,      /* TOGGLE_SUBMISSIONS */                                                                                                                      \
+	     L1,     /* VEHICLE_HANDBRAKE */                                                                                                                       \
+	     nil,    /* PED_1RST_PERSON_LOOK_LEFT */                                                                                                               \
+	     nil,    /* PED_1RST_PERSON_LOOK_RIGHT */                                                                                                              \
+	     L2,     /* VEHICLE_LOOKLEFT */                                                                                                                        \
+	     R2,     /* VEHICLE_LOOKRIGHT */                                                                                                                       \
+	     nil,    /* VEHICLE_LOOKBEHIND */                                                                                                                      \
+	     RSL,    /* VEHICLE_TURRETLEFT */                                                                                                                      \
+	     RSR,    /* VEHICLE_TURRETRIGHT */                                                                                                                     \
+	     UP,    /* VEHICLE_TURRETUP */                                                                                                                        \
+	     DOWN,    /* VEHICLE_TURRETDOWN */                                                                                                                      \
+	     L2,     /* PED_CYCLE_TARGET_LEFT */                                                                                                                   \
+	     R2,     /* PED_CYCLE_TARGET_RIGHT */                                                                                                                  \
+	     O,      /* PED_CENTER_CAMERA_BEHIND_PLAYER */                                                                                                         \
+	     L1,     /* PED_LOCK_TARGET */                                                                                                                         \
+	     nil,    /* NETWORK_TALK */                                                                                                                            \
+	     nil,    /* PED_1RST_PERSON_LOOK_UP */                                                                                                                 \
+	     nil,    /* PED_1RST_PERSON_LOOK_DOWN */                                                                                                               \
+	     nil,    /* _CONTROLLERACTION_36 */                                                                                                                    \
+	     nil,    /* TOGGLE_DPAD */                                                                                                                             \
+	     nil,    /* SWITCH_DEBUG_CAM_ON */                                                                                                                     \
+	     nil,    /* TAKE_SCREEN_SHOT */                                                                                                                        \
+	     nil,    /* UNKNOWN_ACTION */                                                                                                                          \
+	     nil,    /* SHOW_MOUSE_POINTER_TOGGLE */                                                                                                               \
+	 }}
+#else
 #define CONTROLLER_BUTTONS(T, O, X, Q, L1, L2, L3, R1, R2, R3, SELECT, RSU, RSD, RSL, RSR)                                                                                         \
 	{{                                                                                                                                                         \
 	     O,      /* PED_FIREWEAPON */                                                                                                                          \
@@ -2661,12 +2855,20 @@ int32 CControllerConfigManager::GetNumOfSettingsForAction(e_ControllerAction act
 	     nil,    /* UNKNOWN_ACTION */                                                                                                                          \
 	     nil,    /* SHOW_MOUSE_POINTER_TOGGLE */                                                                                                               \
 	 }}
+#endif
 
 #ifdef BUTTON_ICONS
 #define UP "~U~"
 #define DOWN "~D~"
 #define LEFT "~<~"
 #define RIGHT "~>~"
+
+#ifdef EX_MORE_BUTTON_ICONS
+#define DPAD_UP "~^~"
+#define DPAD_DOWN "~_~"
+#define DPAD_LEFT "~W~"
+#define DPAD_RIGHT "~R~"
+#endif
 #else
 #define UP "UP"
 #define DOWN "DOWN"
@@ -2674,12 +2876,52 @@ int32 CControllerConfigManager::GetNumOfSettingsForAction(e_ControllerAction act
 #define RIGHT "RIGHT"
 #endif
 
-const char *XboxButtons_noIcons[][MAX_CONTROLLERACTIONS] = CONTROLLER_BUTTONS("Y", "B", "A", "X", "LB", "LT", "LS", "RB", "RT", "RS", "BACK", "right stick up", "right stick down", "right stick left", "right stick right");
+// Some extras here
+//
+
+#ifdef EX_MORE_BUTTON_ICONS
+const char *XboxButtons_noIcons[][MAX_CONTROLLERACTIONS] = CONTROLLER_BUTTONS("Y", "B", "A", "X", "LB", "LT", "LS", "RB", "RT", "RS", "BACK", "right stick up",
+                                                                              "right stick down", "right stick left", "right stick right");
 
 #ifdef BUTTON_ICONS
-const char *XboxButtons[][MAX_CONTROLLERACTIONS] = CONTROLLER_BUTTONS("~T~", "~O~", "~X~", "~Q~", "~K~", "~M~", "~A~", "~J~", "~V~", "~C~", "BACK", "~H~", "~L~", "~(~", "~)~");
+const char *XboxButtons[][MAX_CONTROLLERACTIONS] =
+    CONTROLLER_BUTTONS("~T~", "~O~", "~X~", "~Q~", "~K~", "~M~", "~A~", "~J~", "~V~", "~C~", "~S~", "~H~", "~L~", "~(~", "~)~", "~^~", "~_~", "~W~", "~R~");
 #endif
 
+#define PS2_TRIANGLE "TRIANGLE"
+#define PS2_CIRCLE "CIRCLE"
+#define PS2_CROSS "CROSS"
+#define PS2_SQUARE "SQUARE"
+
+const char *PlayStationButtons_noIcons[][MAX_CONTROLLERACTIONS] =
+    CONTROLLER_BUTTONS(PS2_TRIANGLE, PS2_CIRCLE, PS2_CROSS, PS2_SQUARE, "L1", "L2", "L3", "R1", "R2", "R3", "SELECT", "right stick up", "right stick down",
+                       "right stick left", "right stick right");
+
+#ifdef BUTTON_ICONS
+const char *PlayStationButtons[][MAX_CONTROLLERACTIONS] =
+    CONTROLLER_BUTTONS("~T~", "~O~", "~X~", "~Q~", "~K~", "~M~", "~A~", "~J~", "~V~", "~C~", "~S~", "~H~", "~L~", "~(~", "~)~", "~^~", "~_~", "~W~", "~R~");
+#endif
+
+#undef PS2_TRIANGLE
+#undef PS2_CIRCLE
+#undef PS2_CROSS
+#undef PS2_SQUARE
+
+const char *NintendoSwitchButtons_noIcons[][MAX_CONTROLLERACTIONS] = CONTROLLER_BUTTONS(
+    "Y", "A", "B", "X", "L", "ZL", "LS", "R", "ZR", "RS", "BACK", "right stick up", "right stick down", "right stick left", "right stick right");
+
+#ifdef BUTTON_ICONS
+const char *NintendoSwitchButtons[][MAX_CONTROLLERACTIONS] =
+    CONTROLLER_BUTTONS("~T~", "~O~", "~X~", "~Q~", "~K~", "~M~", "~A~", "~J~", "~V~", "~C~", "~S~", "~H~", "~L~", "~(~", "~)~", "~^~", "~_~", "~W~", "~R~");
+#endif
+#else
+const char *XboxButtons_noIcons[][MAX_CONTROLLERACTIONS] = CONTROLLER_BUTTONS("Y", "B", "A", "X", "LB", "LT", "LS", "RB", "RT", "RS", "BACK", "right stick up",
+                                                                              "right stick down", "right stick left", "right stick right");
+
+#ifdef BUTTON_ICONS
+const char *XboxButtons[][MAX_CONTROLLERACTIONS] =
+    CONTROLLER_BUTTONS("~T~", "~O~", "~X~", "~Q~", "~K~", "~M~", "~A~", "~J~", "~V~", "~C~", "BACK", "~H~", "~L~", "~(~", "~)~");
+#endif
 
 #if 0 // set 1 for ps2 fonts
 #define PS2_TRIANGLE "\""
@@ -2694,7 +2936,8 @@ const char *XboxButtons[][MAX_CONTROLLERACTIONS] = CONTROLLER_BUTTONS("~T~", "~O
 #endif
 
 const char *PlayStationButtons_noIcons[][MAX_CONTROLLERACTIONS] =
-    CONTROLLER_BUTTONS(PS2_TRIANGLE, PS2_CIRCLE, PS2_CROSS, PS2_SQUARE, "L1", "L2", "L3", "R1", "R2", "R3", "SELECT", "right stick up", "right stick down", "right stick left", "right stick right");
+    CONTROLLER_BUTTONS(PS2_TRIANGLE, PS2_CIRCLE, PS2_CROSS, PS2_SQUARE, "L1", "L2", "L3", "R1", "R2", "R3", "SELECT", "right stick up", "right stick down",
+                       "right stick left", "right stick right");
 
 #ifdef BUTTON_ICONS
 const char *PlayStationButtons[][MAX_CONTROLLERACTIONS] =
@@ -2706,13 +2949,22 @@ const char *PlayStationButtons[][MAX_CONTROLLERACTIONS] =
 #undef PS2_CROSS
 #undef PS2_SQUARE
 
-const char *NintendoSwitchButtons_noIcons[][MAX_CONTROLLERACTIONS] =
-    CONTROLLER_BUTTONS("Y", "A", "B", "X", "L", "ZL", "LS", "R", "ZR", "RS", "BACK", "right stick up", "right stick down", "right stick left", "right stick right");
+const char *NintendoSwitchButtons_noIcons[][MAX_CONTROLLERACTIONS] = CONTROLLER_BUTTONS(
+    "Y", "A", "B", "X", "L", "ZL", "LS", "R", "ZR", "RS", "BACK", "right stick up", "right stick down", "right stick left", "right stick right");
 
 #ifdef BUTTON_ICONS
 const char *NintendoSwitchButtons[][MAX_CONTROLLERACTIONS] =
     CONTROLLER_BUTTONS("~T~", "~O~", "~X~", "~Q~", "~K~", "~M~", "~A~", "~J~", "~V~", "~C~", "BACK", "~H~", "~L~", "~(~", "~)~");
 #endif
+#endif
+
+#ifdef EX_PC_KEY_ICONS
+const char *KeyboardKeys[][MAX_CONTROLLERACTIONS] =
+    CONTROLLER_BUTTONS("~T~", "~O~", "~X~", "~Q~", "~K~", "~M~", "~A~", "~J~", "~V~", "~C~", "~S~", "~H~", "~L~", "~(~", "~)~", "~^~", "~_~", "~W~", "~R~");
+#endif
+//
+
+/////
 
 #undef UP
 #undef DOWN
@@ -2774,6 +3026,20 @@ void CControllerConfigManager::GetWideStringOfCommandKeys(uint16 action, wchar *
 	}
 #endif
 
+#ifdef EX_PC_KEY_ICONS // GetWideStringOfCommandKeys
+	if (CFont::PCKeySlot != -1) {
+		wchar wstr[16];
+
+		const char* (*PCKeys)[MAX_CONTROLLERACTIONS] = KeyboardKeys;
+
+		assert(PCKeys[CPad::GetPad(0)->Mode][action] != nil);
+		AsciiToUnicode(PCKeys[CPad::GetPad(0)->Mode][action], wstr);
+
+		CMessages::WideStringCopy(text, wstr, leight);
+		return;
+	}
+#endif
+
 	int32 nums = GetNumOfSettingsForAction((e_ControllerAction)action);
 
 	int32 sets = 0;
@@ -2949,3 +3215,93 @@ void CControllerConfigManager::ResetSettingOrder(e_ControllerAction action)
 		}
 	}
 }
+
+#ifdef EX_PC_KEY_ICONS
+int CControllerConfigManager::GetControllerSettingNonJoystick(e_ControllerAction action)
+{
+	// First, the mouse key is checked
+
+	int key = GetControllerKeyAssociatedWithAction(action, MOUSE);
+
+	if (key != 0 && key != rsNULL)
+		return key;
+
+	for (int i = KEYBOARD; i < MAX_CONTROLLERTYPES; i++) {
+		if (i == JOYSTICK || i == MOUSE)
+			continue;
+
+		key = GetControllerKeyAssociatedWithAction(action, (eControllerType)i);
+
+		if (key == 0 || key == rsNULL)
+			continue;
+
+		return key;
+	}
+
+	return -1;
+}
+
+int CControllerConfigManager::GetCurrentPCKeyFromCurrentAction()
+{
+	static uint8 currentAction = 0;
+
+	int key = -1;
+
+	key = GetControllerSettingNonJoystick((e_ControllerAction(ControlsManager.m_curActionsInMessage[currentAction])));
+
+	if (currentAction == 3 || ControlsManager.m_curActionsInMessage[currentAction] == -1 || ControlsManager.m_curActionsInMessage[currentAction + 1] == -1)
+		currentAction = 0;
+	else if (ControlsManager.m_curActionsInMessage[currentAction + 1] != -1)
+		currentAction++;
+
+	if (key == -1)
+		return -1;
+
+	int symbol = -1;
+
+	if (key <= rsMOUSEX2BUTTON) {
+		// Mouse
+		switch (key)
+		{
+			case rsMOUSELEFTBUTTON:
+				symbol = 0;
+				break;
+			case rsMOUSERIGHTBUTTON:
+				symbol = 1;
+				break;
+			case rsMOUSMIDDLEBUTTON:
+				symbol = 3;
+				break;
+			case rsMOUSEWHEELUPBUTTON:
+				symbol = SPRITE_MOUSE_WHEEL_UP;
+				break;
+			case rsMOUSEWHEELDOWNBUTTON:
+				symbol = SPRITE_MOUSE_WHEEL_DOWN;
+				break;
+			case rsMOUSEX1BUTTON:
+				symbol = 4;
+				break;
+			case rsMOUSEX2BUTTON:
+				symbol = 5;
+				break;
+		}
+	} else {
+		for (int i = 3; i < 255; i++) {
+			RsKeyCodes keyCode;
+
+			_InputTranslateKey(&keyCode, 0x1000000, i);
+
+			if (keyCode == rsNULL || keyCode == 0)
+				_InputTranslateShiftKey(&keyCode, i, false);
+
+			if (key != keyCode)
+				_InputTranslateKey(&keyCode, 0, i);
+
+			if (key == keyCode)
+				symbol = i - 1;
+		}
+	}
+
+	return symbol;
+}
+#endif
diff --git a/src/core/ControllerConfig.h b/src/core/ControllerConfig.h
index d61e23e6..9d5e4200 100644
--- a/src/core/ControllerConfig.h
+++ b/src/core/ControllerConfig.h
@@ -145,6 +145,11 @@ public:
 	bool                  m_aSimCheckers[MAX_SIMS][MAX_CONTROLLERTYPES];
 	bool                  m_bMouseAssociated;
 
+#ifdef EX_PC_KEY_ICONS
+	int					  m_curActionsInMessage[4];
+#endif
+
+
 #ifdef LOAD_INI_SETTINGS
 	static uint32 ms_padButtonsInited;
 #endif
@@ -208,6 +213,11 @@ public:
 	wchar *GetControllerSettingTextMouse          (e_ControllerAction action);
 	wchar *GetControllerSettingTextJoystick       (e_ControllerAction action);
 
+#ifdef EX_PC_KEY_ICONS
+	int GetControllerSettingNonJoystick(e_ControllerAction action);
+	int GetCurrentPCKeyFromCurrentAction();
+#endif
+
 	int32 GetNumOfSettingsForAction(e_ControllerAction action);
 	void  GetWideStringOfCommandKeys(uint16 action, wchar *text, uint16 leight);
 	int32 GetControllerKeyAssociatedWithAction(e_ControllerAction action, eControllerType type);
diff --git a/src/core/Frontend.cpp b/src/core/Frontend.cpp
index e23239cb..76149e75 100644
--- a/src/core/Frontend.cpp
+++ b/src/core/Frontend.cpp
@@ -48,6 +48,10 @@
 
 #endif
 
+#ifdef EX_PHOTO_MODE // Photo mode button in pause menu
+#include "PhotoMode.h"
+#endif
+
 #ifdef MODLOADER // fronten1.txd, fronten2.txd
 #include "modloader.h"
 #endif
@@ -3695,6 +3699,14 @@ CMenuManager::Process(void)
 
 	InitialiseChangedLanguageSettings();
 
+//#if defined EX_PHOTO_MODE && !defined DEBUG // Exit photo mode by pressing the button
+#if defined EX_PHOTO_MODE // Exit photo mode by pressing the button
+if (CPhotoMode::IsPhotoModeEnabled() && (CPad::GetPad(0)->GetEscapeJustDown() || CPad::GetPad(0)->IsAffectedByController && CPad::GetPad(0)->GetCircleJustUp())) {
+	CPhotoMode::DisablePhotoMode();
+	return;
+}
+#endif
+
 	if (m_bMenuActive) {
 		UserInput();
 		ProcessFileActions();
@@ -5095,6 +5107,15 @@ CMenuManager::ProcessUserInput(uint8 goDown, uint8 goUp, uint8 optionSelected, u
 				SwitchToNewScreen(MENUPAGE_OUTRO);
 				break;
 			case MENUACTION_RESUME:
+
+#ifdef EX_PHOTO_MODE // Photo mode button in pause menu
+			case MENUACTION_PHOTO_MODE:
+				if (aScreens[m_nCurrScreen].m_aEntries[m_nCurrOption].m_Action == MENUACTION_PHOTO_MODE)
+					CPhotoMode::EnablePhotoMode();
+				else
+					CPhotoMode::DisablePhotoMode();
+#endif
+
 #ifdef LEGACY_MENU_OPTIONS
 				if (m_PrefsVsyncDisp != m_PrefsVsync) {
 					m_PrefsVsync = m_PrefsVsyncDisp;
diff --git a/src/core/Frontend.h b/src/core/Frontend.h
index fb622719..dd9244df 100644
--- a/src/core/Frontend.h
+++ b/src/core/Frontend.h
@@ -343,6 +343,11 @@ enum eMenuAction
 	MENUACTION_DOOM_MODE_FP,
 #endif
 
+#ifdef EX_PHOTO_MODE // Photo mode button in pause menu
+	MENUACTION_PHOTO_MODE,
+#endif
+
+
 #ifdef MENU_TEST
 	MENUACTION_GENERALMENU,
 	MENUACTION_TEST,
diff --git a/src/core/Game.cpp b/src/core/Game.cpp
index 8aa890e2..33c381d0 100644
--- a/src/core/Game.cpp
+++ b/src/core/Game.cpp
@@ -96,6 +96,10 @@
 #include "TexturePools.h"
 #endif
 
+#ifdef EX_PHOTO_MODE
+#include "PhotoMode.h"
+#endif
+
 #ifdef MODLOADER // particle.txd
 #include "modloader.h"
 #endif
@@ -937,7 +941,12 @@ void CGame::Process(void)
 	CStreaming::Update();
 	uint32 processTime = CTimer::GetCurrentTimeInCycles() / CTimer::GetCyclesPerMillisecond() - startTime;
 	CWindModifiers::Number = 0;
+
+	#ifdef EX_PHOTO_MODE // CGame::Process
+	if (!CTimer::GetIsPaused() && !CPhotoMode::IsPhotoModeEnabled())
+#else
 	if (!CTimer::GetIsPaused())
+#endif
 	{
 #ifndef MASTER
 		if (VarUpdatePlayerCoords) {
@@ -1047,6 +1056,43 @@ void CGame::Process(void)
 			POP_MEMID();
 		}
 	}
+
+#ifdef EX_PHOTO_MODE // CGame::Process
+	else if (CPhotoMode::IsPhotoModeEnabled()) {
+		CPhotoMode::ProcessControl();
+		CWeather::Update();
+
+#ifdef EX_DISTANT_LIGHTS // IsPhotoModeEnabled
+		if (bEnableDistantLights) {
+			for (int i = CPools::GetDummyPool()->GetSize() - 1; i >= 0; i--) {
+				CDummy* entity = CPools::GetDummyPool()->GetSlot(i);
+
+				if (!entity)
+					continue;
+
+				entity->ProcessDistantLights();
+			}
+
+			for (int i = CPools::GetBuildingPool()->GetSize() - 1; i >= 0; i--) {
+				CBuilding* entity = CPools::GetBuildingPool()->GetSlot(i);
+
+				if (!entity)
+					continue;
+
+				entity->ProcessDistantLights();
+			}
+		}
+#endif
+
+		CTimeCycle::Update();
+		CCullZones::Update();
+		CCoronas::DoSunAndMoon();
+		CCoronas::Update();
+		CShadows::UpdateStaticShadows();
+		CShadows::UpdatePermanentShadows();
+	}
+#endif
+
 #ifdef GTA_PS2
 	CMemCheck::DoTest();
 #endif
diff --git a/src/core/MenuScreensCustom.cpp b/src/core/MenuScreensCustom.cpp
index 7e7df013..274e12b7 100644
--- a/src/core/MenuScreensCustom.cpp
+++ b/src/core/MenuScreensCustom.cpp
@@ -724,6 +724,11 @@ CMenuScreenCustom aScreens[] = {
 		MENUACTION_CHANGEMENU,	"FEH_MAP",	{nil, SAVESLOT_NONE, MENUPAGE_MAP}, 0, 0, MENUALIGN_CENTER,
 		MENUACTION_CHANGEMENU,	"FEP_STA",	{nil, SAVESLOT_NONE, MENUPAGE_STATS}, 0, 0, MENUALIGN_CENTER,
 		MENUACTION_CHANGEMENU,	"FEH_BRI",	{nil, SAVESLOT_NONE, MENUPAGE_BRIEFS}, 0, 0, MENUALIGN_CENTER,
+
+#ifdef EX_PHOTO_MODE // Photo mode button in pause menu
+		MENUACTION_PHOTO_MODE,	"FEM_PHT",	{nil, SAVESLOT_NONE, 0}, 0, 0, MENUALIGN_CENTER,
+#endif
+
 		MENUACTION_CHANGEMENU,	"FET_OPT",	{nil, SAVESLOT_NONE, MENUPAGE_OPTIONS}, 0, 0, MENUALIGN_CENTER,
 		MENUACTION_CHANGEMENU,	"FEP_QUI",	{nil, SAVESLOT_NONE, MENUPAGE_EXIT}, 0, 0, MENUALIGN_CENTER,
    },
diff --git a/src/core/Streaming.cpp b/src/core/Streaming.cpp
index 4a3f7097..6b833611 100644
--- a/src/core/Streaming.cpp
+++ b/src/core/Streaming.cpp
@@ -38,6 +38,10 @@
 #include "Frontend.h"
 #include "VarConsole.h"
 
+#ifdef EX_PHOTO_MODE
+#include "PhotoMode.h"
+#endif
+
 #ifdef MODLOADER
 #include "modloader.h"
 #endif
@@ -355,6 +359,13 @@ CStreaming::Update(void)
 	   CGame::currArea == AREA_MAIN_MAP &&
 	   !CReplay::IsPlayingBack()){
 		StreamVehiclesAndPeds();
+
+#ifdef EX_PHOTO_MODE // StreamZoneModels depends on the camera position
+		if (CPhotoMode::IsPhotoModeEnabled())
+			StreamZoneModels(CPhotoMode::GetCameraPosition());
+		else
+#endif
+
 		StreamZoneModels(FindPlayerCoors());
 	}
 
diff --git a/src/core/Timer.cpp b/src/core/Timer.cpp
index 77f26a8b..d17d53dc 100644
--- a/src/core/Timer.cpp
+++ b/src/core/Timer.cpp
@@ -7,6 +7,10 @@
 #include "Timer.h"
 #include "SpecialFX.h"
 
+#ifdef EX_PHOTO_MODE
+#include "PhotoMode.h"
+#endif
+
 uint32 CTimer::m_snTimeInMilliseconds;
 uint32 CTimer::m_snTimeInMillisecondsPauseMode = 1;
 
@@ -143,6 +147,10 @@ void CTimer::Update(void)
 		
 	if ( GetIsPaused() )
 		ms_fTimeStep = 0.0f;
+#ifdef EX_PHOTO_MODE // CTimer::Update
+	else if (CPhotoMode::IsPhotoModeEnabled())
+		ms_fTimeStep = frameTime / 1000.0f * 50.0f;
+#endif
 	else
 	{
 		m_snTimeInMilliseconds += uint32(frameTimeFractionScaled);
diff --git a/src/core/main.cpp b/src/core/main.cpp
index 42535327..11346e96 100644
--- a/src/core/main.cpp
+++ b/src/core/main.cpp
@@ -79,6 +79,10 @@
 #include "GitSHA1.h"
 #endif
 
+#ifdef EX_PHOTO_MODE
+#include "PhotoMode.h"
+#endif
+
 #ifdef MODLOADER
 #include "modloader.h"
 #endif
@@ -1535,7 +1539,12 @@ Render2dStuff(void)
 		firstPersonWeapon = true;
 
 	// Draw black border for sniper and rocket launcher
+#ifdef EX_PHOTO_MODE // Don't draw black border for sniper and rocket launcher during photo mode
+	if(!CPhotoMode::IsPhotoModeEnabled() && ((weaponType == WEAPONTYPE_SNIPERRIFLE || weaponType == WEAPONTYPE_ROCKETLAUNCHER || weaponType == WEAPONTYPE_LASERSCOPE) && firstPersonWeapon)){
+#else
 	if((weaponType == WEAPONTYPE_SNIPERRIFLE || weaponType == WEAPONTYPE_ROCKETLAUNCHER || weaponType == WEAPONTYPE_LASERSCOPE) && firstPersonWeapon){
+#endif
+		
 		CRGBA black(0, 0, 0, 255);
 
 		// top and bottom strips
@@ -1556,9 +1565,17 @@ Render2dStuff(void)
 #ifdef GTA_SCENE_EDIT
 	if(CSceneEdit::m_bEditOn)
 		CSceneEdit::Draw();
+	else {
+#endif
+#ifdef EX_PHOTO_MODE // Render2dStuff
+	if (CPhotoMode::IsPhotoModeEnabled())
+		CPhotoMode::DrawMenuAndEffects();
 	else
 #endif
 		CHud::Draw();
+	}
+
+
 
 	CSpecialFX::Render2DFXs();
 	CUserDisplay::OnscnTimer.ProcessForDisplay();
diff --git a/src/extras/PhotoMode.cpp b/src/extras/PhotoMode.cpp
new file mode 100644
index 00000000..a219ed3d
--- /dev/null
+++ b/src/extras/PhotoMode.cpp
@@ -0,0 +1,2386 @@
+#include "PhotoMode.h"
+
+#ifdef EX_PHOTO_MODE
+
+#include "main.h"
+#include "Camera.h"
+#include "main.h"
+#include "Pad.h"
+#include "ControllerConfig.h"
+#include "Camera.h"
+#include "General.h"
+#include "Lists.h"
+#include "PlayerInfo.h"
+#include "Frontend.h"
+#include "Hud.h"
+#include "Timer.h"
+#include "Clock.h"
+#include "DMAudio.h"
+#include "Font.h"
+#include "Text.h"
+#include "Weather.h"
+#include "World.h"
+#include "AnimBlendAssociation.h"
+#include "RpAnimBlend.h"
+#include "WeaponType.h"
+#include "PointLights.h"
+#include "Sprite.h"
+#include "Radar.h"
+#include "postfx.h"
+#include "Streaming.h"
+
+#define KEYDOWN(k) ControlsManager.GetIsKeyboardKeyDown((RsKeyCodes)k)
+#define KEYJUSTDOWN(k) ControlsManager.GetIsKeyboardKeyJustDown((RsKeyCodes)k)
+
+#define DEFAULT_TEXT_COLOR 255, 150, 225, 255
+#define SELECTED_TEXT_COLOR 255, 170, 225, 255
+#define HINT_TEXT_COLOR 255, 255, 255, 255
+
+const char* CPhotoMode::clothesList[] = { "player", "player2", "player3", "player4", "player5", "player6", "player7", "player8", "player9", "play10", "play11", "play12" };
+
+const int CPhotoMode::animList[][2] = {
+										{ ASSOCGRP_STD, ANIM_STD_IDLE },
+										{ ASSOCGRP_STD, ANIM_STD_IDLE_BIGGUN },
+										{ ASSOCGRP_STD, ANIM_STD_IDLE_CAM },
+										{ ASSOCGRP_STD, ANIM_STD_CHAT },
+										{ ASSOCGRP_STD, ANIM_STD_SEAT_UP },
+										{ ASSOCGRP_STD, ANIM_STD_EVADE_DIVE },
+										{ ASSOCGRP_STD, ANIM_STD_GET_UP },
+										{ ASSOCGRP_STD, ANIM_STD_GET_UP_FRONT },
+										{ ASSOCGRP_STD, ANIM_STD_ARREST },
+										{ ASSOCGRP_STD, ANIM_STD_CRAWLOUT_LHS },
+										{ ASSOCGRP_STD, ANIM_STD_CAR_SIT },
+										{ ASSOCGRP_STD, ANIM_STD_CAR_SIT_P },
+										{ ASSOCGRP_STD, ANIM_STD_PARTIAL_FUCKU },
+										{ ASSOCGRP_PLAYER, ANIM_STD_WALK },
+										{ ASSOCGRP_PLAYER, ANIM_STD_RUN },
+										{ ASSOCGRP_PLAYER, ANIM_STD_RUNFAST },
+#ifdef CLIMBING
+										{ ASSOCGRP_STD, ANIM_STD_CLIMBING_PULL },
+#endif
+#ifdef CROUCH
+										{ ASSOCGRP_STD, ANIM_STD_CROUCH_FORWARD },
+										{ ASSOCGRP_STD, ANIM_STD_CROUCH_ROLL_L },
+#endif
+#ifdef SWIMMING
+										{ ASSOCGRP_STD, ANIM_STD_SWIM_BREAST },
+#endif
+										{ ASSOCGRP_SCREWDRIVER, ANIM_MELEE_ATTACK },
+										{ ASSOCGRP_KNIFE, ANIM_MELEE_ATTACK },
+										{ ASSOCGRP_BASEBALLBAT, ANIM_MELEE_ATTACK },
+										{ ASSOCGRP_CHAINSAW, ANIM_MELEE_ATTACK_2ND },
+										{ ASSOCGRP_COLT, ANIM_WEAPON_FIRE },
+										{ ASSOCGRP_COLT, ANIM_MELEE_ATTACK_2ND },
+										{ ASSOCGRP_PYTHON, ANIM_WEAPON_FIRE },
+										{ ASSOCGRP_PYTHON, ANIM_MELEE_ATTACK_2ND },
+										{ ASSOCGRP_SHOTGUN, ANIM_WEAPON_FIRE },
+										{ ASSOCGRP_SHOTGUN, ANIM_MELEE_ATTACK_2ND },
+#ifdef EX_WEAPON_STEYR // Animations in photo mode
+										{ ASSOCGRP_STEYR, ANIM_WEAPON_FIRE },
+#endif
+										{ ASSOCGRP_BUDDY, ANIM_WEAPON_FIRE },
+										{ ASSOCGRP_BUDDY, ANIM_MELEE_ATTACK_2ND },
+										{ ASSOCGRP_UZI, ANIM_WEAPON_FIRE },
+										{ ASSOCGRP_UZI, ANIM_MELEE_ATTACK_2ND },
+										{ ASSOCGRP_RIFLE, ANIM_WEAPON_FIRE },
+										{ ASSOCGRP_RIFLE, ANIM_MELEE_ATTACK_2ND },
+										{ ASSOCGRP_THROW, ANIM_WEAPON_FIRE },
+										{ ASSOCGRP_FLAMETHROWER, ANIM_WEAPON_FIRE },
+#ifdef FIRING_AND_AIMING // Animations in photo mode
+										{ ASSOCGRP_ROCKET, ANIM_WEAPON_FIRE },
+#endif
+									  };
+
+bool CPhotoMode::bPhotoModeEnabled = false;
+bool CPhotoMode::bMenuOpen = false;
+bool CPhotoMode::bPhotoModeReadyToUse = false;
+bool CPhotoMode::bPlayerWantsToTakePhoto = false;
+float CPhotoMode::photoSavedTime = 0.0f;
+bool CPhotoMode::bHideUI = false;
+
+float CPhotoMode::betaAngleCamera = 0.0f;
+float CPhotoMode::alphaAngleCamera = 0.0f;
+CVector CPhotoMode::cameraPos = CVector(0.0f, 0.0f, 0.0f);
+
+int CPhotoMode::maxTabs = NUM_TABS;
+int CPhotoMode::currentTab = TAB_CAMERA;
+int CPhotoMode::maxItems = NUM_CAMERA_ITEMS;
+int CPhotoMode::currentItem = ITEM_CAMERA_FOV;
+
+float CPhotoMode::cameraFOV = 70.0f;
+float CPhotoMode::cameraTilt = 0.0f;
+float CPhotoMode::cameraNearClip = DEFAULT_NEAR;
+
+bool CPhotoMode::bCharacterVisibility = true;
+int CPhotoMode::clothesID = -1;
+int CPhotoMode::animID = -1;
+float CPhotoMode::animFrame = 0.0f;
+int CPhotoMode::weaponID = WEAPONTYPE_UNARMED;
+bool CPhotoMode::bMuzzleFlash = false;
+float CPhotoMode::rotateAngle = 0.0f;
+
+float CPhotoMode::sunAndMoonAngle = 0.0f;
+int CPhotoMode::weatherID = -1;
+bool CPhotoMode::bHasSunAngleBeenChanged = false;
+
+bool CPhotoMode::bDefaultLightEnabled = false;
+float CPhotoMode::lightColorRed = 1.0f;
+float CPhotoMode::lightColorGreen = 1.0f;
+float CPhotoMode::lightColorBlue = 1.0f;
+bool CPhotoMode::bDarkLightEnabled = false;
+
+int CPhotoMode::frameEffectID = FRAME_EFFECT_NONE;
+
+CPed* CPhotoMode::fakePlayer = nullptr;
+CParticle* CPhotoMode::muzzleFlashParticles[MAX_MUZZLE_PARTICLES] = {};
+CVector CPhotoMode::playerPos = CVector(0.0f, 0.0f, 0.0f);
+CVector CPhotoMode::lightPos = CVector(0.0f, 0.0f, 0.0f);
+
+CVector CPhotoMode::storedPlayerPos = CVector(0.0f, 0.0f, 0.0f);
+int CPhotoMode::storedColorfilter = 0;
+float CPhotoMode::storedIntensity = 1.0f;
+int CPhotoMode::storedBrighntess = 0;
+
+float CPhotoMode::storedInterpolationValue = 0.0f;
+int16 CPhotoMode::storedOldWeatherType = 0;
+int16 CPhotoMode::storedNewWeatherType = 0;
+int16 CPhotoMode::storedForcedWeatherType = WEATHER_RANDOM;
+float CPhotoMode::storedRain = 0.0f;
+
+void CPhotoMode::EnablePhotoMode()
+{
+	DMAudio.SetEffectsFadeVol(0);
+	DMAudio.SetMusicFadeVol(0);
+
+	if (IsPhotoModeEnabled())
+		return;
+
+	RequestAnims();
+
+	CClock::StoreClock();
+	StoreWeatherState();
+
+	FindPlayerPed()->bIsVisible = true;
+
+	cameraFOV = 70.0f;
+	cameraTilt = 0.0f;
+	cameraNearClip = DEFAULT_NEAR;
+
+	bCharacterVisibility = true;
+	clothesID = -1;
+	animID = -1;
+	animFrame = 0.0f;
+	weaponID = WEAPONTYPE_UNARMED;
+	bMuzzleFlash = false;
+	rotateAngle = FindPlayerPed()->m_fRotationCur;
+	storedPlayerPos = FindPlayerCoors();
+	storedColorfilter = CPostFX::EffectSwitch;
+	storedIntensity = CPostFX::Intensity;
+	storedBrighntess = FrontEndMenuManager.m_PrefsBrightness;
+
+	float angleOfSun = 2 * PI * (CClock::GetSeconds() / 60.0f + CClock::GetMinutes() + CClock::GetHours() * 60) / (24 * 60);
+	if (angleOfSun > PI)
+		sunAndMoonAngle = PI / angleOfSun;
+	else
+		sunAndMoonAngle = angleOfSun / PI;
+
+	weatherID = CWeather::OldWeatherType;
+	bHasSunAngleBeenChanged = false;
+
+	bDefaultLightEnabled = false;
+	lightColorRed = 1.0f;
+	lightColorGreen = 1.0f;
+	lightColorBlue = 1.0f;
+	bDarkLightEnabled = false;
+	playerPos = FindPlayerCoors();
+	lightPos = FindPlayerCoors() + FindPlayerPed()->GetForward();
+
+	frameEffectID = FRAME_EFFECT_NONE;
+
+	alphaAngleCamera = TheCamera.Cams[TheCamera.ActiveCam].Alpha;
+	betaAngleCamera = CGeneral::GetATanOfXY(FindPlayerCoors().y - TheCamera.GetMatrix().GetPosition().y, FindPlayerCoors().x - TheCamera.GetMatrix().GetPosition().x);
+	cameraPos = TheCamera.Cams[TheCamera.ActiveCam].Source;
+
+	currentTab = TAB_CAMERA;
+	maxItems = NUM_CAMERA_ITEMS;
+	currentItem = ITEM_CAMERA_FOV;
+
+	bMenuOpen = false;
+	bPhotoModeEnabled = true;
+	bPhotoModeReadyToUse = false;
+	bPlayerWantsToTakePhoto = false;
+	photoSavedTime = 0.0f;
+	bHideUI = false;
+
+#ifdef FIRST_PERSON // Restoring the player's head in first-person mode when switching to photo mode
+	if (TheCamera.Cams[TheCamera.ActiveCam].Mode == CCam::MODE_REAL_1ST_PERSON)
+		RpAnimBlendClumpUpdateAnimations(FindPlayerPed()->GetClump(), CTimer::GetTimeStepInSeconds());
+#endif
+}
+
+void CPhotoMode::DisablePhotoMode()
+{
+	if (!IsPhotoModeEnabled())
+		return;
+
+	DMAudio.SetEffectsFadeVol(127);
+	DMAudio.SetMusicFadeVol(127);
+
+	RemoveAnims();
+
+	CClock::RestoreClock();
+	RestoreWeatherState();
+	CPostFX::EffectSwitch = storedColorfilter;
+	CPostFX::Intensity = storedIntensity;
+	FrontEndMenuManager.m_PrefsBrightness = storedBrighntess;
+	FindPlayerPed()->SetHeading(FindPlayerPed()->m_fRotationCur);
+	FindPlayerPed()->SetPosition(storedPlayerPos);
+
+	bHasSunAngleBeenChanged = false;
+
+	DeleteFakePlayer();
+
+	RemovePlayerWeapon();
+
+	CWeaponInfo* weaponInfo = FindPlayerPed()->GetWeapon()->GetInfo();
+	if (weaponInfo->m_nModelId != -1) {
+		FindPlayerPed()->AddWeaponModel(weaponInfo->m_nModelId);
+	}
+	
+	bMenuOpen = false;
+	bPhotoModeEnabled = false;
+}
+
+void CPhotoMode::ProcessControl()
+{
+	if (CTimer::GetIsPaused())
+		return;
+
+	if (!bPhotoModeReadyToUse) {
+		if (CPad::GetPad(0)->IsAffectedByController) {
+			// Avoid creating a photo after the player has entered photo mode on the gamepad
+			
+			CPad::GetPad(0)->AffectFromXinput(0);
+			
+			if (CPad::GetPad(0)->PCTempJoyState.Cross)
+				return;
+			else
+				bPhotoModeReadyToUse = true;
+		} else {
+			bPhotoModeReadyToUse = true;
+		}
+	}
+
+	if (bPlayerWantsToTakePhoto)
+		TakePhoto();
+
+	if (photoSavedTime > 0.0f)
+		photoSavedTime -= 1.0f * CTimer::GetTimeStep();
+
+	ProcessCamera();
+	ProcessInput();
+
+	UpdateMuzzleParticles();
+
+	ProcessPlayerPosition();
+	ProcessLights();
+}
+
+void CPhotoMode::DrawHints()
+{
+	if (photoSavedTime > 0.0f) {
+		CSprite2d::DrawRect(CRect(0.0f, SCREEN_SCALE_Y(20.0f), SCREEN_WIDTH, 0.0f), CRGBA(25, 25, 25, 100));
+
+		CFont::SetPropOn();
+		CFont::SetBackgroundOff();
+		CFont::SetScale(SCREEN_SCALE_X(0.8f * 0.6f), SCREEN_SCALE_Y(1.35f * 0.6f));
+		CFont::SetRightJustifyOff();
+		CFont::SetRightJustifyWrap(0.0f);
+		CFont::SetFontStyle(FONT_LOCALE(FONT_HEADING));
+		CFont::SetBackGroundOnlyTextOn();
+		CFont::SetCentreOff();
+		CFont::SetColor(CRGBA(DEFAULT_TEXT_COLOR));
+		CFont::PrintString(SCREEN_SCALE_X(5.0f), SCREEN_SCALE_Y(1.5f), TheText.Get("PM_SAVE"));
+	}
+
+	if (bHideUI && !bMenuOpen)
+		return;
+
+	CPad* pad = CPad::GetPad(0);
+
+	CSprite2d::DrawRect(CRect(0.0f, SCREEN_HEIGHT, SCREEN_WIDTH, SCREEN_SCALE_FROM_BOTTOM(20.0f)), CRGBA(25, 25, 25, 100));
+	
+	const float textScaleX = 0.8f * 0.475f;
+	const float textScaleY = 1.35f * 0.475f;
+
+	CFont::RenderState.scaleX = SCREEN_SCALE_X(0.8f * 0.75f);
+	CFont::RenderState.scaleY = SCREEN_SCALE_Y(1.35f * 0.75f);
+
+	float offsetX = 3.0f;
+	const float buttonY = 20.5f;
+	const float textY = 17.0f;
+
+	CFont::SetPropOn();
+	CFont::SetBackgroundOff();
+	CFont::SetRightJustifyOff();
+	CFont::SetRightJustifyWrap(0.0f);
+	CFont::SetFontStyle(FONT_LOCALE(FONT_HEADING));
+	CFont::SetBackGroundOnlyTextOn();
+	CFont::SetCentreOff();
+	CFont::SetColor(CRGBA(HINT_TEXT_COLOR));
+
+	if (pad->IsAffectedByController) {
+		// Toggle menu
+
+		CFont::PS2Symbol = BUTTON_SQUARE;
+		CFont::DrawButton(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+		CFont::PS2Symbol = BUTTON_NONE;
+
+		offsetX += 20.0f;
+
+		CFont::SetScale(SCREEN_SCALE_X(textScaleX), SCREEN_SCALE_Y(textScaleY));
+		CFont::PrintString(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(textY), TheText.Get("PM_TOGL"));
+
+		offsetX += 55.0f;
+
+		// Exit photo mode
+
+		CFont::PS2Symbol = BUTTON_CIRCLE;
+		CFont::DrawButton(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+		CFont::PS2Symbol = BUTTON_NONE;
+
+		offsetX += 20.0f;
+
+		CFont::SetScale(SCREEN_SCALE_X(textScaleX), SCREEN_SCALE_Y(textScaleY));
+		CFont::PrintString(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(textY), TheText.Get("PM_EXIT"));
+
+		offsetX += 50.0f;
+
+		if (bMenuOpen) {
+			// Adjust
+
+			CFont::PS2Symbol = BUTTON_UP_DOWN;
+			CFont::DrawButton(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+			CFont::PS2Symbol = BUTTON_NONE;
+
+			offsetX += 20.0f;
+
+			CFont::PS2Symbol = BUTTON_LEFT_RIGHT;
+			CFont::DrawButton(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+			CFont::PS2Symbol = BUTTON_NONE;
+		
+			offsetX += 20.0f;
+
+			CFont::SetScale(SCREEN_SCALE_X(textScaleX), SCREEN_SCALE_Y(textScaleY));
+			CFont::PrintString(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(textY), TheText.Get("PM_ADJS"));
+
+			offsetX += 75.0f;
+
+			if (currentTab == TAB_LIGHT && (bDefaultLightEnabled || bDarkLightEnabled)) {
+				// Move light
+			
+				CFont::PS2Symbol = BUTTON_CROSS;
+				CFont::DrawButton(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+				CFont::PS2Symbol = BUTTON_NONE;
+
+				offsetX += 20.0f;
+
+				// +
+				wchar sPrint[2];
+				char sTemp[2];
+				sprintf(sTemp, "+");
+				AsciiToUnicode(sTemp, sPrint);
+				CFont::SetScale(SCREEN_SCALE_X(0.45f), SCREEN_SCALE_Y(0.85f));
+				CFont::PrintString(SCREEN_SCALE_X(offsetX - 2.0f), SCREEN_SCALE_FROM_BOTTOM(textY + 2.0f), sPrint);
+
+				offsetX += 11.0f;
+
+				CFont::PS2Symbol = BUTTON_LSTICK;
+				CFont::DrawButton(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+				CFont::PS2Symbol = BUTTON_NONE;
+
+				offsetX += 15.0f;
+
+				CFont::PS2Symbol = BUTTON_L2;
+				CFont::DrawButton(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+				CFont::PS2Symbol = BUTTON_NONE;
+
+				offsetX += 15.0f;
+
+				CFont::PS2Symbol = BUTTON_R2;
+				CFont::DrawButton(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+				CFont::PS2Symbol = BUTTON_NONE;
+
+				offsetX += 20.0f;
+
+				CFont::SetScale(SCREEN_SCALE_X(textScaleX), SCREEN_SCALE_Y(textScaleY));
+				CFont::PrintString(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(textY), TheText.Get("PM_MVLI"));
+			} else if (currentTab == TAB_CHARACTER) {
+				// Move character
+
+				CFont::PS2Symbol = BUTTON_CROSS;
+				CFont::DrawButton(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+				CFont::PS2Symbol = BUTTON_NONE;
+
+				offsetX += 20.0f;
+
+				// +
+				wchar sPrint[2];
+				char sTemp[2];
+				sprintf(sTemp, "+");
+				AsciiToUnicode(sTemp, sPrint);
+				CFont::SetScale(SCREEN_SCALE_X(0.45f), SCREEN_SCALE_Y(0.85f));
+				CFont::PrintString(SCREEN_SCALE_X(offsetX - 2.0f), SCREEN_SCALE_FROM_BOTTOM(textY + 2.0f), sPrint);
+
+				offsetX += 11.0f;
+
+				CFont::PS2Symbol = BUTTON_LSTICK;
+				CFont::DrawButton(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+				CFont::PS2Symbol = BUTTON_NONE;
+
+				offsetX += 15.0f;
+
+				CFont::PS2Symbol = BUTTON_L2;
+				CFont::DrawButton(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+				CFont::PS2Symbol = BUTTON_NONE;
+
+				offsetX += 15.0f;
+
+				CFont::PS2Symbol = BUTTON_R2;
+				CFont::DrawButton(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+				CFont::PS2Symbol = BUTTON_NONE;
+
+				offsetX += 20.0f;
+
+				CFont::SetScale(SCREEN_SCALE_X(textScaleX), SCREEN_SCALE_Y(textScaleY));
+				CFont::PrintString(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(textY), TheText.Get("PM_MVCH"));
+			}
+		} else {
+			// Move camera
+
+			CFont::PS2Symbol = BUTTON_LSTICK;
+			CFont::DrawButton(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+			CFont::PS2Symbol = BUTTON_NONE;
+
+			offsetX += 20.0f;
+
+			CFont::SetScale(SCREEN_SCALE_X(textScaleX), SCREEN_SCALE_Y(textScaleY));
+			CFont::PrintString(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(textY), TheText.Get("PM_MOVE"));
+
+			offsetX += 60.0f;
+
+			// Rotate camera
+
+			CFont::PS2Symbol = BUTTON_RSTICK;
+			CFont::DrawButton(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+			CFont::PS2Symbol = BUTTON_NONE;
+
+			offsetX += 20.0f;
+
+			CFont::SetScale(SCREEN_SCALE_X(textScaleX), SCREEN_SCALE_Y(textScaleY));
+			CFont::PrintString(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(textY), TheText.Get("PM_ROT"));
+
+			offsetX += 70.0f;
+
+			// Zoom
+
+			CFont::PS2Symbol = BUTTON_UP_DOWN;
+			CFont::DrawButton(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+			CFont::PS2Symbol = BUTTON_NONE;
+
+			offsetX += 20.0f;
+
+			CFont::SetScale(SCREEN_SCALE_X(textScaleX), SCREEN_SCALE_Y(textScaleY));
+			CFont::PrintString(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(textY), TheText.Get("PM_ZOOM"));
+
+			offsetX += 55.0f;
+
+			// Tilt
+
+			CFont::PS2Symbol = BUTTON_LEFT_RIGHT;
+			CFont::DrawButton(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+			CFont::PS2Symbol = BUTTON_NONE;
+
+			offsetX += 20.0f;
+
+			CFont::SetScale(SCREEN_SCALE_X(textScaleX), SCREEN_SCALE_Y(textScaleY));
+			CFont::PrintString(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(textY), TheText.Get("PM_TILT"));
+
+			offsetX += 60.0f;
+
+			// Speed
+
+			CFont::PS2Symbol = BUTTON_L1;
+			CFont::DrawButton(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+			CFont::PS2Symbol = BUTTON_NONE;
+
+			offsetX += 20.0f;
+
+			CFont::PS2Symbol = BUTTON_R1;
+			CFont::DrawButton(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+			CFont::PS2Symbol = BUTTON_NONE;
+
+			offsetX += 20.0f;
+
+			CFont::SetScale(SCREEN_SCALE_X(textScaleX), SCREEN_SCALE_Y(textScaleY));
+			CFont::PrintString(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(textY), TheText.Get("PM_SPED"));
+
+			offsetX += 70.0f;
+
+			// Take photo
+
+			CFont::PS2Symbol = BUTTON_CROSS;
+			CFont::DrawButton(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+			CFont::PS2Symbol = BUTTON_NONE;
+
+			offsetX += 20.0f;
+
+			CFont::SetScale(SCREEN_SCALE_X(textScaleX), SCREEN_SCALE_Y(textScaleY));
+			CFont::PrintString(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(textY), TheText.Get("PM_PHTO"));
+
+			offsetX += 65.0f;
+
+			// Hide UI
+
+			CFont::PS2Symbol = BUTTON_TRIANGLE;
+			CFont::DrawButton(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+			CFont::PS2Symbol = BUTTON_NONE;
+
+			offsetX += 20.0f;
+
+			CFont::SetScale(SCREEN_SCALE_X(textScaleX), SCREEN_SCALE_Y(textScaleY));
+			CFont::PrintString(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(textY), TheText.Get("PM_UI"));
+		}
+	} else {
+		// PC Keys
+
+		// Toggle menu
+
+		CFont::PCSymbol = VK_TAB - 1;
+		CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+		CFont::PCSymbol = BUTTON_NONE;
+
+		offsetX += 27.5f;
+
+		CFont::SetScale(SCREEN_SCALE_X(textScaleX), SCREEN_SCALE_Y(textScaleY));
+		CFont::PrintString(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(textY), TheText.Get("PM_TOGL"));
+
+		offsetX += 55.0f;
+
+		// Exit photo mode
+
+		CFont::PCSymbol = VK_ESCAPE - 1;
+		CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+		CFont::PCSymbol = BUTTON_NONE;
+
+		offsetX += 20.0f;
+
+		CFont::SetScale(SCREEN_SCALE_X(textScaleX), SCREEN_SCALE_Y(textScaleY));
+		CFont::PrintString(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(textY), TheText.Get("PM_EXIT"));
+
+		offsetX += 50.0f;
+
+		if (bMenuOpen) {
+			// Adjust
+
+			CFont::PCSymbol = 'W' - 1;
+			CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+			CFont::PCSymbol = BUTTON_NONE;
+
+			offsetX += 17.5f;
+
+			CFont::PCSymbol = 'A' - 1;
+			CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+			CFont::PCSymbol = BUTTON_NONE;
+
+			offsetX += 17.5f;
+
+			CFont::PCSymbol = 'S' - 1;
+			CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+			CFont::PCSymbol = BUTTON_NONE;
+
+			offsetX += 17.5f;
+
+			CFont::PCSymbol = 'D' - 1;
+			CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+			CFont::PCSymbol = BUTTON_NONE;
+		
+			offsetX += 20.0f;
+
+			CFont::SetScale(SCREEN_SCALE_X(textScaleX), SCREEN_SCALE_Y(textScaleY));
+			CFont::PrintString(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(textY), TheText.Get("PM_ADJS"));
+
+			offsetX += 75.0f;
+
+			if (currentTab == TAB_LIGHT && (bDefaultLightEnabled || bDarkLightEnabled)) {
+				// Move light
+			
+				CFont::PCSymbol = VK_LBUTTON - 1;
+				CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+				CFont::PCSymbol = BUTTON_NONE;
+
+				offsetX += 19.0f;
+
+				// +
+				wchar sPrint[2];
+				char sTemp[2];
+				sprintf(sTemp, "+");
+				AsciiToUnicode(sTemp, sPrint);
+				CFont::SetScale(SCREEN_SCALE_X(0.45f), SCREEN_SCALE_Y(0.85f));
+				CFont::PrintString(SCREEN_SCALE_X(offsetX - 2.0f), SCREEN_SCALE_FROM_BOTTOM(textY + 2.0f), sPrint);
+
+				offsetX += 9.5f;
+
+				CFont::PCSymbol = SPRITE_MOUSE;
+				CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+				CFont::PCSymbol = BUTTON_NONE;
+
+				offsetX += 15.0f;
+
+				CFont::PCSymbol = VK_RBUTTON - 1;
+				CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+				CFont::PCSymbol = BUTTON_NONE;
+
+				offsetX += 19.0f;
+
+				CFont::SetScale(SCREEN_SCALE_X(textScaleX), SCREEN_SCALE_Y(textScaleY));
+				CFont::PrintString(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(textY), TheText.Get("PM_MVLI"));
+			} else if (currentTab == TAB_CHARACTER) {
+				// Move character
+
+				CFont::PCSymbol = VK_LBUTTON - 1;
+				CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+				CFont::PCSymbol = BUTTON_NONE;
+
+				offsetX += 19.0f;
+
+				// +
+				wchar sPrint[2];
+				char sTemp[2];
+				sprintf(sTemp, "+");
+				AsciiToUnicode(sTemp, sPrint);
+				CFont::SetScale(SCREEN_SCALE_X(0.45f), SCREEN_SCALE_Y(0.85f));
+				CFont::PrintString(SCREEN_SCALE_X(offsetX - 2.0f), SCREEN_SCALE_FROM_BOTTOM(textY + 2.0f), sPrint);
+
+				offsetX += 9.5f;
+
+				CFont::PCSymbol = SPRITE_MOUSE;
+				CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+				CFont::PCSymbol = BUTTON_NONE;
+
+				offsetX += 15.0f;
+
+				CFont::PCSymbol = VK_RBUTTON - 1;
+				CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+				CFont::PCSymbol = BUTTON_NONE;
+
+				offsetX += 19.0f;
+
+				CFont::SetScale(SCREEN_SCALE_X(textScaleX), SCREEN_SCALE_Y(textScaleY));
+				CFont::PrintString(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(textY), TheText.Get("PM_MVCH"));
+			}
+		} else {
+			if (pad->GetRightMouse()) {
+				// Zoom
+
+				CFont::PCSymbol = 'W' - 1;
+				CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+				CFont::PCSymbol = BUTTON_NONE;
+
+				offsetX += 17.5f;
+
+				CFont::PCSymbol = 'A' - 1;
+				CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+				CFont::PCSymbol = BUTTON_NONE;
+
+				offsetX += 20.0f;
+
+				CFont::SetScale(SCREEN_SCALE_X(textScaleX), SCREEN_SCALE_Y(textScaleY));
+				CFont::PrintString(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(textY), TheText.Get("PM_ZOOM"));
+
+				offsetX += 55.0f;
+
+				// Tilt
+
+				CFont::PCSymbol = 'A' - 1;
+				CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+				CFont::PCSymbol = BUTTON_NONE;
+
+				offsetX += 17.5f;
+
+				CFont::PCSymbol = 'D' - 1;
+				CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+				CFont::PCSymbol = BUTTON_NONE;
+
+				offsetX += 20.0f;
+
+				CFont::SetScale(SCREEN_SCALE_X(textScaleX), SCREEN_SCALE_Y(textScaleY));
+				CFont::PrintString(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(textY), TheText.Get("PM_TILT"));
+
+				offsetX += 50.0f;
+			} else {
+				// Move camera
+
+				CFont::PCSymbol = 'W' - 1;
+				CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+				CFont::PCSymbol = BUTTON_NONE;
+
+				offsetX += 17.5f;
+
+				CFont::PCSymbol = 'A' - 1;
+				CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+				CFont::PCSymbol = BUTTON_NONE;
+
+				offsetX += 17.5f;
+
+				CFont::PCSymbol = 'S' - 1;
+				CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+				CFont::PCSymbol = BUTTON_NONE;
+
+				offsetX += 17.5f;
+
+				CFont::PCSymbol = 'D' - 1;
+				CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+				CFont::PCSymbol = BUTTON_NONE;
+
+				offsetX += 17.5f;
+
+				CFont::PCSymbol = 'Q' - 1;
+				CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+				CFont::PCSymbol = BUTTON_NONE;
+
+				offsetX += 17.5f;
+
+				CFont::PCSymbol = 'E' - 1;
+				CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+				CFont::PCSymbol = BUTTON_NONE;
+
+				offsetX += 20.0f;
+
+				CFont::SetScale(SCREEN_SCALE_X(textScaleX), SCREEN_SCALE_Y(textScaleY));
+				CFont::PrintString(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(textY), TheText.Get("PM_MOVE"));
+
+				offsetX += 60.0f;
+			}
+
+			// Rotate camera
+
+			CFont::PCSymbol = VK_LBUTTON - 1;
+			CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+			CFont::PCSymbol = BUTTON_NONE;
+
+			offsetX += 19.0f;
+
+			// +
+			wchar sPrint[2];
+			char sTemp[2];
+			sprintf(sTemp, "+");
+			AsciiToUnicode(sTemp, sPrint);
+			CFont::SetScale(SCREEN_SCALE_X(0.45f), SCREEN_SCALE_Y(0.85f));
+			CFont::PrintString(SCREEN_SCALE_X(offsetX - 2.0f), SCREEN_SCALE_FROM_BOTTOM(textY + 2.0f), sPrint);
+
+			offsetX += 9.5f;
+
+			CFont::PCSymbol = SPRITE_MOUSE;
+			CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+			CFont::PCSymbol = BUTTON_NONE;
+
+			offsetX += 20.0f;
+
+			CFont::SetScale(SCREEN_SCALE_X(textScaleX), SCREEN_SCALE_Y(textScaleY));
+			CFont::PrintString(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(textY), TheText.Get("PM_ROT"));
+
+			offsetX += 70.0f;
+
+			// Zoom and Tilt
+
+			CFont::PCSymbol = VK_RBUTTON - 1;
+			CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+			CFont::PCSymbol = BUTTON_NONE;
+
+			offsetX += 20.0f;
+
+			CFont::SetScale(SCREEN_SCALE_X(textScaleX), SCREEN_SCALE_Y(textScaleY));
+			CFont::PrintString(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(textY), TheText.Get("PM_ZOTI"));
+
+			offsetX += 115.0f;
+
+			// Speed
+
+			CFont::PCSymbol = VK_LSHIFT - 1;
+			CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+			CFont::PCSymbol = BUTTON_NONE;
+
+			offsetX += 26.0f;
+
+			CFont::PCSymbol = VK_LCONTROL - 1;
+			CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+			CFont::PCSymbol = BUTTON_NONE;
+
+			offsetX += 28.0f;
+
+			CFont::SetScale(SCREEN_SCALE_X(textScaleX), SCREEN_SCALE_Y(textScaleY));
+			CFont::PrintString(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(textY), TheText.Get("PM_SPED"));
+
+			offsetX += 70.0f;
+
+			// Take photo
+
+			CFont::PCSymbol = 'T' - 1;
+			CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+			CFont::PCSymbol = BUTTON_NONE;
+
+			offsetX += 20.0f;
+
+			CFont::SetScale(SCREEN_SCALE_X(textScaleX), SCREEN_SCALE_Y(textScaleY));
+			CFont::PrintString(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(textY), TheText.Get("PM_PHTO"));
+
+			offsetX += 65.0f;
+
+			// Hide UI
+
+			CFont::PCSymbol = 'H' - 1;
+			CFont::DrawPCKey(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(buttonY));
+			CFont::PCSymbol = BUTTON_NONE;
+
+			offsetX += 20.0f;
+
+			CFont::SetScale(SCREEN_SCALE_X(textScaleX), SCREEN_SCALE_Y(textScaleY));
+			CFont::PrintString(SCREEN_SCALE_X(offsetX), SCREEN_SCALE_FROM_BOTTOM(textY), TheText.Get("PM_UI"));
+
+			offsetX += 30.0f;
+		}
+	}
+}
+
+void CPhotoMode::ProcessCamera()
+{
+	CPad* pad = CPad::GetPad(0);
+
+	if (!bMenuOpen && (pad->GetRightMouse() || pad->IsAffectedByController)) {
+		if (KEYDOWN('W') || pad->IsAffectedByController && pad->GetDPadUp()) {
+			if (pad->GetLeftShift() || pad->IsAffectedByController && pad->GetLeftShoulder1())
+				cameraFOV -= 2.0f * CTimer::GetTimeStepFix();
+			else if (pad->GetLeftCtrl() || pad->IsAffectedByController && pad->GetRightShoulder1())
+				cameraFOV -= 0.25f * CTimer::GetTimeStepFix();
+			else
+				cameraFOV -= 1.0f * CTimer::GetTimeStepFix();
+
+			if (cameraFOV <= 10.0f)
+				cameraFOV = 10.0f;
+		} else if (KEYDOWN('S') || pad->IsAffectedByController && pad->GetDPadDown()) {
+			if (pad->GetLeftShift() || pad->IsAffectedByController && pad->GetLeftShoulder1())
+				cameraFOV += 2.0f * CTimer::GetTimeStepFix();
+			else if (pad->GetLeftCtrl() || pad->IsAffectedByController && pad->GetRightShoulder1())
+				cameraFOV += 0.25f * CTimer::GetTimeStepFix();
+			else
+				cameraFOV += 1.0f * CTimer::GetTimeStepFix();
+
+			if (cameraFOV >= 120.0f)
+				cameraFOV = 120.0f;
+		}
+
+		if (KEYDOWN('A') || pad->IsAffectedByController && pad->GetDPadLeft()) {
+			if (pad->GetLeftShift() || pad->IsAffectedByController && pad->GetLeftShoulder1())
+				cameraTilt -= 0.04f * CTimer::GetTimeStepFix();
+			else if (pad->GetLeftCtrl() || pad->IsAffectedByController && pad->GetRightShoulder1())
+				cameraTilt -= 0.005f * CTimer::GetTimeStepFix();
+			else
+				cameraTilt -= 0.02f * CTimer::GetTimeStepFix();
+
+			if (cameraTilt <= -2.0f)
+				cameraTilt = -2.0f;
+		} else if (KEYDOWN('D') || pad->IsAffectedByController && pad->GetDPadRight()) {
+			if (pad->GetLeftShift() || pad->IsAffectedByController && pad->GetLeftShoulder1())
+				cameraTilt += 0.04f * CTimer::GetTimeStepFix();
+			else if (pad->GetLeftCtrl() || pad->IsAffectedByController && pad->GetRightShoulder1())
+				cameraTilt += 0.005f * CTimer::GetTimeStepFix();
+			else
+				cameraTilt += 0.02f * CTimer::GetTimeStepFix();
+
+			if (cameraTilt >= 2.0f)
+				cameraTilt = 2.0f;
+		}
+	}
+
+	RwCameraSetNearClipPlane(TheCamera.m_pRwCamera, cameraNearClip);
+	CDraw::SetNearClipZ(cameraNearClip);
+	
+	CDraw::SetFOV(cameraFOV);
+
+	float curSenseX;
+	float curSenseY;
+
+	if (pad->IsAffectedByController) {
+		curSenseX = FrontEndMenuManager.m_PrefsPadLookSensX;
+		curSenseY = FrontEndMenuManager.m_PrefsPadLookSensY;
+	} else {
+		curSenseX = FrontEndMenuManager.m_PrefsMouseLookSensX / 2;
+		curSenseY = FrontEndMenuManager.m_PrefsMouseLookSensY / 2;
+	}
+
+	if (FrontEndMenuManager.m_PrefsInvertVertically)
+		curSenseY = -curSenseY;
+
+	TheCamera.m_fMouseAccelHorzntl = curSenseX;
+	TheCamera.m_fMouseAccelVertical = curSenseY;
+
+	float MouseX = pad->GetMouseX();
+	float MouseY = pad->GetMouseY();
+	float LookLeftRight = 0.0f;
+	float LookUpDown = 0.0f;
+	if (!bMenuOpen && (pad->GetLeftMouse() || pad->IsAffectedByController)) {
+		if (pad->IsAffectedByController) {
+			LookLeftRight = pad->LookAroundLeftRight();
+			LookUpDown = pad->LookAroundUpDown();
+		} else {
+			LookLeftRight = 2.5f * MouseX;
+			LookUpDown = 4.0f * MouseY;
+		}
+	}
+	float AlphaOffset, BetaOffset;
+	BetaOffset = LookLeftRight * TheCamera.m_fMouseAccelHorzntl * 70.0f / 80.0f;
+	AlphaOffset = LookUpDown * TheCamera.m_fMouseAccelVertical * 70.0f / 80.0f;
+
+	alphaAngleCamera += AlphaOffset;
+	betaAngleCamera += BetaOffset;
+
+	if (alphaAngleCamera > DEGTORAD(89.5f)) alphaAngleCamera = DEGTORAD(89.5f);
+	else if (alphaAngleCamera < DEGTORAD(-89.5f)) alphaAngleCamera = DEGTORAD(-89.5f);
+
+	CVector TargetCoors;
+
+	TargetCoors.x = cameraPos.x + Cos(alphaAngleCamera) * Sin(betaAngleCamera) * 7.0f;
+	TargetCoors.y = cameraPos.y + Cos(alphaAngleCamera) * Cos(betaAngleCamera) * 7.0f;
+	TargetCoors.z = cameraPos.z + Sin(alphaAngleCamera) * 3.0f;
+
+	static float Speed = 0.0f;
+	static float PanSpeedX = 0.0f;
+	static float PanSpeedY = 0.0f;
+
+	if (bMenuOpen) {
+		Speed = 0.0f;
+		PanSpeedX = 0.0f;
+		PanSpeedY = 0.0f;
+	} else {
+		if (pad->IsAffectedByController) {
+			float SpeedMultiplier = 0.0015f;
+			if (pad->GetLeftShoulder1())
+				SpeedMultiplier = 0.0075f;
+			else if (pad->GetRightShoulder1())
+				SpeedMultiplier = 0.00045f;
+
+			Speed = -pad->GetLeftStickY() * SpeedMultiplier * CTimer::GetTimeStepFix();
+
+			PanSpeedX = -pad->GetLeftStickX() * SpeedMultiplier * CTimer::GetTimeStepFix();
+
+			PanSpeedY = -pad->NewState.LeftShoulder2 / 255.0f * 0.25f + pad->NewState.RightShoulder2 / 255.0f * 0.25f;
+		} else {
+			float SpeedMultiplier = 0.02f;
+			if (pad->GetLeftShift())
+				SpeedMultiplier = 0.04f;
+			else if (pad->GetLeftCtrl())
+				SpeedMultiplier = 0.005f;
+
+			if (KEYDOWN('W') && !pad->GetRightMouse())
+				Speed += 1.0f * SpeedMultiplier * CTimer::GetTimeStepFix();
+			else if (KEYDOWN('S') && !pad->GetRightMouse())
+				Speed += -1.0f * SpeedMultiplier * CTimer::GetTimeStepFix();
+			else
+				Speed = 0.0f;
+
+			if (KEYDOWN('A') && !pad->GetRightMouse())
+				PanSpeedX += 1.0f * SpeedMultiplier * CTimer::GetTimeStepFix();
+			else if (KEYDOWN('D') && !pad->GetRightMouse())
+				PanSpeedX += -1.0f * SpeedMultiplier * CTimer::GetTimeStepFix();
+			else
+				PanSpeedX = 0.0f;
+
+			if (KEYDOWN('Q') && !pad->GetRightMouse())
+				PanSpeedY += -1.0f * SpeedMultiplier * CTimer::GetTimeStepFix();
+			else if (KEYDOWN('E') && !pad->GetRightMouse())
+				PanSpeedY += 1.0f * SpeedMultiplier * CTimer::GetTimeStepFix();
+			else
+				PanSpeedY = 0.0f;
+		}
+	}
+
+	CVector forward = TargetCoors - cameraPos;
+	forward.Normalise();
+	CVector right = CrossProduct(CVector(forward.y * cameraTilt, -forward.x * cameraTilt, 1.0f), forward);
+	right.Normalise();
+	CVector up = CrossProduct(forward, right);
+	up.Normalise();
+
+	CVector source = cameraPos + forward * Speed + up * PanSpeedY + right * PanSpeedX;
+
+	cameraPos = source;
+
+	TheCamera.GetForward() = forward;
+	TheCamera.GetUp() = up;
+	TheCamera.GetRight() = right;
+	TheCamera.SetPosition(source);
+
+	RwMatrix* pm = RwFrameGetMatrix(RwCameraGetFrame(TheCamera.m_pRwCamera));
+	pm->pos = TheCamera.GetPosition();
+	pm->at = TheCamera.GetForward();
+	pm->up = TheCamera.GetUp();
+	pm->right = TheCamera.GetRight();
+
+	TheCamera.CalculateDerivedValues();
+	RwMatrixUpdate(RwFrameGetMatrix(RwCameraGetFrame(TheCamera.m_pRwCamera)));
+	RwFrameUpdateObjects(RwCameraGetFrame(TheCamera.m_pRwCamera));
+}
+
+void CPhotoMode::ProcessInput()
+{
+	CPad* pad = CPad::GetPad(0);
+
+	if (!bMenuOpen && !bPlayerWantsToTakePhoto && (KEYJUSTDOWN('T') || pad->IsAffectedByController && pad->GetCrossJustDown()))
+		bPlayerWantsToTakePhoto = true;
+
+	if (!bMenuOpen && (KEYJUSTDOWN('H') || pad->IsAffectedByController && pad->GetTriangleJustDown()))
+		bHideUI = !bHideUI;
+
+	if (pad->GetTabJustDown() || pad->IsAffectedByController && pad->GetSquareJustDown())
+		bMenuOpen = !bMenuOpen;
+
+	if (!bMenuOpen)
+		return;
+
+	if (KEYJUSTDOWN('Q') || pad->IsAffectedByController && pad->GetLeftShoulder1JustDown()) {
+		if (currentTab == TAB_EFFECTS) {
+			currentTab = TAB_LIGHT;
+			maxItems = NUM_LIGHT_ITEMS;
+			currentItem = ITEM_LIGHT_DEFAULT_LIGHT;
+		} else if (currentTab == TAB_LIGHT) {
+			currentTab = TAB_SKY;
+			maxItems = NUM_SKY_ITEMS;
+			currentItem = ITEM_SKY_SUN_MOON;
+		} else if (currentTab == TAB_SKY) {
+			if (FindPlayerPed()->InVehicle()) {
+				currentTab = TAB_CAMERA;
+				maxItems = NUM_CAMERA_ITEMS;
+				currentItem = ITEM_CAMERA_FOV;
+			} else {
+				currentTab = TAB_CHARACTER;
+				maxItems = NUM_CHAR_ITEMS;
+				currentItem = ITEM_CHAR_VISIBILITY;
+			}
+		} else if (currentTab == TAB_CHARACTER) {
+			currentTab = TAB_CAMERA;
+			maxItems = NUM_CAMERA_ITEMS;
+			currentItem = ITEM_CAMERA_FOV;
+		} else if (currentTab == TAB_CAMERA) {
+			currentTab = TAB_EFFECTS;
+			maxItems = NUM_EFFECT_ITEMS;
+			currentItem = ITEM_EFFECT_COLORFILTER;
+		}
+	} else if (KEYJUSTDOWN('E') || pad->IsAffectedByController && pad->GetRightShoulder1JustDown()) {
+		if (currentTab == TAB_CAMERA) {
+			if (FindPlayerPed()->InVehicle()) {
+				currentTab = TAB_SKY;
+				maxItems = NUM_SKY_ITEMS;
+				currentItem = ITEM_SKY_SUN_MOON;
+			} else {
+				currentTab = TAB_CHARACTER;
+				maxItems = NUM_CHAR_ITEMS;
+				currentItem = ITEM_CHAR_VISIBILITY;
+			}
+		} else if (currentTab == TAB_CHARACTER) {
+			currentTab = TAB_SKY;
+			maxItems = NUM_SKY_ITEMS;
+			currentItem = ITEM_SKY_SUN_MOON;
+		} else if (currentTab == TAB_SKY) {
+			currentTab = TAB_LIGHT;
+			maxItems = NUM_LIGHT_ITEMS;
+			currentItem = ITEM_LIGHT_DEFAULT_LIGHT;
+		} else if (currentTab == TAB_LIGHT) {
+			currentTab = TAB_EFFECTS;
+			maxItems = NUM_EFFECT_ITEMS;
+			currentItem = ITEM_EFFECT_COLORFILTER;
+		} else if (currentTab == TAB_EFFECTS) {
+			currentTab = TAB_CAMERA;
+			maxItems = NUM_CAMERA_ITEMS;
+			currentItem = ITEM_CAMERA_FOV;
+		}
+	}
+
+	if (KEYJUSTDOWN('W') || pad->IsAffectedByController && pad->GetDPadUpJustDown()) {
+		if (currentItem == 0)
+			currentItem = maxItems - 1;
+		else
+			currentItem--;
+	} else if (KEYJUSTDOWN('S') || pad->IsAffectedByController && pad->GetDPadDownJustDown()) {
+		if (currentItem >= (maxItems - 1))
+			currentItem = 0;
+		else
+			currentItem++;
+	}
+
+	if (KEYDOWN('A') || pad->IsAffectedByController && pad->GetDPadLeft()) {
+		if (currentTab == TAB_CAMERA) {
+			if (currentItem == ITEM_CAMERA_FOV) {
+				cameraFOV--;
+
+				if (cameraFOV <= 10)
+					cameraFOV = 10;
+			} else if (currentItem == ITEM_CAMERA_TILT) {
+				cameraTilt -= 0.02f;;
+
+				if (cameraTilt <= -2.0f)
+					cameraTilt = -2.0f;
+			}
+		} else if (currentTab == TAB_CHARACTER) {
+			if (currentItem == ITEM_CHAR_ANIMATION_FRAME) {
+				if (fakePlayer) {
+					CAnimBlendAssociation* currentAnim = RpAnimBlendClumpGetFirstAssociation(fakePlayer->GetClump());
+					if (currentAnim) {
+						animFrame -= 0.01f;
+
+						if (animFrame < 0.0f)
+							animFrame = 0.0f;
+
+						currentAnim->SetCurrentTime(animFrame);
+						RpAnimBlendClumpUpdateAnimations(fakePlayer->GetClump(), CTimer::GetTimeStepInSeconds());
+					}
+				}
+			} else if (currentItem == ITEM_CHAR_ROTATE) {
+				rotateAngle -= 0.05f;
+
+				if (rotateAngle <= -PI)
+					rotateAngle = PI;
+
+				FindPlayerPed()->SetHeading(rotateAngle);
+				ChangePlayerPosition();
+				FindPlayerPed()->GetMatrix().UpdateRW();
+				FindPlayerPed()->UpdateRwFrame();
+
+				if (fakePlayer) {
+					fakePlayer->SetHeading(rotateAngle);
+					ChangePlayerPosition();
+					fakePlayer->GetMatrix().UpdateRW();
+					fakePlayer->UpdateRwFrame();
+				}
+			}
+		} else if (currentTab == TAB_SKY) {
+			if (currentItem == ITEM_SKY_SUN_MOON) {
+				bHasSunAngleBeenChanged = true;
+
+				sunAndMoonAngle += 0.02f;
+
+				if (sunAndMoonAngle > PI * 2)
+					sunAndMoonAngle -= PI * 2;
+			}
+		}
+	} else if (KEYDOWN('D') || pad->IsAffectedByController && pad->GetDPadRight()) {
+		if (currentTab == TAB_CAMERA) {
+			if (currentItem == ITEM_CAMERA_FOV) {
+				cameraFOV++;
+
+				if (cameraFOV >= 120)
+					cameraFOV = 120;
+			} else if (currentItem == ITEM_CAMERA_TILT) {
+				cameraTilt += 0.02f;
+
+				if (cameraTilt >= 2.0f)
+					cameraTilt = 2.0f;
+			}
+		} else if (currentTab == TAB_CHARACTER) {
+			if (currentItem == ITEM_CHAR_ANIMATION_FRAME) {
+				if (fakePlayer) {
+					CAnimBlendAssociation* currentAnim = RpAnimBlendClumpGetFirstAssociation(fakePlayer->GetClump());
+					if (currentAnim) {
+						animFrame += 0.01f;
+
+						if (animFrame > currentAnim->hierarchy->totalLength - 0.05f)
+							animFrame = currentAnim->hierarchy->totalLength - 0.05f;
+
+						currentAnim->SetCurrentTime(animFrame);
+						RpAnimBlendClumpUpdateAnimations(fakePlayer->GetClump(), CTimer::GetTimeStepInSeconds());
+					}
+				}
+			} else if (currentItem == ITEM_CHAR_ROTATE) {
+				rotateAngle += 0.05f;
+
+				if (rotateAngle >= PI)
+					rotateAngle = -PI;
+
+				FindPlayerPed()->SetHeading(rotateAngle);
+				ChangePlayerPosition();
+				FindPlayerPed()->GetMatrix().UpdateRW();
+				FindPlayerPed()->UpdateRwFrame();
+
+				if (fakePlayer) {
+					fakePlayer->SetHeading(rotateAngle);
+					ChangePlayerPosition();
+					fakePlayer->GetMatrix().UpdateRW();
+					fakePlayer->UpdateRwFrame();
+				}
+			}
+		} else if (currentTab == TAB_SKY) {
+			if (currentItem == ITEM_SKY_SUN_MOON) {
+				bHasSunAngleBeenChanged = true;
+
+				sunAndMoonAngle -= 0.02f;
+
+				if (sunAndMoonAngle < 0.0f)
+					sunAndMoonAngle += PI * 2;
+			}
+		}
+	}
+
+	if (KEYJUSTDOWN('A') || pad->IsAffectedByController && pad->GetDPadLeftJustDown()) {
+		if (currentTab == TAB_CAMERA) {
+			if (currentItem == ITEM_CAMERA_NEAR_CLIP) {
+				cameraNearClip -= 0.1f;
+
+				if (cameraNearClip <= 0.1f)
+					cameraNearClip = 0.1f;
+			}
+		} else if (currentTab == TAB_CHARACTER) {
+			if (currentItem == ITEM_CHAR_VISIBILITY) {
+				bCharacterVisibility = !bCharacterVisibility;
+				
+				if (fakePlayer) {
+					FindPlayerPed()->bIsVisible = false;
+					fakePlayer->bIsVisible = bCharacterVisibility;
+				} else {
+					FindPlayerPed()->bIsVisible = bCharacterVisibility;
+				}
+			} else if (currentItem == ITEM_CHAR_CLOTHES) {
+				int maxClothes = sizeof(clothesList) / 4 - 1;
+				if (clothesID <= -1)
+					clothesID = maxClothes;
+				else
+					clothesID--;
+
+				if (clothesID == -1 && animID == -1) {
+					RemoveMuzzleParticles();
+					bMuzzleFlash = false;
+					FindPlayerPed()->bIsVisible = bCharacterVisibility;
+					animFrame = 0.0f;
+
+					DeleteFakePlayer();
+				} else {
+					FindPlayerPed()->bIsVisible = false;
+
+					InitFakePlayer();
+				}
+
+				UpdateMuzzleParticles();
+			} else if (currentItem == ITEM_CHAR_ANIMATION) {
+				int maxAnimations = sizeof(animList) / 8 - 1;
+				if (animID <= -1)
+					animID = maxAnimations;
+				else
+					animID--;
+
+				if (animID == -1 && clothesID == -1) {
+					RemoveMuzzleParticles();
+					bMuzzleFlash = false;
+					FindPlayerPed()->bIsVisible = bCharacterVisibility;
+					animFrame = 0.0f;
+
+					DeleteFakePlayer();
+				} else {
+					FindPlayerPed()->bIsVisible = false;
+
+					InitFakePlayer();
+				}
+
+				UpdateMuzzleParticles();
+			} else if (currentItem == ITEM_CHAR_WEAPON) {
+				RemovePlayerWeapon();
+
+				if (weaponID == WEAPONTYPE_TEARGAS)
+					weaponID = WEAPONTYPE_GRENADE; // skip WEAPONTYPE_DETONATOR_GRENADE
+				else if (weaponID == WEAPONTYPE_COLT45)
+					weaponID = WEAPONTYPE_MOLOTOV; // skip WEAPONTYPE_ROCKET
+				else if (weaponID == (WEAPONTYPE_TOTALWEAPONS - 1))
+					weaponID = WEAPONTYPE_TOTALWEAPONS - 2; // skip WEAPONTYPE_HELICANNON
+				else if (weaponID == WEAPONTYPE_UNARMED)
+					weaponID = WEAPONTYPE_TOTALWEAPONS - 1;
+				else
+					weaponID--;
+
+				for (int i = 0; i < MAX_MUZZLE_PARTICLES; i++) {
+					if (muzzleFlashParticles[i] && (weaponID <= WEAPONTYPE_MOLOTOV || weaponID >= WEAPONTYPE_ROCKETLAUNCHER)) {
+						muzzleFlashParticles[i]->m_nTimeWhenWillBeDestroyed = 0;
+						muzzleFlashParticles[i]->m_nAlpha = 0;
+						bMuzzleFlash = false;
+					}
+				}
+
+				AddPlayerWeapon();
+			} else if (currentItem == ITEM_CHAR_MUZZLE_FLASH) {
+				if (fakePlayer) {
+					bMuzzleFlash = !bMuzzleFlash;
+				} else {
+					bMuzzleFlash = false;
+				}
+
+				if (bMuzzleFlash) {
+					CreateMuzzleFlash();
+				} else {
+					RemoveMuzzleParticles();
+				}
+			}
+		} else if (currentTab == TAB_SKY) {
+			if (currentItem == ITEM_SKY_HOURS) {
+				if (CClock::GetHours() == 0)
+					CClock::SetGameClock(23, CClock::GetMinutes());
+				else
+					CClock::SetGameClock(CClock::GetHours() - 1, CClock::GetMinutes());
+			} else if (currentItem == ITEM_SKY_MINUTES) {
+				if (CClock::GetMinutes() == 0)
+					CClock::SetGameClock(CClock::GetHours(), 59);
+				else
+					CClock::SetGameClock(CClock::GetHours(), CClock::GetMinutes() - 1);
+			} else if (currentItem == ITEM_SKY_WEATHER) {
+				if (weatherID == 0)
+					weatherID = WEATHER_HURRICANE;
+				else
+					weatherID--;
+
+				CWeather::ForceWeatherNow(weatherID);
+				CWeather::Update();
+			}
+		} else if (currentTab == TAB_LIGHT) {
+			if (currentItem == ITEM_LIGHT_DEFAULT_LIGHT) {
+				bDefaultLightEnabled = !bDefaultLightEnabled;
+			} else if (currentItem == ITEM_LIGHT_COLOR_RED) {
+				lightColorRed -= 0.1f;
+
+				if (lightColorRed <= 0.0f)
+					lightColorRed = 0.0f;
+			} else if (currentItem == ITEM_LIGHT_COLOR_GREEN) {
+				lightColorGreen -= 0.1f;
+
+				if (lightColorGreen <= 0.0f)
+					lightColorGreen = 0.0f;
+			} else if (currentItem == ITEM_LIGHT_COLOR_BLUE) {
+				lightColorBlue -= 0.1f;
+
+				if (lightColorBlue <= 0.0f)
+					lightColorBlue = 0.0f;
+			} else if (currentItem == ITEM_LIGHT_DARK_LIGHT) {
+				bDarkLightEnabled = !bDarkLightEnabled;
+			}
+		} else if (currentTab == TAB_EFFECTS) {
+			if (currentItem == ITEM_EFFECT_COLORFILTER) {
+				if (CPostFX::EffectSwitch == CPostFX::POSTFX_OFF)
+					CPostFX::EffectSwitch = CPostFX::POSTFX_MOBILE;
+				else
+					CPostFX::EffectSwitch--;
+			} else if (currentItem == ITEM_EFFECT_INTENSITY) {
+				CPostFX::Intensity -= 0.1f;
+
+				if (CPostFX::Intensity < 0.0f)
+					CPostFX::Intensity = 6.0f;
+			} else if (currentItem == ITEM_EFFECT_BRIGHTNESS) {
+				FrontEndMenuManager.m_PrefsBrightness -= (511.0f * 0.1f);
+
+				if (FrontEndMenuManager.m_PrefsBrightness < 0)
+					FrontEndMenuManager.m_PrefsBrightness = 0;
+			} else if (currentItem == ITEM_EFFECT_FRAMES) {
+				if (frameEffectID == FRAME_EFFECT_NONE)
+					frameEffectID = FRAME_EFFECT_ON_ALL_SIDES;
+				else
+					frameEffectID--;
+			}
+		}
+	} else if (KEYJUSTDOWN('D') || pad->IsAffectedByController && pad->GetDPadRightJustDown()) {
+		if (currentTab == TAB_CAMERA) {
+			if (currentItem == ITEM_CAMERA_NEAR_CLIP) {
+				cameraNearClip += 0.1f;
+
+				if (cameraNearClip >= DEFAULT_NEAR)
+					cameraNearClip = DEFAULT_NEAR;
+			}
+		} else if (currentTab == TAB_CHARACTER) {
+			if (currentItem == ITEM_CHAR_VISIBILITY) {
+				bCharacterVisibility = !bCharacterVisibility;
+				
+				if (fakePlayer) {
+					FindPlayerPed()->bIsVisible = false;
+					fakePlayer->bIsVisible = bCharacterVisibility;
+				} else {
+					FindPlayerPed()->bIsVisible = bCharacterVisibility;
+				}
+			} else if (currentItem == ITEM_CHAR_CLOTHES) {
+				int maxClothes = sizeof(clothesList) / 4 - 1;
+				if (clothesID >= maxClothes)
+					clothesID = -1;
+				else
+					clothesID++;
+
+				if (clothesID == -1 && animID == -1) {
+					RemoveMuzzleParticles();
+					bMuzzleFlash = false;
+					FindPlayerPed()->bIsVisible = bCharacterVisibility;
+					animFrame = 0.0f;
+
+					DeleteFakePlayer();
+				} else {
+					FindPlayerPed()->bIsVisible = false;
+
+					InitFakePlayer();
+				}
+
+				UpdateMuzzleParticles();
+			} else if (currentItem == ITEM_CHAR_ANIMATION) {
+				int maxAnimations = sizeof(animList) / 8 - 1;
+				if (animID >= maxAnimations)
+					animID = -1;
+				else
+					animID++;
+
+				if (animID == -1 && clothesID == -1) {
+					RemoveMuzzleParticles();
+					bMuzzleFlash = false;
+					FindPlayerPed()->bIsVisible = bCharacterVisibility;
+					animFrame = 0.0f;
+
+					DeleteFakePlayer();
+				} else {
+					FindPlayerPed()->bIsVisible = false;
+
+					InitFakePlayer();
+				}
+
+				UpdateMuzzleParticles();
+			} else if (currentItem == ITEM_CHAR_WEAPON) {
+				RemovePlayerWeapon();
+
+				if (weaponID == WEAPONTYPE_GRENADE)
+					weaponID = WEAPONTYPE_TEARGAS; // skip WEAPONTYPE_DETONATOR_GRENADE
+				else if (weaponID == WEAPONTYPE_MOLOTOV)
+					weaponID = WEAPONTYPE_COLT45; // skip WEAPONTYPE_ROCKET
+				else if (weaponID == WEAPONTYPE_TOTALWEAPONS - 2)
+					weaponID = WEAPONTYPE_TOTALWEAPONS - 1; // skip WEAPONTYPE_HELICANNON
+				else if (weaponID >= (WEAPONTYPE_TOTALWEAPONS - 1))
+					weaponID = WEAPONTYPE_UNARMED;
+				else
+					weaponID++;
+
+				for (int i = 0; i < MAX_MUZZLE_PARTICLES; i++) {
+					if (muzzleFlashParticles[i] && (weaponID <= WEAPONTYPE_MOLOTOV || weaponID >= WEAPONTYPE_ROCKETLAUNCHER)) {
+						muzzleFlashParticles[i]->m_nTimeWhenWillBeDestroyed = 0;
+						muzzleFlashParticles[i]->m_nAlpha = 0;
+						bMuzzleFlash = false;
+					}
+				}
+
+				AddPlayerWeapon();
+			} else if (currentItem == ITEM_CHAR_MUZZLE_FLASH) {
+				if (fakePlayer) {
+					bMuzzleFlash = !bMuzzleFlash;
+				} else {
+					bMuzzleFlash = false;
+				}
+
+				if (bMuzzleFlash) {
+					CreateMuzzleFlash();
+				} else {
+					RemoveMuzzleParticles();
+				}
+			}
+		} else if (currentTab == TAB_SKY) {
+			if (currentItem == ITEM_SKY_HOURS) {
+				if (CClock::GetHours() >= 23)
+					CClock::SetGameClock(0, CClock::GetMinutes());
+				else
+					CClock::SetGameClock(CClock::GetHours() + 1, CClock::GetMinutes());
+			} else if (currentItem == ITEM_SKY_MINUTES) {
+				if (CClock::GetMinutes() >= 59)
+					CClock::SetGameClock(CClock::GetHours(), 0);
+				else
+					CClock::SetGameClock(CClock::GetHours(), CClock::GetMinutes() + 1);
+			} else if (currentItem == ITEM_SKY_WEATHER) {
+				if (weatherID >= WEATHER_HURRICANE)
+					weatherID = WEATHER_SUNNY;
+				else
+					weatherID++;
+
+				CWeather::ForceWeatherNow(weatherID);
+				CWeather::Update();
+			}
+		} else if (currentTab == TAB_LIGHT) {
+			if (currentItem == ITEM_LIGHT_DEFAULT_LIGHT) {
+				bDefaultLightEnabled = !bDefaultLightEnabled;
+			} else if (currentItem == ITEM_LIGHT_COLOR_RED) {
+				lightColorRed += 0.1f;
+
+				if (lightColorRed >= 1.0f)
+					lightColorRed = 1.0f;
+			} else if (currentItem == ITEM_LIGHT_COLOR_GREEN) {
+				lightColorGreen += 0.1f;
+
+				if (lightColorGreen >= 1.0f)
+					lightColorGreen = 1.0f;
+			} else if (currentItem == ITEM_LIGHT_COLOR_BLUE) {
+				lightColorBlue += 0.1f;
+
+				if (lightColorBlue >= 1.0f)
+					lightColorBlue = 1.0f;
+			} else if (currentItem == ITEM_LIGHT_DARK_LIGHT) {
+				bDarkLightEnabled = !bDarkLightEnabled;
+			}
+		} else if (currentTab == TAB_EFFECTS) {
+			if (currentItem == ITEM_EFFECT_COLORFILTER) {
+				if (CPostFX::EffectSwitch == CPostFX::POSTFX_MOBILE)
+					CPostFX::EffectSwitch = CPostFX::POSTFX_OFF;
+				else
+					CPostFX::EffectSwitch++;
+			} else if (currentItem == ITEM_EFFECT_INTENSITY) {
+				CPostFX::Intensity += 0.1f;
+
+				if (CPostFX::Intensity > 6.0f)
+					CPostFX::Intensity = 0.0f;
+			} else if (currentItem == ITEM_EFFECT_BRIGHTNESS) {
+				FrontEndMenuManager.m_PrefsBrightness += (511.0f * 0.1f);
+
+				if (FrontEndMenuManager.m_PrefsBrightness > 511)
+					FrontEndMenuManager.m_PrefsBrightness = 511;
+			} else if (currentItem == ITEM_EFFECT_FRAMES) {
+				if (frameEffectID == FRAME_EFFECT_ON_ALL_SIDES)
+					frameEffectID = FRAME_EFFECT_NONE;
+				else
+					frameEffectID++;
+			}
+		}
+	}
+}
+
+void CPhotoMode::TakePhoto()
+{
+	if (!bPlayerWantsToTakePhoto)
+		return;
+
+	TakeAndSaveScreenshot();
+
+	photoSavedTime = 225.0f;
+
+	bPlayerWantsToTakePhoto = false;
+}
+
+void CPhotoMode::UpdateMuzzleParticles()
+{
+	if (!bMuzzleFlash)
+		return;
+
+	if (weaponID == WEAPONTYPE_UNARMED || !fakePlayer)
+		return;
+
+	CWeaponInfo* weaponInfo = CWeaponInfo::GetWeaponInfo((eWeaponType)weaponID);
+	CVector firePos = weaponInfo->m_vecFireOffset;
+	fakePlayer->TransformToNode(firePos, PED_HANDR);
+
+	CPointLights::AddLight(CPointLights::LIGHT_POINT,
+						   firePos, CVector(0.0f, 0.0f, 0.0f), 5.0f,
+						   1.0f, 0.8f, 0.0f, CPointLights::FOG_NONE, false);
+
+	for (int i = 0; i < MAX_MUZZLE_PARTICLES; i++) {
+		if (!muzzleFlashParticles[i] || muzzleFlashParticles[i] && muzzleFlashParticles[i]->m_nTimeWhenWillBeDestroyed <= 0)
+			return;
+		
+		muzzleFlashParticles[i]->m_vecPosition = firePos;
+	}
+}
+
+void CPhotoMode::ProcessPlayerPosition()
+{
+	if (!bMenuOpen || currentTab != TAB_CHARACTER)
+		return;
+
+	CPad* pad = CPad::GetPad(0);
+	if (pad->GetLeftMouse() || pad->IsAffectedByController && pad->GetCross()) {
+		if (pad->IsAffectedByController) {
+			float stickX = pad->NewState.LeftStickX;
+			if (Abs(stickX) <= FrontEndMenuManager.m_PrefsLeftStickDeadzone)
+				stickX = 0;
+			else
+				stickX /= 128.0f * 5.0f;
+
+			float stickY = pad->NewState.LeftStickY;
+			if (Abs(stickY) <= FrontEndMenuManager.m_PrefsLeftStickDeadzone)
+				stickY = 0;
+			else
+				stickY /= 128.0f * 5.0f;
+
+			CVector oldPlayerPos = playerPos;
+
+			playerPos.z += -pad->NewState.LeftShoulder2 / 255.0f * 0.25f + pad->NewState.RightShoulder2 / 255.0f * 0.25f;
+			playerPos.x += TheCamera.GetRight().x * -stickX + TheCamera.GetForward().x * -stickY;
+			playerPos.y += TheCamera.GetRight().y * -stickX + TheCamera.GetForward().y * -stickY;
+
+			lightPos += playerPos - oldPlayerPos;
+		} else {
+			CVector oldPlayerPos = playerPos;
+
+			float mouseX = -(float)pad->GetMouseX() / 50.0f;
+			float mouseY = (float)pad->GetMouseY() / 50.0f;
+			if (pad->GetRightMouse()) {
+				playerPos.z += mouseY;
+			} else {
+				playerPos.x += TheCamera.GetRight().x * mouseX + TheCamera.GetForward().x * mouseY;
+				playerPos.y += TheCamera.GetRight().y * mouseX + TheCamera.GetForward().y * mouseY;
+			}
+
+			lightPos += playerPos - oldPlayerPos;
+		}
+
+		ChangePlayerPosition();
+	}
+}
+
+void CPhotoMode::ProcessLights()
+{
+	if (!bDefaultLightEnabled && !bDarkLightEnabled)
+		return;
+
+	// Input
+	CPad* pad = CPad::GetPad(0);
+	if (bMenuOpen && currentTab == TAB_LIGHT && (pad->GetLeftMouse() || pad->IsAffectedByController && pad->GetCross())) {
+		if (pad->IsAffectedByController) {
+			float stickX = pad->NewState.LeftStickX;
+			if (Abs(stickX) <= FrontEndMenuManager.m_PrefsLeftStickDeadzone)
+				stickX = 0;
+			else
+				stickX /= 128.0f * 5.0f;
+
+			float stickY = pad->NewState.LeftStickY;
+			if (Abs(stickY) <= FrontEndMenuManager.m_PrefsLeftStickDeadzone)
+				stickY = 0;
+			else
+				stickY /= 128.0f * 5.0f;
+
+			lightPos.z += -pad->NewState.LeftShoulder2 / 255.0f * 0.25f + pad->NewState.RightShoulder2 / 255.0f * 0.25f;
+			lightPos.x += TheCamera.GetRight().x * -stickX + TheCamera.GetForward().x * -stickY;
+			lightPos.y += TheCamera.GetRight().y * -stickX + TheCamera.GetForward().y * -stickY;
+		} else {
+			float mouseX = -(float)pad->GetMouseX() / 50.0f;
+			float mouseY = (float)pad->GetMouseY() / 50.0f;
+			if (pad->GetRightMouse()) {
+				lightPos.z += mouseY;
+			} else {
+				lightPos.x += TheCamera.GetRight().x * mouseX + TheCamera.GetForward().x * mouseY;
+				lightPos.y += TheCamera.GetRight().y * mouseX + TheCamera.GetForward().y * mouseY;
+			}
+		}
+	}
+
+	// Render lights
+	if (bDefaultLightEnabled) {
+		CPointLights::AddLight(CPointLights::LIGHT_POINT,
+							   lightPos, CVector(0.0f, 0.0f, 0.0f), 10.0f,
+							   lightColorRed, lightColorGreen, lightColorBlue, CPointLights::FOG_NONE, false);
+	}
+	if (bDarkLightEnabled) {
+		CPointLights::AddLight(CPointLights::LIGHT_DARKEN,
+							   lightPos, CVector(0.0f, 0.0f, 0.0f), 10.0f,
+							   1.0f, 1.0f, 1.0f, CPointLights::FOG_NONE, false);
+	}
+}
+
+void CPhotoMode::DrawLightSprite()
+{
+	if (!bDefaultLightEnabled && !bDarkLightEnabled)
+		return;
+
+	RwV3d vecOut;
+
+	float fDistX, fDistY;
+	if (!CSprite::CalcScreenCoors(lightPos, &vecOut, &fDistX, &fDistY, false))
+		return;
+
+	int spriteAlpha = CWorld::GetIsLineOfSightClear(cameraPos, lightPos, true, true, true, true, true, true) ? 255 : 50;
+
+	int textureFilterState;
+	RwRenderStateGet(rwRENDERSTATETEXTUREFILTER, &textureFilterState);
+	RwRenderStateSet(rwRENDERSTATETEXTUREFILTER, (void*)rwFILTERLINEAR);
+	CRadar::CentreSprite.Draw(CRect(vecOut.x + 32.0f, vecOut.y + 32.0f, vecOut.x - 32.0f, vecOut.y - 32.0f), CRGBA(255, 255, 255, spriteAlpha));
+	RwRenderStateSet(rwRENDERSTATETEXTUREFILTER, (void*)textureFilterState);
+}
+
+void CPhotoMode::DrawFrameEffects()
+{
+	if (frameEffectID == FRAME_EFFECT_NONE)
+		return;
+
+	switch (frameEffectID)
+	{
+		case FRAME_EFFECT_CUTSCENE:
+			CSprite2d::DrawRect(CRect(0.0f, (SCREEN_HEIGHT/2) * 30.0f / 100.0f - SCREEN_SCALE_Y(8.0f), SCREEN_WIDTH, 0.0f), CRGBA(0, 0, 0, 255));
+			CSprite2d::DrawRect(CRect(0.0f, SCREEN_HEIGHT, SCREEN_WIDTH, SCREEN_HEIGHT - (SCREEN_HEIGHT/2) * 30.0f / 100.0f - 8.0f), CRGBA(0, 0, 0, 255));
+			break;
+		case FRAME_EFFECT_ON_ALL_SIDES:
+			CSprite2d::DrawRect(CRect(0.0f, 0.0f, SCREEN_WIDTH, SCREEN_SCALE_Y(20.0f)), CRGBA(0, 0, 0, 255));
+			CSprite2d::DrawRect(CRect(0.0f, SCREEN_HEIGHT, SCREEN_WIDTH, SCREEN_SCALE_FROM_BOTTOM(20.0f)), CRGBA(0, 0, 0, 255));
+			CSprite2d::DrawRect(CRect(0.0f, 0.0f, SCREEN_SCALE_X(20.0f), SCREEN_HEIGHT), CRGBA(0, 0, 0, 255));
+			CSprite2d::DrawRect(CRect(SCREEN_WIDTH, 0.0f, SCREEN_SCALE_FROM_RIGHT(20.0f), SCREEN_HEIGHT), CRGBA(0, 0, 0, 255));
+			break;
+		default:
+			break;
+	}
+}
+
+char* CPhotoMode::GetTabName(int tab)
+{
+	char sName[32];
+
+	switch (tab) {
+		case TAB_CAMERA:
+			sprintf(sName, "PM_CAM");
+			break;
+		case TAB_CHARACTER:
+			sprintf(sName, "PM_CHAR");
+			break;
+		case TAB_SKY:
+			sprintf(sName, "PM_SKY");
+			break;
+		case TAB_LIGHT:
+			sprintf(sName, "PM_LGHT");
+			break;
+		case TAB_EFFECTS:
+			sprintf(sName, "PM_EFFE");
+			break;
+		default:
+			sprintf(sName, "");
+			break;
+	}
+
+	return sName;
+}
+
+char* CPhotoMode::GetItemName(int item)
+{
+	char sName[32];
+
+	if (currentTab == TAB_CAMERA) {
+		switch (item) {
+			case ITEM_CAMERA_FOV:
+				sprintf(sName, "PM_ZOOM");
+				break;
+			case ITEM_CAMERA_TILT:
+				sprintf(sName, "PM_TILT");
+				break;
+			case ITEM_CAMERA_NEAR_CLIP:
+				sprintf(sName, "PM_NCP");
+				break;
+			default:
+				sprintf(sName, "");
+				break;
+		}
+	} else if (currentTab == TAB_CHARACTER) {
+		switch (item) {
+			case ITEM_CHAR_VISIBILITY:
+				sprintf(sName, "PM_VSBL");
+				break;
+			case ITEM_CHAR_CLOTHES:
+				sprintf(sName, "PM_CLTH");
+				break;
+			case ITEM_CHAR_ANIMATION:
+				sprintf(sName, "PM_ANIM");
+				break;
+			case ITEM_CHAR_ANIMATION_FRAME:
+				sprintf(sName, "PM_ANFR");
+				break;
+			case ITEM_CHAR_WEAPON:
+				sprintf(sName, "PM_WEAP");
+				break;
+			case ITEM_CHAR_MUZZLE_FLASH:
+				sprintf(sName, "PM_MUZL");
+				break;
+			case ITEM_CHAR_ROTATE:
+				sprintf(sName, "PM_ROT");
+				break;
+			default:
+				sprintf(sName, "");
+				break;
+		}
+	} else if (currentTab == TAB_SKY) {
+		switch (item) {
+			case ITEM_SKY_SUN_MOON:
+				sprintf(sName, "PM_SUN");
+				break;
+			case ITEM_SKY_HOURS:
+				sprintf(sName, "PM_HOUR");
+				break;
+			case ITEM_SKY_MINUTES:
+				sprintf(sName, "PM_MIN");
+				break;
+			case ITEM_SKY_WEATHER:
+				sprintf(sName, "PM_WTHR");
+				break;
+			default:
+				sprintf(sName, "");
+				break;
+		}
+	} else if (currentTab == TAB_LIGHT) {
+		switch (item) {
+			case ITEM_LIGHT_DEFAULT_LIGHT:
+				sprintf(sName, "PM_DEFL");
+				break;
+			case ITEM_LIGHT_COLOR_RED:
+				sprintf(sName, "PM_COLR");
+				break;
+			case ITEM_LIGHT_COLOR_GREEN:
+				sprintf(sName, "PM_COLG");
+				break;
+			case ITEM_LIGHT_COLOR_BLUE:
+				sprintf(sName, "PM_COLB");
+				break;
+			case ITEM_LIGHT_DARK_LIGHT:
+				sprintf(sName, "PM_DARK");
+				break;
+			default:
+				sprintf(sName, "");
+				break;
+		}
+	} else if (currentTab == TAB_EFFECTS) {
+		switch (item) {
+			case ITEM_EFFECT_COLORFILTER:
+				sprintf(sName, "PM_CLFL");
+				break;
+			case ITEM_EFFECT_INTENSITY:
+				sprintf(sName, "PM_INTS");
+				break;
+			case ITEM_EFFECT_BRIGHTNESS:
+				sprintf(sName, "PM_BRTN");
+				break;
+			case ITEM_EFFECT_FRAMES:
+				sprintf(sName, "PM_FRMS");
+				break;
+			default:
+				sprintf(sName, "");
+				break;
+		}
+	}
+
+	return sName;
+}
+
+char* CPhotoMode::GetItemValue(int item)
+{
+	char sValue[32];
+
+	if (currentTab == TAB_CAMERA) {
+		switch (item) {
+			case ITEM_CAMERA_FOV:
+				sprintf(sValue, "%i", (int)cameraFOV);
+				break;
+			case ITEM_CAMERA_TILT:
+				sprintf(sValue, "%.1f", cameraTilt);
+				break;
+			case ITEM_CAMERA_NEAR_CLIP:
+				sprintf(sValue, "%.1f", cameraNearClip);
+				break;
+			default:
+				sprintf(sValue, "");
+				break;
+		}
+	} else if (currentTab == TAB_CHARACTER) {
+		switch (item) {
+			case ITEM_CHAR_VISIBILITY:
+				if (bCharacterVisibility)
+					sprintf(sValue, UnicodeToAscii(TheText.Get("FEM_ON")));
+				else
+					sprintf(sValue, UnicodeToAscii(TheText.Get("FEM_OFF")));
+				break;
+			case ITEM_CHAR_CLOTHES:
+				if (clothesID == -1)
+					sprintf(sValue, UnicodeToAscii(TheText.Get("FEM_NON")));
+				else
+					sprintf(sValue, "%i", clothesID + 1);
+				break;
+			case ITEM_CHAR_ANIMATION:
+				if (animID == -1)
+					sprintf(sValue, UnicodeToAscii(TheText.Get("FEM_NON")));
+				else
+					sprintf(sValue, "%i", animID + 1);
+				break;
+			case ITEM_CHAR_ANIMATION_FRAME:
+				sprintf(sValue, "%.2f", animFrame);
+				break;
+			case ITEM_CHAR_WEAPON:
+				if (weaponID == WEAPONTYPE_UNARMED)
+					sprintf(sValue, UnicodeToAscii(TheText.Get("FEM_NON")));
+				else
+					sprintf(sValue, "%i", weaponID);
+				break;
+			case ITEM_CHAR_MUZZLE_FLASH:
+				if (bMuzzleFlash)
+					sprintf(sValue, UnicodeToAscii(TheText.Get("FEM_ON")));
+				else
+					sprintf(sValue, UnicodeToAscii(TheText.Get("FEM_OFF")));
+				break;
+			case ITEM_CHAR_ROTATE:
+				sprintf(sValue, "%i", (int)RADTODEG(rotateAngle));
+				break;
+			default:
+				sprintf(sValue, "");
+				break;
+		}
+	} else if (currentTab == TAB_SKY) {
+		switch (item) {
+			case ITEM_SKY_SUN_MOON:
+				sprintf(sValue, "%i", (int)RADTODEG(sunAndMoonAngle));
+				break;
+			case ITEM_SKY_HOURS:
+				sprintf(sValue, "%i", CClock::GetHours());
+				break;
+			case ITEM_SKY_MINUTES:
+				sprintf(sValue, "%i", CClock::GetMinutes());
+				break;
+			case ITEM_SKY_WEATHER:
+				if (weatherID == WEATHER_SUNNY)
+					sprintf(sValue, UnicodeToAscii(TheText.Get("PM_SNNY")));
+				else if (weatherID == WEATHER_CLOUDY)
+					sprintf(sValue, UnicodeToAscii(TheText.Get("PM_CLDY")));
+				else if (weatherID == WEATHER_RAINY)
+					sprintf(sValue, UnicodeToAscii(TheText.Get("PM_RANY")));
+				else if (weatherID == WEATHER_FOGGY)
+					sprintf(sValue, UnicodeToAscii(TheText.Get("PM_FGGY")));
+				else if (weatherID == WEATHER_EXTRA_SUNNY)
+					sprintf(sValue, UnicodeToAscii(TheText.Get("PM_SNN2")));
+				else if (weatherID == WEATHER_HURRICANE)
+					sprintf(sValue, UnicodeToAscii(TheText.Get("PM_HRCN")));
+				break;
+			default:
+				sprintf(sValue, "");
+				break;
+		}
+	} else if (currentTab == TAB_LIGHT) {
+		switch (item) {
+			case ITEM_LIGHT_DEFAULT_LIGHT:
+				if (bDefaultLightEnabled)
+					sprintf(sValue, UnicodeToAscii(TheText.Get("FEM_ON")));
+				else
+					sprintf(sValue, UnicodeToAscii(TheText.Get("FEM_OFF")));
+				break;
+			case ITEM_LIGHT_COLOR_RED:
+				sprintf(sValue, "%.1f", lightColorRed);
+				break;
+			case ITEM_LIGHT_COLOR_GREEN:
+				sprintf(sValue, "%.1f", lightColorGreen);
+				break;
+			case ITEM_LIGHT_COLOR_BLUE:
+				sprintf(sValue, "%.1f", lightColorBlue);
+				break;
+			case ITEM_LIGHT_DARK_LIGHT:
+				if (bDarkLightEnabled)
+					sprintf(sValue, UnicodeToAscii(TheText.Get("FEM_ON")));
+				else
+					sprintf(sValue, UnicodeToAscii(TheText.Get("FEM_OFF")));
+				break;
+			default:
+				sprintf(sValue, "");
+				break;
+		}
+	} else if (currentTab == TAB_EFFECTS) {
+		switch (item) {
+			case ITEM_EFFECT_COLORFILTER:
+				if (CPostFX::EffectSwitch == CPostFX::POSTFX_OFF)
+					sprintf(sValue, UnicodeToAscii(TheText.Get("FEM_NON")));
+				else if (CPostFX::EffectSwitch == CPostFX::POSTFX_SIMPLE)
+					sprintf(sValue, UnicodeToAscii(TheText.Get("FEM_SIM")));
+				else if (CPostFX::EffectSwitch == CPostFX::POSTFX_NORMAL)
+					sprintf(sValue, UnicodeToAscii(TheText.Get("FEM_NRM")));
+				else if (CPostFX::EffectSwitch == CPostFX::POSTFX_MOBILE)
+					sprintf(sValue, UnicodeToAscii(TheText.Get("FEM_MOB")));
+				break;
+			case ITEM_EFFECT_INTENSITY:
+				sprintf(sValue, "%.1f", CPostFX::Intensity);
+				break;
+			case ITEM_EFFECT_BRIGHTNESS:
+				sprintf(sValue, "%.1f", (float)FrontEndMenuManager.m_PrefsBrightness / 511.0f);
+				break;
+			case ITEM_EFFECT_FRAMES:
+				if (frameEffectID == 0)
+					sprintf(sValue, UnicodeToAscii(TheText.Get("FEM_NON")));
+				else
+					sprintf(sValue, "%i", frameEffectID);
+				break;
+			default:
+				sprintf(sValue, "");
+				break;
+		}
+	}
+
+	return sValue;
+}
+
+void CPhotoMode::InitFakePlayer()
+{
+	DeleteFakePlayer();
+
+	if (clothesID != -1) {
+		CStreaming::RequestSpecialModel(FindPlayerPed()->GetModelIndex(), clothesList[clothesID], STREAMFLAGS_DEPENDENCY | STREAMFLAGS_SCRIPTOWNED);
+
+		CTimer::Suspend();
+		CStreaming::LoadAllRequestedModels(false);
+		CTimer::Resume();
+	}
+
+	fakePlayer = new CPed(PEDTYPE_SPECIAL);
+	fakePlayer->m_modelIndex = FindPlayerPed()->GetModelIndex();
+	fakePlayer->CreateRwObject();
+	RpAnimBlendClumpInit(fakePlayer->GetClump());
+	RpAnimBlendClumpFillFrameArray(fakePlayer->GetClump(), fakePlayer->m_pFrames);
+	fakePlayer->SetPosition(FindPlayerCoors());
+	fakePlayer->SetOrientation(0.0f, 0.0f, 0.0f);
+	fakePlayer->SetHeading(rotateAngle);
+	fakePlayer->GetMatrix().UpdateRW();
+	fakePlayer->UpdateRwFrame();
+	CWorld::Add(fakePlayer);
+
+	CWeaponInfo* weaponInfo = CWeaponInfo::GetWeaponInfo((eWeaponType)weaponID);
+
+	if (animList[animID][1] != ANIM_MELEE_ATTACK_2ND &&
+		(animList[animID][0] >= ASSOCGRP_SCREWDRIVER && animList[animID][0] <= ASSOCGRP_RIFLE ||
+		animList[animID][0] == ASSOCGRP_FLAMETHROWER
+#ifdef FIRING_AND_AIMING // Animations in photo mode
+		|| animList[animID][0] == ASSOCGRP_ROCKET
+#endif
+#ifdef EX_WEAPON_STEYR // Animations in photo mode
+		|| animList[animID][0] == ASSOCGRP_STEYR
+#endif
+		)) {
+
+		if (animList[animID][0] == ASSOCGRP_COLT)
+			CAnimManager::AddAnimation(fakePlayer->GetClump(), ASSOCGRP_STD, ANIM_STD_IDLE);
+		else
+			CAnimManager::AddAnimation(fakePlayer->GetClump(), ASSOCGRP_STD, ANIM_STD_GUN_STAND);
+	} else if (animList[animID][1] == ANIM_STD_PARTIAL_FUCKU || animID == -1) {
+		CAnimManager::AddAnimation(fakePlayer->GetClump(), ASSOCGRP_STD, ANIM_STD_IDLE);
+	}
+
+	if (animID != -1) {
+		CAnimBlendAssociation* playerAnim = CAnimManager::AddAnimation(fakePlayer->GetClump(), (AssocGroupId)animList[animID][0], (AnimationId)animList[animID][1]);
+		if (animList[animID][1] != ANIM_STD_EVADE_DIVE) {
+			animFrame = playerAnim->hierarchy->totalLength / 3.0f;
+			playerAnim->SetCurrentTime(animFrame);
+		} else {
+			animFrame = 0.0f;
+			playerAnim->SetCurrentTime(0.0f);
+		}
+	}
+
+	RpAnimBlendClumpUpdateAnimations(fakePlayer->GetClump(), CTimer::GetTimeStepInSeconds());
+
+	fakePlayer->AddWeaponModel(weaponInfo->m_nModelId);
+
+	fakePlayer->bIsVisible = bCharacterVisibility;
+}
+
+void CPhotoMode::DeleteFakePlayer()
+{
+	if (!fakePlayer)
+		return;
+
+	CWorld::RemoveReferencesToDeletedObject(fakePlayer);
+	delete fakePlayer;
+	fakePlayer = nullptr;
+}
+
+void CPhotoMode::AddPlayerWeapon()
+{
+	if (weaponID == WEAPONTYPE_UNARMED) {
+		CWeaponInfo* weaponInfo = FindPlayerPed()->GetWeapon()->GetInfo();
+		if (weaponInfo->m_nModelId != -1) {
+			FindPlayerPed()->AddWeaponModel(weaponInfo->m_nModelId);
+		}
+
+		return;
+	}
+
+	CWeaponInfo* weaponInfo = CWeaponInfo::GetWeaponInfo((eWeaponType)weaponID);
+
+	CStreaming::RequestModel(weaponInfo->m_nModelId, STREAMFLAGS_DONT_REMOVE);
+	CStreaming::LoadAllRequestedModels(false);
+
+	FindPlayerPed()->AddWeaponModel(weaponInfo->m_nModelId);
+
+	if (fakePlayer)
+		fakePlayer->AddWeaponModel(weaponInfo->m_nModelId);
+
+	CStreaming::SetModelIsDeletable(weaponInfo->m_nModelId);
+}
+
+void CPhotoMode::RemovePlayerWeapon()
+{
+	CWeaponInfo* weaponInfo = CWeaponInfo::GetWeaponInfo((eWeaponType)weaponID);
+
+	FindPlayerPed()->RemoveWeaponModel(weaponInfo->m_nModelId);
+
+	if (fakePlayer)
+		fakePlayer->RemoveWeaponModel(weaponInfo->m_nModelId);
+}
+
+void CPhotoMode::CreateMuzzleFlash()
+{
+	CWeaponInfo* weaponInfo = CWeaponInfo::GetWeaponInfo((eWeaponType)weaponID);
+	CVector fireSource = weaponInfo->m_vecFireOffset;
+	fakePlayer->TransformToNode(fireSource, PED_HANDR);
+
+	float heading = RADTODEG(fakePlayer->GetForward().Heading());
+	float angle = DEGTORAD(heading);
+
+	CVector2D ahead(-Sin(angle), Cos(angle));
+	ahead.Normalise();
+
+	CVector gunflashPos = fireSource;
+	gunflashPos += CVector(0.06f * ahead.x, 0.06f * ahead.y, 0.0f);
+	muzzleFlashParticles[0] = CParticle::AddParticle(PARTICLE_GUNFLASH_NOANIM, gunflashPos, CVector(0.0f, 0.0f, 0.0f), nil, 0.10f);
+	muzzleFlashParticles[1] = CParticle::AddParticle(PARTICLE_GUNFLASH_NOANIM, gunflashPos, CVector(0.0f, 0.0f, 0.0f), nil, 0.10f);
+}
+
+void CPhotoMode::RemoveMuzzleParticles()
+{
+	for (int i = 0; i < MAX_MUZZLE_PARTICLES; i++) {
+		if (muzzleFlashParticles[i] && muzzleFlashParticles[i]->m_nTimeWhenWillBeDestroyed > 0) {
+			muzzleFlashParticles[i]->m_nTimeWhenWillBeDestroyed = 0;
+			muzzleFlashParticles[i]->m_nAlpha = 0;
+		}
+	}
+}
+
+void CPhotoMode::ChangePlayerPosition()
+{
+	FindPlayerPed()->SetPosition(playerPos);
+	FindPlayerPed()->GetMatrix().UpdateRW();
+	FindPlayerPed()->UpdateRwFrame();
+
+	if (fakePlayer) {
+		fakePlayer->SetPosition(playerPos);
+		fakePlayer->GetMatrix().UpdateRW();
+		fakePlayer->UpdateRwFrame();
+	}
+}
+
+void CPhotoMode::StoreWeatherState()
+{
+	storedInterpolationValue = CWeather::InterpolationValue;
+	storedNewWeatherType = CWeather::NewWeatherType;
+	storedOldWeatherType = CWeather::OldWeatherType;
+	storedForcedWeatherType = CWeather::ForcedWeatherType;
+	storedRain = CWeather::Rain;
+}
+
+void CPhotoMode::RestoreWeatherState()
+{
+	CWeather::InterpolationValue = storedInterpolationValue;
+	CWeather::NewWeatherType = storedNewWeatherType;
+	CWeather::OldWeatherType = storedOldWeatherType;
+	CWeather::ForcedWeatherType = storedForcedWeatherType;
+	CWeather::Rain = storedRain;
+}
+
+void CPhotoMode::RequestAnims()
+{
+	int screwdrvBlock = CAnimManager::GetAnimationBlockIndex("screwdrv");
+	int golfclubBlock = CAnimManager::GetAnimationBlockIndex("golfclub");
+	int baseballBlock = CAnimManager::GetAnimationBlockIndex("baseball");
+	int knifeBlock = CAnimManager::GetAnimationBlockIndex("knife");
+	int chainsawBlock = CAnimManager::GetAnimationBlockIndex("chainsaw");
+	int grenadeBlock = CAnimManager::GetAnimationBlockIndex("grenade");
+	int colt45Block = CAnimManager::GetAnimationBlockIndex("colt45");
+	int pythonBlock = CAnimManager::GetAnimationBlockIndex("python");
+	int shotgunBlock = CAnimManager::GetAnimationBlockIndex("shotgun");
+	int buddyBlock = CAnimManager::GetAnimationBlockIndex("buddy");
+	int uziBlock = CAnimManager::GetAnimationBlockIndex("uzi");
+	int rifleBlock = CAnimManager::GetAnimationBlockIndex("rifle");
+	int flameBlock = CAnimManager::GetAnimationBlockIndex("flame");
+#ifdef FIRING_AND_AIMING // Animations in photo mode
+	int rocketBlock = CAnimManager::GetAnimationBlockIndex("rocket");
+#endif
+#ifdef EX_WEAPON_STEYR // Animations in photo mode
+	int steyrBlock = CAnimManager::GetAnimationBlockIndex("steyr");
+#endif
+	int manBlock = CAnimManager::GetAnimationBlockIndex("man");
+	CStreaming::RequestAnim(screwdrvBlock, STREAMFLAGS_DEPENDENCY);
+	CStreaming::RequestAnim(golfclubBlock, STREAMFLAGS_DEPENDENCY);
+	CStreaming::RequestAnim(baseballBlock, STREAMFLAGS_DEPENDENCY);
+	CStreaming::RequestAnim(knifeBlock, STREAMFLAGS_DEPENDENCY);
+	CStreaming::RequestAnim(chainsawBlock, STREAMFLAGS_DEPENDENCY);
+	CStreaming::RequestAnim(grenadeBlock, STREAMFLAGS_DEPENDENCY);
+	CStreaming::RequestAnim(colt45Block, STREAMFLAGS_DEPENDENCY);
+	CStreaming::RequestAnim(pythonBlock, STREAMFLAGS_DEPENDENCY);
+	CStreaming::RequestAnim(shotgunBlock, STREAMFLAGS_DEPENDENCY);
+	CStreaming::RequestAnim(buddyBlock, STREAMFLAGS_DEPENDENCY);
+	CStreaming::RequestAnim(uziBlock, STREAMFLAGS_DEPENDENCY);
+	CStreaming::RequestAnim(rifleBlock, STREAMFLAGS_DEPENDENCY);
+	CStreaming::RequestAnim(flameBlock, STREAMFLAGS_DEPENDENCY);
+#ifdef FIRING_AND_AIMING // Animations in photo mode
+	CStreaming::RequestAnim(rocketBlock, STREAMFLAGS_DEPENDENCY);
+#endif
+#ifdef EX_WEAPON_STEYR // Animations in photo mode
+	CStreaming::RequestAnim(steyrBlock, STREAMFLAGS_DEPENDENCY);
+#endif
+	CStreaming::RequestAnim(manBlock, STREAMFLAGS_DEPENDENCY);
+	CStreaming::LoadAllRequestedModels(false);
+	CAnimManager::AddAnimBlockRef(screwdrvBlock);
+	CAnimManager::AddAnimBlockRef(golfclubBlock);
+	CAnimManager::AddAnimBlockRef(baseballBlock);
+	CAnimManager::AddAnimBlockRef(knifeBlock);
+	CAnimManager::AddAnimBlockRef(chainsawBlock);
+	CAnimManager::AddAnimBlockRef(grenadeBlock);
+	CAnimManager::AddAnimBlockRef(colt45Block);
+	CAnimManager::AddAnimBlockRef(pythonBlock);
+	CAnimManager::AddAnimBlockRef(shotgunBlock);
+	CAnimManager::AddAnimBlockRef(buddyBlock);
+	CAnimManager::AddAnimBlockRef(uziBlock);
+	CAnimManager::AddAnimBlockRef(rifleBlock);
+	CAnimManager::AddAnimBlockRef(flameBlock);
+#ifdef FIRING_AND_AIMING // Animations in photo mode
+	CAnimManager::AddAnimBlockRef(rocketBlock);
+#endif
+#ifdef EX_WEAPON_STEYR // Animations in photo mode
+	CAnimManager::AddAnimBlockRef(steyrBlock);
+#endif
+	CAnimManager::AddAnimBlockRef(manBlock);
+}
+
+void CPhotoMode::RemoveAnims()
+{
+	CAnimManager::RemoveAnimBlockRef(CAnimManager::GetAnimationBlockIndex("screwdrv"));
+	CAnimManager::RemoveAnimBlockRef(CAnimManager::GetAnimationBlockIndex("golfclub"));
+	CAnimManager::RemoveAnimBlockRef(CAnimManager::GetAnimationBlockIndex("baseball"));
+	CAnimManager::RemoveAnimBlockRef(CAnimManager::GetAnimationBlockIndex("knife"));
+	CAnimManager::RemoveAnimBlockRef(CAnimManager::GetAnimationBlockIndex("chainsaw"));
+	CAnimManager::RemoveAnimBlockRef(CAnimManager::GetAnimationBlockIndex("grenade"));
+	CAnimManager::RemoveAnimBlockRef(CAnimManager::GetAnimationBlockIndex("colt45"));
+	CAnimManager::RemoveAnimBlockRef(CAnimManager::GetAnimationBlockIndex("python"));
+	CAnimManager::RemoveAnimBlockRef(CAnimManager::GetAnimationBlockIndex("shotgun"));
+	CAnimManager::RemoveAnimBlockRef(CAnimManager::GetAnimationBlockIndex("buddy"));
+	CAnimManager::RemoveAnimBlockRef(CAnimManager::GetAnimationBlockIndex("uzi"));
+	CAnimManager::RemoveAnimBlockRef(CAnimManager::GetAnimationBlockIndex("rifle"));
+	CAnimManager::RemoveAnimBlockRef(CAnimManager::GetAnimationBlockIndex("flame"));
+#ifdef FIRING_AND_AIMING // Animations in photo mode
+	CAnimManager::RemoveAnimBlockRef(CAnimManager::GetAnimationBlockIndex("rocket"));
+#endif
+#ifdef EX_WEAPON_STEYR // Animations in photo mode
+	CAnimManager::RemoveAnimBlockRef(CAnimManager::GetAnimationBlockIndex("steyr"));
+#endif
+	CAnimManager::RemoveAnimBlockRef(CAnimManager::GetAnimationBlockIndex("man"));
+}
+
+void CPhotoMode::DrawMenuAndEffects()
+{
+	DrawFrameEffects();
+
+	if (bPlayerWantsToTakePhoto)
+		return;
+
+	DrawHints();
+
+	if (!bMenuOpen)
+		return;
+
+	DrawLightSprite();
+
+	const float startX = 25.0f;
+	const float startY = 160.0f;
+	const float endX = 150.0f + startY;
+	const float endY = 20.0f + startY;
+
+	// Black header
+	CSprite2d::DrawRect(CRect(SCREEN_SCALE_FROM_RIGHT(startX), SCREEN_SCALE_FROM_BOTTOM(startY), SCREEN_SCALE_FROM_RIGHT(endX), SCREEN_SCALE_FROM_BOTTOM(endY)), CRGBA(0, 0, 0, 225));
+
+	const float tabScaleX = 0.8f * 0.75f;
+	const float tabScaleY = 1.35f * 0.75f;
+
+	// Header buttons
+	if (CPad::GetPad(0)->IsAffectedByController) {
+		CFont::SetScale(SCREEN_SCALE_X(tabScaleX), SCREEN_SCALE_Y(tabScaleY));
+
+		// Left button
+		CFont::PS2Symbol = BUTTON_L1;
+		CFont::DrawButton(SCREEN_SCALE_FROM_RIGHT(endX - 4.5f), SCREEN_SCALE_FROM_BOTTOM(endY + 1.0f));
+
+		// Right button
+		CFont::PS2Symbol = BUTTON_R1;
+		CFont::DrawButton(SCREEN_SCALE_FROM_RIGHT(startX + 22.0f), SCREEN_SCALE_FROM_BOTTOM(endY + 1.0f));
+
+		CFont::PS2Symbol = BUTTON_NONE;
+	} else {
+		CFont::SetScale(SCREEN_SCALE_X(0.8f * 0.75f), SCREEN_SCALE_Y(1.35f * 0.75f));
+
+		// Left button
+		CFont::PCSymbol = 'Q' - 1;
+		CFont::DrawPCKey(SCREEN_SCALE_FROM_RIGHT(endX - 2.0f), SCREEN_SCALE_FROM_BOTTOM(endY + 1.0f));
+		CFont::PCSymbol = BUTTON_NONE;
+
+		// Right button
+		CFont::PCSymbol = 'E' - 1;
+		CFont::DrawPCKey(SCREEN_SCALE_FROM_RIGHT(startX + 19.0f), SCREEN_SCALE_FROM_BOTTOM(endY + 1.0f));
+		CFont::PCSymbol = BUTTON_NONE;
+	}
+
+	char sTemp[8];
+	char* sName;
+
+	// Current tab name
+	sName = GetTabName(currentTab);
+	strcpy(sTemp, sName);
+	CFont::SetPropOn();
+	CFont::SetBackgroundOff();
+	CFont::SetScale(SCREEN_SCALE_X(tabScaleX), SCREEN_SCALE_Y(tabScaleY));
+	CFont::SetRightJustifyOff();
+	CFont::SetRightJustifyWrap(0.0f);
+	CFont::SetFontStyle(FONT_LOCALE(FONT_HEADING));
+	CFont::SetBackGroundOnlyTextOn();
+	CFont::SetCentreOn();
+	CFont::SetColor(CRGBA(DEFAULT_TEXT_COLOR));
+	CFont::PrintString(SCREEN_SCALE_FROM_RIGHT((endX + startX) / 2.0f), SCREEN_SCALE_FROM_BOTTOM(endY + 2.0f), TheText.Get(sTemp));
+
+	// Black field (under header)
+	CSprite2d::DrawRect(CRect(SCREEN_SCALE_FROM_RIGHT(startX), SCREEN_SCALE_FROM_BOTTOM(endY - startY), SCREEN_SCALE_FROM_RIGHT(endX), SCREEN_SCALE_FROM_BOTTOM(startY)), CRGBA(0, 0, 0, 175));
+
+	// Items
+	const float itemScaleX = 0.8f * 0.5f;
+	const float itemScaleY = 1.35f * 0.5f;
+	float offsetItemY = 2.0f;
+	for (int i = 0; i < maxItems; i++) {
+		// Highlight
+		if (currentItem == i) {
+			CSprite2d::DrawRect(CRect(SCREEN_SCALE_FROM_RIGHT(endX), SCREEN_SCALE_FROM_BOTTOM(startY - (offsetItemY - 2.0f)), 
+								SCREEN_SCALE_FROM_RIGHT(startX), SCREEN_SCALE_FROM_BOTTOM(startY - 20.0f - (offsetItemY - 2.0f))),
+								CRGBA(50, 50, 50, 150));
+		}
+
+		// Name
+		sName = GetItemName(i);
+		strcpy(sTemp, sName);
+		CFont::SetPropOn();
+		CFont::SetBackgroundOff();
+		CFont::SetScale(SCREEN_SCALE_X(itemScaleX), SCREEN_SCALE_Y(itemScaleY));
+		CFont::SetRightJustifyOff();
+		CFont::SetRightJustifyWrap(0.0f);
+		CFont::SetFontStyle(FONT_LOCALE(FONT_HEADING));
+		CFont::SetBackGroundOnlyTextOn();
+		CFont::SetCentreOff();
+		CFont::SetColor(currentItem == i ? CRGBA(SELECTED_TEXT_COLOR) : CRGBA(DEFAULT_TEXT_COLOR));
+		CFont::PrintString(SCREEN_SCALE_FROM_RIGHT(endX - 4.0f), SCREEN_SCALE_FROM_BOTTOM(startY - offsetItemY), TheText.Get(sTemp));
+
+		// Value
+		wchar sPrint[32];
+		AsciiToUnicode(GetItemValue(i), sPrint);
+		CFont::SetPropOn();
+		CFont::SetBackgroundOff();
+		CFont::SetScale(SCREEN_SCALE_X(itemScaleX), SCREEN_SCALE_Y(itemScaleY));
+		CFont::SetRightJustifyOff();
+		CFont::SetRightJustifyWrap(0.0f);
+		CFont::SetFontStyle(FONT_LOCALE(FONT_HEADING));
+		CFont::SetBackGroundOnlyTextOn();
+		CFont::SetCentreOff();
+		CFont::SetColor(currentItem == i ? CRGBA(SELECTED_TEXT_COLOR) : CRGBA(DEFAULT_TEXT_COLOR));
+		CFont::PrintString(SCREEN_SCALE_FROM_RIGHT(endX - 190.0f), SCREEN_SCALE_FROM_BOTTOM(startY - offsetItemY), sPrint);
+
+		offsetItemY += 20.0f;
+	}
+}
+
+#endif
\ No newline at end of file
diff --git a/src/extras/PhotoMode.h b/src/extras/PhotoMode.h
new file mode 100644
index 00000000..c02f5dc5
--- /dev/null
+++ b/src/extras/PhotoMode.h
@@ -0,0 +1,179 @@
+#pragma once
+
+#include "common.h"
+
+#ifdef EX_PHOTO_MODE
+
+#include "PlayerPed.h"
+#include "Particle.h"
+
+#define MAX_MUZZLE_PARTICLES 2
+
+class CPhotoMode {
+public:
+	static bool IsPhotoModeEnabled() { return bPhotoModeEnabled; }
+	static CVector GetCameraPosition() { return cameraPos; }
+	static float GetSunAngle() { return sunAndMoonAngle; }
+	static bool HasSunAngleBeenChanged() { return bHasSunAngleBeenChanged; }
+
+	static void EnablePhotoMode();
+	static void DisablePhotoMode();
+
+	static void ProcessControl();
+
+	static void DrawMenuAndEffects();
+
+private:
+	enum eTabs {
+		TAB_CAMERA,
+		TAB_CHARACTER,
+		TAB_SKY,
+		TAB_LIGHT,
+		TAB_EFFECTS,
+		NUM_TABS,
+	};
+
+	enum eItems {
+		// Camera
+		ITEM_CAMERA_FOV = 0,
+		ITEM_CAMERA_TILT,
+		ITEM_CAMERA_NEAR_CLIP,
+
+		// Character
+		ITEM_CHAR_VISIBILITY = 0,
+		ITEM_CHAR_CLOTHES,
+		ITEM_CHAR_ANIMATION,
+		ITEM_CHAR_ANIMATION_FRAME,
+		ITEM_CHAR_WEAPON,
+		ITEM_CHAR_MUZZLE_FLASH,
+		ITEM_CHAR_ROTATE,
+
+		// Sky
+		ITEM_SKY_SUN_MOON = 0,
+		ITEM_SKY_HOURS,
+		ITEM_SKY_MINUTES,
+		ITEM_SKY_WEATHER,
+
+		// Light
+		ITEM_LIGHT_DEFAULT_LIGHT = 0,
+		ITEM_LIGHT_COLOR_RED,
+		ITEM_LIGHT_COLOR_GREEN,
+		ITEM_LIGHT_COLOR_BLUE,
+		ITEM_LIGHT_DARK_LIGHT,
+
+		// Effects
+		ITEM_EFFECT_COLORFILTER = 0,
+		ITEM_EFFECT_INTENSITY,
+		ITEM_EFFECT_BRIGHTNESS,
+		ITEM_EFFECT_FRAMES,
+
+		// LIMITS
+		NUM_CAMERA_ITEMS = ITEM_CAMERA_NEAR_CLIP + 1,
+		NUM_CHAR_ITEMS = ITEM_CHAR_ROTATE + 1,
+		NUM_SKY_ITEMS = ITEM_SKY_WEATHER + 1,
+		NUM_LIGHT_ITEMS = ITEM_LIGHT_DARK_LIGHT + 1,
+		NUM_EFFECT_ITEMS = ITEM_EFFECT_FRAMES + 1,
+	};
+
+	enum eFrameEffects {
+		FRAME_EFFECT_NONE,
+		FRAME_EFFECT_CUTSCENE,
+		FRAME_EFFECT_ON_ALL_SIDES,
+	};
+
+	static void DrawHints();
+
+	static void ProcessCamera();
+	static void ProcessInput();
+
+	static void TakePhoto();
+
+	static void UpdateMuzzleParticles();
+
+	static void ProcessPlayerPosition();
+	static void ProcessLights();
+	static void DrawLightSprite();
+
+	static void DrawFrameEffects();
+
+	static char* GetTabName(int tab);
+	static char* GetItemName(int item);
+	static char* GetItemValue(int item);
+
+	static void InitFakePlayer();
+	static void DeleteFakePlayer();
+
+	static void AddPlayerWeapon();
+	static void RemovePlayerWeapon();
+
+	static void CreateMuzzleFlash();
+	static void RemoveMuzzleParticles();
+
+	static void ChangePlayerPosition();
+
+	static void StoreWeatherState();
+	static void RestoreWeatherState();
+
+	static void RequestAnims();
+	static void RemoveAnims();
+
+	static bool bPhotoModeEnabled;
+	static bool bMenuOpen;
+	static bool bPhotoModeReadyToUse;
+	static bool bPlayerWantsToTakePhoto;
+	static float photoSavedTime;
+	static bool bHideUI;
+
+	static CVector cameraPos;
+	static float betaAngleCamera;
+	static float alphaAngleCamera;
+
+	static int maxTabs;
+	static int currentTab;
+	static int maxItems;
+	static int currentItem;
+
+	static float cameraFOV;
+	static float cameraTilt;
+	static float cameraNearClip;
+
+	static bool bCharacterVisibility;
+	static int clothesID;
+	static int animID;
+	static float animFrame;
+	static int weaponID;
+	static bool bMuzzleFlash;
+	static float rotateAngle;
+
+	static float sunAndMoonAngle;
+	static int weatherID;
+	static bool bHasSunAngleBeenChanged;
+
+	static bool bDefaultLightEnabled;
+	static float lightColorRed;
+	static float lightColorGreen;
+	static float lightColorBlue;
+	static bool bDarkLightEnabled;
+
+	static int frameEffectID;
+
+	static CPed* fakePlayer;
+	const static char* clothesList[];
+	const static int animList[][2];
+	static CParticle* muzzleFlashParticles[MAX_MUZZLE_PARTICLES];
+	static CVector playerPos;
+	static CVector lightPos;
+
+	static CVector storedPlayerPos;
+	static int storedColorfilter;
+	static float storedIntensity;
+	static int storedBrighntess;
+
+	static float storedInterpolationValue;
+	static int16 storedOldWeatherType;
+	static int16 storedNewWeatherType;
+	static int16 storedForcedWeatherType;
+	static float storedRain;
+};
+
+#endif
\ No newline at end of file
diff --git a/src/renderer/Antennas.cpp b/src/renderer/Antennas.cpp
index 5e30aca2..5e3df26a 100644
--- a/src/renderer/Antennas.cpp
+++ b/src/renderer/Antennas.cpp
@@ -2,6 +2,9 @@
 
 #include "main.h"
 #include "Antennas.h"
+#ifdef EX_PHOTO_MODE // Antenna
+#include "PhotoMode.h"
+#endif
 
 CAntenna CAntennas::aAntennas[NUMANTENNAS];
 
@@ -110,6 +113,11 @@ CAntennas::Render(void)
 void
 CAntenna::Update(CVector dir, CVector basepos)
 {
+#ifdef EX_PHOTO_MODE // Antenna
+	if (CPhotoMode::IsPhotoModeEnabled())
+		return;
+#endif
+
 	int i;
 
 	pos[0] = basepos;
diff --git a/src/renderer/Font.cpp b/src/renderer/Font.cpp
index 7e13a798..25ae72ca 100644
--- a/src/renderer/Font.cpp
+++ b/src/renderer/Font.cpp
@@ -8,6 +8,12 @@
 #endif
 #include "Timer.h"
 
+#ifdef EX_PC_KEY_ICONS
+#include "string"
+#include "ControllerConfig.h"
+#include "Pad.h"
+#endif
+
 #ifdef MODLOADER // fonts.txd, fonts_p.txd, fonts_r.txd, fonts_j.txd
 #include "modloader.h"
 #endif
@@ -305,6 +311,12 @@ int CFont::PS2Symbol = BUTTON_NONE;
 int CFont::ButtonsSlot = -1;
 #endif // BUTTON_ICONS
 
+#ifdef EX_PC_KEY_ICONS
+CSprite2d CFont::PCKeySprite[MAX_PC_KEY_SPRITES];
+int CFont::PCSymbol = -1;
+int CFont::PCKeySlot = -1;
+#endif
+
 void
 CFont::Initialise(void)
 {
@@ -425,8 +437,16 @@ CFont::Initialise(void)
 
 #if !defined(GAMEPAD_MENU) && defined(BUTTON_ICONS)
 	// loaded in CMenuManager with GAMEPAD_MENU defined
+#ifdef VICE_EXTENDED // ViceExtended folder - fonts
+	LoadButtons("ViceExtended/MODELS/X360BTNS.TXD");
+#else
 	LoadButtons("MODELS/X360BTNS.TXD");
 #endif
+#endif
+
+#ifdef EX_PC_KEY_ICONS // Load PCBTNS.TXD
+	LoadPCKeys("ViceExtended/MODELS/PCBTNS.TXD");
+#endif
 }
 
 #ifdef BUTTON_ICONS
@@ -464,6 +484,19 @@ CFont::LoadButtons(const char *txdPath)
 		ButtonSprite[BUTTON_RSTICK_DOWN].SetTexture("thumbryd");
 		ButtonSprite[BUTTON_RSTICK_LEFT].SetTexture("thumbrxl");
 		ButtonSprite[BUTTON_RSTICK_RIGHT].SetTexture("thumbrxr");
+
+#ifdef EX_MORE_BUTTON_ICONS
+		ButtonSprite[BUTTON_LEFT_RIGHT].SetTexture("dlr");
+		ButtonSprite[BUTTON_UP_DOWN].SetTexture("dud");
+		ButtonSprite[BUTTON_SELECT].SetTexture("select");
+		ButtonSprite[BUTTON_LSTICK].SetTexture("thumbl");
+		ButtonSprite[BUTTON_RSTICK].SetTexture("thumbr");
+		ButtonSprite[BUTTON_DPAD_UP].SetTexture("up");
+		ButtonSprite[BUTTON_DPAD_DOWN].SetTexture("down");
+		ButtonSprite[BUTTON_DPAD_LEFT].SetTexture("left");
+		ButtonSprite[BUTTON_DPAD_RIGHT].SetTexture("right");
+#endif
+
 		CTxdStore::PopCurrentTxd();
 	}
 	else {
@@ -477,6 +510,53 @@ CFont::LoadButtons(const char *txdPath)
 }
 #endif // BUTTON_ICONS
 
+#ifdef EX_PC_KEY_ICONS // LoadPCKeys
+void CFont::LoadPCKeys(const char* txdPath)
+{
+	if (int file = CFileMgr::OpenFile(txdPath)) {
+		CFileMgr::CloseFile(file);
+		if (PCKeySlot == -1)
+			PCKeySlot = CTxdStore::AddTxdSlot("pckeys");
+		else {
+			for (int i = 0; i < MAX_PC_KEY_SPRITES; i++)
+				PCKeySprite[i].Delete();
+			CTxdStore::RemoveTxd(PCKeySlot);
+		}
+		CTxdStore::LoadTxd(PCKeySlot, txdPath);
+		CTxdStore::AddRef(PCKeySlot);
+		CTxdStore::PushCurrentTxd();
+		CTxdStore::SetCurrentTxd(PCKeySlot);
+
+		// Virtual keys
+		for (int i = 1; i < 255; i++) {
+			if (i >= 65 && i <= 90) {
+				// letter
+				std::string keyString(1, i);
+				PCKeySprite[i - 1].SetTexture(keyString.c_str());
+			} else {
+				std::string keyString = std::to_string(i);
+				PCKeySprite[i - 1].SetTexture(keyString.c_str());
+			}
+		}
+
+		// Another sprites
+		PCKeySprite[SPRITE_MOUSE_WHEEL_UP].SetTexture("MWHU");
+		PCKeySprite[SPRITE_MOUSE_WHEEL_DOWN].SetTexture("MWHD");
+		PCKeySprite[SPRITE_MOUSE_WHEEL_UP_AND_DOWN].SetTexture("MWH");
+		PCKeySprite[SPRITE_MOUSE].SetTexture("Mouse");
+
+		CTxdStore::PopCurrentTxd();
+	} else {
+		if (PCKeySlot != -1) {
+			for (int i = 0; i < MAX_PC_KEY_SPRITES; i++)
+				PCKeySprite[i].Delete();
+			CTxdStore::RemoveTxdSlot(PCKeySlot);
+			PCKeySlot = -1;
+		}
+	}
+}
+#endif
+
 #ifdef MORE_LANGUAGES
 void
 CFont::ReloadFonts(uint8 set)
@@ -574,6 +654,16 @@ CFont::Shutdown(void)
 		ButtonsSlot = -1;
 	}
 #endif
+
+#ifdef EX_PC_KEY_ICONS // Shutdown
+	if (PCKeySlot != -1) {
+		for (int i = 0; i < MAX_PC_KEY_SPRITES; i++)
+			PCKeySprite[i].Delete();
+		CTxdStore::RemoveTxdSlot(PCKeySlot);
+		PCKeySlot = -1;
+	}
+#endif
+
 	Sprite[0].Delete();
 	Sprite[1].Delete();
 #ifdef MORE_LANGUAGES
@@ -624,6 +714,42 @@ CFont::DrawButton(float x, float y)
 			ButtonSprite[PS2Symbol].Draw(rect, CRGBA(255, 255, 255, RenderState.color.a));
 		RwRenderStateSet(rwRENDERSTATETEXTURERASTER, raster);
 		RwRenderStateSet(rwRENDERSTATEVERTEXALPHAENABLE, (void *)vertexAlphaState);
+#ifdef EX_PHOTO_MODE // We always apply filtering to gamepad button textures
+		RwRenderStateSet(rwRENDERSTATETEXTUREFILTER, (void*)textureFilterState);
+#endif
+	}
+}
+#endif
+
+#ifdef EX_PC_KEY_ICONS // DrawPCKey
+void CFont::DrawPCKey(float x, float y)
+{
+	if (x <= 0.0f || x > SCREEN_WIDTH || y <= 0.0f || y > SCREEN_HEIGHT)
+		return;
+
+	if (PCSymbol != -1) {
+		CRect rect;
+		float charOffsetMultiplier = (float)PCKeySprite[PCSymbol].m_pTexture->raster->width / (float)PCKeySprite[PCSymbol].m_pTexture->raster->height;
+		rect.left = x;
+		rect.top = RenderState.scaleY + RenderState.scaleY + y;
+		rect.right = RenderState.scaleY * (17.0f * charOffsetMultiplier) + x;
+		rect.bottom = RenderState.scaleY * 19.0f + y;
+
+		int vertexAlphaState;
+		int textureFilterState;
+		void* raster;
+		RwRenderStateGet(rwRENDERSTATEVERTEXALPHAENABLE, &vertexAlphaState);
+		RwRenderStateGet(rwRENDERSTATETEXTURERASTER, &raster);
+		RwRenderStateSet(rwRENDERSTATEVERTEXALPHAENABLE, (void*)TRUE);
+		RwRenderStateGet(rwRENDERSTATETEXTUREFILTER, &textureFilterState);
+		RwRenderStateSet(rwRENDERSTATETEXTUREFILTER, (void *)rwFILTERLINEAR); // We always apply filtering to PC key textures
+		if (RenderState.bIsShadow)
+			PCKeySprite[PCSymbol].Draw(rect, RenderState.color);
+		else
+			PCKeySprite[PCSymbol].Draw(rect, CRGBA(255, 255, 255, RenderState.color.a));
+		RwRenderStateSet(rwRENDERSTATETEXTUREFILTER, (void *)textureFilterState);
+		RwRenderStateSet(rwRENDERSTATETEXTURERASTER, raster);
+		RwRenderStateSet(rwRENDERSTATEVERTEXALPHAENABLE, (void*)vertexAlphaState);
 	}
 }
 #endif
@@ -788,6 +914,18 @@ CFont::RenderFontBuffer()
 			PS2Symbol = BUTTON_NONE;
 #endif
 			pRenderStateBufPointer.pStr = ParseToken(pRenderStateBufPointer.pStr, color, bFlash, bBold);
+
+
+#ifdef EX_PC_KEY_ICONS // PrintString
+			if (PCSymbol != -1) {
+				DrawPCKey(textPosX, textPosY);
+				float charOffsetMultiplier = (float)PCKeySprite[PCSymbol].m_pTexture->raster->width / (float)PCKeySprite[PCSymbol].m_pTexture->raster->height;
+				textPosX += RenderState.scaleY * (17.0f * charOffsetMultiplier);
+				PCSymbol = -1;
+				PS2Symbol = -1;
+			}
+#endif
+
 #ifdef BUTTON_ICONS
 			if(PS2Symbol != BUTTON_NONE) {
 				DrawButton(textPosX, textPosY);
@@ -1642,10 +1780,23 @@ CFont::ParseToken(wchar* str, CRGBA &color, bool &flash, bool &bold)
 		case 'L': PS2Symbol = BUTTON_RSTICK_DOWN; break;
 		case '(': PS2Symbol = BUTTON_RSTICK_LEFT; break;
 		case ')': PS2Symbol = BUTTON_RSTICK_RIGHT; break;
+
+#ifdef EX_MORE_BUTTON_ICONS
+		case 'S': PS2Symbol = BUTTON_SELECT; break;
+		case '^': PS2Symbol = BUTTON_DPAD_UP; break;
+		case '_': PS2Symbol = BUTTON_DPAD_DOWN; break;
+		case 'W': PS2Symbol = BUTTON_DPAD_LEFT; break;
+		case 'R': PS2Symbol = BUTTON_DPAD_RIGHT; break;
+#endif
 #endif
 		default:
 			break;
 		}
+
+#ifdef EX_PC_KEY_ICONS // ParseToken
+		if (PS2Symbol != -1 && !CPad::IsAffectedByController)
+			PCSymbol = ControlsManager.GetCurrentPCKeyFromCurrentAction();
+#endif
 	}
 	while (*s != '~')
 		++s;
@@ -1821,6 +1972,14 @@ CFont::ParseToken(wchar *s)
 		case 'L': PS2Symbol = BUTTON_RSTICK_DOWN; break;
 		case '(': PS2Symbol = BUTTON_RSTICK_LEFT; break;
 		case ')': PS2Symbol = BUTTON_RSTICK_RIGHT; break;
+
+#ifdef EX_MORE_BUTTON_ICONS
+		case 'S': PS2Symbol = BUTTON_SELECT; break;
+		case '^': PS2Symbol = BUTTON_DPAD_UP; break;
+		case '_': PS2Symbol = BUTTON_DPAD_DOWN; break;
+		case 'W': PS2Symbol = BUTTON_DPAD_LEFT; break;
+		case 'R': PS2Symbol = BUTTON_DPAD_RIGHT; break;
+#endif
 #endif
 		}
 	while(*s != '~') s++;
diff --git a/src/renderer/Font.h b/src/renderer/Font.h
index 02e7df3b..0d03d7af 100644
--- a/src/renderer/Font.h
+++ b/src/renderer/Font.h
@@ -115,10 +115,35 @@ enum
 	BUTTON_RSTICK_DOWN,
 	BUTTON_RSTICK_LEFT,
 	BUTTON_RSTICK_RIGHT,
+
+#ifdef EX_MORE_BUTTON_ICONS
+	BUTTON_LEFT_RIGHT,
+	BUTTON_UP_DOWN,
+	BUTTON_SELECT,
+	BUTTON_LSTICK,
+	BUTTON_RSTICK,
+	BUTTON_DPAD_UP,
+	BUTTON_DPAD_DOWN,
+	BUTTON_DPAD_LEFT,
+	BUTTON_DPAD_RIGHT,
+#endif
+
 	MAX_BUTTON_ICONS
 };
 #endif // BUTTON_ICONS
 
+#ifdef EX_PC_KEY_ICONS
+enum
+{
+	// MAX_VIRTUAL_KEYS = 254,
+
+	SPRITE_MOUSE_WHEEL_UP = 254 + 1,
+	SPRITE_MOUSE_WHEEL_DOWN,
+	SPRITE_MOUSE_WHEEL_UP_AND_DOWN,
+	SPRITE_MOUSE,
+	MAX_PC_KEY_SPRITES,
+};
+#endif
 
 class CFont
 {
@@ -145,6 +170,15 @@ public:
 #endif // BUTTON_ICONS
 
 
+#ifdef EX_PC_KEY_ICONS
+	static int32 PCKeySlot;
+	static CSprite2d PCKeySprite[MAX_PC_KEY_SPRITES];
+	static int PCSymbol;
+
+	static void LoadPCKeys(const char* txdPath);
+	static void DrawPCKey(float x, float y);
+#endif
+
 	static void Initialise(void);
 	static void Shutdown(void);
 	static void InitPerFrame(void);
diff --git a/src/renderer/Hud.cpp b/src/renderer/Hud.cpp
index 900f1b4c..e3ed93cc 100644
--- a/src/renderer/Hud.cpp
+++ b/src/renderer/Hud.cpp
@@ -26,6 +26,14 @@
 #include "General.h"
 #include "VarConsole.h"
 
+#ifdef EX_PC_KEY_ICONS
+#include "ControllerConfig.h"
+#endif
+
+#ifdef EX_PHOTO_MODE
+#include "PhotoMode.h"
+#endif
+
 #ifdef MODLOADER // hud.txd
 #include "modloader.h"
 #endif
@@ -1468,6 +1476,12 @@ void CHud::DrawAfterFade()
 	RwRenderStateSet(rwRENDERSTATETEXTUREADDRESS, (void*)rwTEXTUREADDRESSCLAMP);
 	RwRenderStateSet(rwRENDERSTATEVERTEXALPHAENABLE, (void*)FALSE);
 
+#ifdef EX_PHOTO_MODE // Don't draw DrawAfterFade stuff during photo mode
+	if (CPhotoMode::IsPhotoModeEnabled())
+		return;
+#endif
+
+
 	if (CTimer::GetIsUserPaused() || CReplay::IsPlayingBack())
 		return;
 
@@ -1943,6 +1957,12 @@ void CHud::SetHelpMessage(wchar *message, bool quick, bool displayForever)
 			m_HelpMessageToPrint[i] = 0;
 		}
 
+#ifdef EX_PC_KEY_ICONS // Clear actions in the message
+		for (int j = 0; j < 4; j++) {
+			ControlsManager.m_curActionsInMessage[j] = -1;
+		}
+#endif
+
 		CMessages::WideStringCopy(m_HelpMessage, message, HELP_MSG_LENGTH);
 		CMessages::InsertPlayerControlKeysInString(m_HelpMessage);
 		if (m_HelpMessageState == 0 || !CMessages::WideStringCompare(m_HelpMessage, m_HelpMessageToPrint, HELP_MSG_LENGTH)) {
diff --git a/src/renderer/Particle.cpp b/src/renderer/Particle.cpp
index 87a73fe5..67b68475 100644
--- a/src/renderer/Particle.cpp
+++ b/src/renderer/Particle.cpp
@@ -22,6 +22,10 @@
 #include "SaveBuf.h"
 #include "debugmenu.h"
 
+#ifdef EX_PHOTO_MODE
+#include "PhotoMode.h"
+#endif
+
 #define MAX_PARTICLES_ON_SCREEN   (750)
 
 
@@ -871,7 +875,13 @@ CParticle *CParticle::AddParticle(tParticleType type, CVector const &vecPos, CVe
 
 CParticle *CParticle::AddParticle(tParticleType type, CVector const &vecPos, CVector const &vecDir, CEntity *pEntity, float fSize, RwRGBA const &color, int32 nRotationSpeed, int32 nRotation, int32 nCurFrame, int32 nLifeSpan)
 {
+#ifdef EX_PHOTO_MODE // Particles stop being created in photo mode except for the muzzle flash
+	if ( CTimer::GetIsPaused() || CPhotoMode::IsPhotoModeEnabled() && type != PARTICLE_GUNFLASH_NOANIM)
+#else
 	if ( CTimer::GetIsPaused() )
+#endif
+
+
 		return nil;
 
 	if ( ( type == PARTICLE_ENGINE_SMOKE
@@ -2117,9 +2127,6 @@ void CParticle::Render()
 #endif
 #endif
 
-
-
-
 					{
 						if ( i == PARTICLE_WATER_HYDRANT )
 						{
diff --git a/src/renderer/Sprite.cpp b/src/renderer/Sprite.cpp
index 10582030..13a3e0fa 100644
--- a/src/renderer/Sprite.cpp
+++ b/src/renderer/Sprite.cpp
@@ -9,6 +9,10 @@
 #include "Frontend.h"
 #endif
 
+#ifdef EX_PHOTO_MODE
+#include "PhotoMode.h"
+#endif
+
 float CSprite::m_f2DNearScreenZ;
 float CSprite::m_f2DFarScreenZ;
 float CSprite::m_fRecipNearClipPlane;
diff --git a/src/renderer/Timecycle.cpp b/src/renderer/Timecycle.cpp
index 63761484..1320b7a8 100644
--- a/src/renderer/Timecycle.cpp
+++ b/src/renderer/Timecycle.cpp
@@ -10,6 +10,10 @@
 #include "FileMgr.h"
 #include "Timecycle.h"
 
+#ifdef EX_PHOTO_MODE
+#include "PhotoMode.h"
+#endif
+
 #ifdef MODLOADER // timecyc.dat
 #include "modloader.h"
 #endif
@@ -410,9 +414,25 @@ CTimeCycle::Update(void)
 
 	float sunAngle = 2*PI*(CClock::GetSeconds()/60.0f + CClock::GetMinutes() + CClock::GetHours()*60)/(24*60);
 	CVector &sunPos = GetSunDirection();
+
+
+#ifdef EX_PHOTO_MODE // Changing sun angle
+	if (CPhotoMode::IsPhotoModeEnabled() && CPhotoMode::HasSunAngleBeenChanged()) {
+		sunPos.x = Sin(sunAngle) * Sin(CPhotoMode::GetSunAngle());
+		sunPos.y = 1.0f * Cos(CPhotoMode::GetSunAngle());
+		sunPos.z = 0.2f * Sin(CPhotoMode::GetSunAngle()) - Cos(sunAngle);
+	} else {
+		sunPos.x = Sin(sunAngle);
+		sunPos.y = 1.0f;
+		sunPos.z = 0.2f - Cos(sunAngle);
+	}
+#else
 	sunPos.x = Sin(sunAngle);
 	sunPos.y = 1.0f;
 	sunPos.z = 0.2f - Cos(sunAngle);
+#endif
+
+
 	sunPos.Normalise();
 
 	if(m_bExtraColourOn)
diff --git a/src/text/Messages.cpp b/src/text/Messages.cpp
index 81339ae0..62895d77 100644
--- a/src/text/Messages.cpp
+++ b/src/text/Messages.cpp
@@ -467,6 +467,18 @@ CMessages::InsertPlayerControlKeysInString(wchar *str)
 				if (contSize != 0) {
 					if (WideStringCompare(&str[i], ControlsManager.m_aActionNames[cont], contSize)) {
 						done = true;
+
+
+#ifdef EX_PC_KEY_ICONS // InsertPlayerControlKeysInString
+						for (int j = 0; j < 4; j++) {
+							if (ControlsManager.m_curActionsInMessage[j] == -1) {
+								ControlsManager.m_curActionsInMessage[j] = cont;
+
+								break;
+							}
+						}
+#endif
+
 						ControlsManager.GetWideStringOfCommandKeys(cont, keybuf, 256);
 						uint16 keybuf_size = GetWideStringLength(keybuf);
 						for (uint16 j = 0; j < keybuf_size; j++) {
-- 
2.45.1.windows.1

