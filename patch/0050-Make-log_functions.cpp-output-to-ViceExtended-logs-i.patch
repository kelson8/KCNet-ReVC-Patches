From 8cb10139a4b61ff8db4b02981932c70f818fe4d3 Mon Sep 17 00:00:00 2001
From: kelson8 <kelson@kelsoncraft.net>
Date: Thu, 27 Feb 2025 15:35:17 -0500
Subject: [PATCH 06/13] Make log_functions.cpp output to 'ViceExtended\logs'
 instead of 'ViceExtended'

---
 src/extras/functions/log_functions.cpp | 58 ++++++++++++++++++--------
 1 file changed, 40 insertions(+), 18 deletions(-)

diff --git a/src/extras/functions/log_functions.cpp b/src/extras/functions/log_functions.cpp
index 08d49678..183d3e91 100644
--- a/src/extras/functions/log_functions.cpp
+++ b/src/extras/functions/log_functions.cpp
@@ -16,6 +16,8 @@
 #include <Windows.h>
 #endif //_WIN32
 
+// This log_functions file isn't specific to ReVC, it should work in any C++ program besides the 'TRACE' functions.
+
 // This is what I'm currently using for this test.
 // https://stackoverflow.com/questions/7400418/writing-a-log-file-in-c-c
 #include <cstdio>
@@ -42,8 +44,10 @@ std::string logPath = filePath + "logs\\";
 
 /// <summary>
 /// Log to file
-/// TODO Fix this use the 'ViceExtended\logs' directory.
-/// I think I have to set this in this function.
+/// Ohh, the problem with this is that I didn't have the directory created first.
+/// If the directory isn't created this won't run and fails.
+/// TODO Make this create the 'ViceExtended\logs' directory if it doesn't exist.
+/// This uses the 'ViceExtended\logs' directory.
 /// </summary>
 /// <param name="type">The type of log, info, warning, error</param>
 /// <param name="fileName">The file name to log to, set to 'ViceExtended\logs' folder</param>
@@ -51,12 +55,20 @@ std::string logPath = filePath + "logs\\";
 static void
 LogToFile(std::string type, std::string fileName, std::string message)
 {
+	
 	// Set this to the new logPath folder 'ViceExtended\logs'
-	// std::string logFilePath = logPath + fileName;
+	std::string logFilePath = logPath + fileName;
+	
 	// Set this to the old logPath folder 'ViceExtended\'
-	std::string logFilePath = filePath + fileName;
+	//std::string logFilePath = filePath + fileName;
+
+	// Setup the ofstream for the logFile
 	std::ofstream logFile(logFilePath, std::ios::app);
 
+	// Temporary test, this shows the log file path from above.
+	// Why does this show weird symbols? It works in game
+	//TRACE("Path: %s", logFilePath);
+
 	// Check if the file was opened.
 	if(logFile.is_open()) 
 	{
@@ -79,36 +91,45 @@ LogToFile(std::string type, std::string fileName, std::string message)
 			// This gets the current directory, seems to work for my needs
 			std::string currentDirectory(result, GetCurrentDirectoryA(MAX_PATH, result));
 
-			// TODO Add the ViceExtended folder to this, this doesn't seem to set it.
-			currentDirectory = currentDirectory + "\\ViceExtended\\";
-			std::string logFilePath = currentDirectory + fileName;
+			// Temporary test, this is supposed to show the log file path from above.
+			// Why does this show weird symbols? It works in game
+			//TRACE("Path: %s", result);
+			
 
-			// Test for making this into a variable, got this idea from Google AI.
+			// Set the folder to Vice Extended
+			// These don't seem to be in use.
+			
+			//currentDirectory = currentDirectory + "\\ViceExtended\\";
+			//currentDirectory = currentDirectory + "\\ViceExtended\\" + "logs\\";
+			// Old path
+			//std::string logFilePath = currentDirectory + fileName;
+
+			// TODO Make this use a log folder path.
+			// New path
+			//std::string logFilePathNew = currentDirectory + "logs\\" + fileName;
+			//TRACE("Path: %s", logFilePathNew.c_str());
+			//
+			
+
+			// Test for making the time into a variable, got this idea from Google AI.
 			std::ostringstream oss;
 			oss << std::put_time(&local_tm, "%Y-%m-%d %H:%M:%S");
 			std::string formatted_time = oss.str();
+			//
 
-			// std::string currentTime = std::put_time(&local_tm, "%Y-%m-%d %H:%M:%S");
-
-			// logFile << "File path: " << result << std::endl;
 
-			// This works for displaying this with the date and time.
-			// logFile << "[" << formatted_time << "] Application started" << std::endl;
-
-
-			// TODO Test
+			// This works fine like this
 			// Logs like this:
 			// Error: Time <Message>
 			logFile << "[" << type << "] " << "[" << formatted_time << "] " << message;
 
+			// Old tests
 			//logFile << "[" << formatted_time << "] " << "Folder path: " << currentDirectory << std::endl;
 			//logFile << "[" << formatted_time << "] " << "File path: " << logFilePath << std::endl;
-
 			// logFile << "File path: " << logFilePath << std::endl;
 
 			// These work
 			// logFile << "Folder path: " << currentDirectory << std::endl;
-
 			// logFile << "File path: " << logFilePath << std::endl;
 
 			// Close the log file.
@@ -118,6 +139,7 @@ LogToFile(std::string type, std::string fileName, std::string message)
 		// TODO Figure out why this message always displays.
 #endif //_WIN32
 	} else {
+		// TODO Make this create the directory if it doesn't exist.
 		// Well this has some weird symbols in it..
 		TRACE("KCNet - File %s not found.", fileName);
 		//TRACE("KCNet - Logging not implemented.");
-- 
2.45.1.windows.1

