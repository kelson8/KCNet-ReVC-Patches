From 147571b21109b2e9a4085887acb9c4d273a6d3b1 Mon Sep 17 00:00:00 2001
From: kelson8 <kelson@kelsoncraft.net>
Date: Sun, 9 Mar 2025 00:42:19 -0500
Subject: [PATCH 078/101] Add cheat test, toggle player controls to lua_test.
 Add blowmeup, killme, and spawncar cheats in cheat test. Add
 TogglePlayerControl, this toggles the player movement on/off. Add heal player
 function. Update test.lua

---
 src/extras/lua/lua_test.cpp | 159 +++++++++++++++++++++++++++++++++++-
 utils/lua/test.lua          |  55 +++++++++++--
 2 files changed, 206 insertions(+), 8 deletions(-)

diff --git a/src/extras/lua/lua_test.cpp b/src/extras/lua/lua_test.cpp
index c3ac51b0..ac77ff01 100644
--- a/src/extras/lua/lua_test.cpp
+++ b/src/extras/lua/lua_test.cpp
@@ -22,6 +22,12 @@
 
 // It would probably be easier to start off with keybinds.
 
+// TODO Figure out how to make cheats activate something within the lua code.
+// So if I have a cheat 'blowmeup' in lua, it'll run the C++ function.
+
+// TODO Make a basic chat system like in Luanti (MineTest)
+// So if I type '/tp 3, 3, 30', it'll teleport me to those coords.
+
 // Lua
 extern "C"
 {
@@ -42,11 +48,21 @@ extern "C"
 #include "log_functions.h"
 #include "defines.h"
 
+#include "vehicle_functions.h"
+#include "vehicle_cheats.h"
+
 // VC Specific
 #include "Radar.h"
 #include "Hud.h"
 #include "Text.h"
 
+#include "Automobile.h"
+#include "Bike.h"
+#include "Heli.h"
+#include "Boat.h"
+
+#include "Pad.h"
+
 // Well Entity.h is needed before PlayerInfo.h
 #include "Entity.h"
 #include "PlayerInfo.h"
@@ -63,6 +79,8 @@ LuaTest::LuaTest()
 	m_luaVM = NULL; 
 }
 
+//------- Begin cheat functions --------//
+
 // Test, this may or may not work.
 void
 GetBlipIcon()
@@ -77,6 +95,92 @@ GetBlipIcon()
 	//radar.SetBlipSprite();
 }
 
+
+// TODO Figure out how to do this, and where to place this for the cheats to work.
+// Got most of this from CPad::AddToPCCheatString
+#ifdef LUA_CHEAT_TEST
+
+char KeyBoardCheatString[30];
+
+extern "C" int
+CheatTest(lua_State* L)
+{
+	char c;
+	for(int32 i = ARRAY_SIZE(KeyBoardCheatString) - 2; i >= 0; i--) 
+		KeyBoardCheatString[i + 1] = KeyBoardCheatString[i];
+
+	KeyBoardCheatString[0] = c;
+
+
+	// These can be generated by reversing the letters to it.
+	// So if you want a 'KILLME' cheat, it would be 'EMLLIK'
+#define _CHEATCMP(str) strncmp(str, KeyBoardCheatString, sizeof(str) - 1)
+#ifdef LUA_TEST
+	// BLOWMEUP
+	// if(!_CHEATCMP("PUEMWOLB"))
+	//	// Run the init lua function, which can test the cheats
+#endif // LUA_TEST
+
+#undef _CHEATCMP
+}
+
+#endif //LUA_CHEAT_TEST
+
+// Not sure how exactly to use this, I may need to add it into Pad.cpp
+// Oh I need to add this somewhere that it will constantly run.
+// TODO Test this in a loop somewhere, possibly in the main game loop or something.
+// This basic test works in the lua code, now I can toggle these.
+extern "C" int
+CheatTestNew(lua_State *L)
+{
+	// Begin new test
+	//char KeyBoardCheatString[30];
+	//char c;
+	//for(int32 i = ARRAY_SIZE(KeyBoardCheatString) - 2; i >= 0; i--) KeyBoardCheatString[i + 1] = KeyBoardCheatString[i];
+
+	//KeyBoardCheatString[0] = c;
+
+
+	// These can be generated by reversing the letters to it.
+	// So if you want a 'KILLME' cheat, it would be 'EMLLIK'
+//#define _CHEATCMP(str) strncmp(str, KeyBoardCheatString, sizeof(str) - 1)
+
+	// End new test
+
+	CPlayerPed *pPed = FindPlayerPed();
+	VehicleFunctions vehicleFunctions = VehicleFunctions();
+	std::string cheatString = lua_tostring(L, 1);
+	//const char* cheatString = lua_tostring(L, 1);
+
+	if (cheatString == "BLOWMEUP") {
+		// Check if player is in vehicle, blow them up.
+		if(!pPed->EnteringCar() && pPed->bInVehicle) 
+		{ 
+			CVehicle *currentVeh = pPed->m_pMyVehicle;
+			currentVeh->m_fHealth = 0;
+		}
+	} else if(cheatString == "KILLME") {
+	//} else if(!_CHEATCMP("KILLME")) {
+		// Kill the player, print the message "You have been exterminated"
+		FindPlayerPed()->InflictDamage(nil, WEAPONTYPE_UNARMED, 1000.0f, PEDPIECE_TORSO, 0);
+		FindPlayerPed()->m_fArmour = 0;
+		LogFunctions::LogInfo(Defines::luaLogFile, "Player has been killed");
+	} else if(cheatString == "SPAWNCAR") {
+		// This works!! I didn't think spawning a car would work.
+		if (lua_isnumber(L, 2)) {
+			int vehicleModel = lua_tointeger(L, 2);
+			vehicleFunctions.SpawnVehicle(vehicleModel, false, false);
+		}
+
+		
+	}
+	//switch(cheatString) {
+	//
+	//}
+
+	return 1;
+}
+
 /// <summary>
 /// This sets the position in the lua function I have defined as a test.
 /// The values even are able to be changed without restarting the game.
@@ -91,7 +195,7 @@ SetPlayerPositionLua(lua_State *L)
 	CPlayerPed *pPed = FindPlayerPed();
 	CVector pPlayerPos = FindPlayerCoors();
 
-	// TODO Test these
+	// These seem to work in lua.
 	float playerPosX = (float)lua_tonumber(L, 1);
 	float playerPosY = (float)lua_tonumber(L, 2);
 	float playerPosZ = (float)lua_tonumber(L, 3);
@@ -105,6 +209,9 @@ SetPlayerPositionLua(lua_State *L)
 
 	FindPlayerPed()->SetPosition(newPlayerPos);
 
+	// TODO Test this for ImGui
+	//CPad::GetPad(0)->SetDisablePlayerControls(PLAYERCONTROL_SHORTCUT_TAXI);
+
 	// This is being called?
 	//CHud::SetHelpMessage(TheText.Get("CHEATON"), false, false);
 
@@ -122,9 +229,49 @@ SetPlayerPositionLua(lua_State *L)
 
 	// Make a random number generator
 	// Make it pick between lists of numbers within the range of the map
+
+	// This return value is the amount of parameters I'm quite sure.
 	return 3;
 }
 
+// Well this toggles the players control on/off
+// Could be useful for ImGui.
+bool playerControl = true;
+extern "C" int
+TogglePlayerControlLua(lua_State* L)
+{
+	playerControl = !playerControl;
+	if (!playerControl)
+	{
+		CHud::SetHelpMessage(TheText.Get("CHEATON"), false, false);
+		CPad::GetPad(0)->SetDisablePlayerControls(PLAYERCONTROL_SHORTCUT_TAXI);
+	} else {
+		CHud::SetHelpMessage(TheText.Get("CHEATOF"), false, false);
+		//CPad::GetPad(0)->SetDisablePlayerControls(PLAYERCONTROL_ENABLED);
+		CPad::GetPad(0)->SetEnablePlayerControls(PLAYERCONTROL_SHORTCUT_TAXI);
+	}
+	
+	return 1;
+}
+
+/// <summary>
+/// Basic test for healing the player in lua, this works.
+/// </summary>
+/// <param name="L"></param>
+/// <returns></returns>
+extern "C" int
+HealPlayerLua(lua_State *L)
+{
+	CPlayerPed *pPed = FindPlayerPed();
+	pPed->m_fHealth = 250;
+	pPed->m_fArmour = 100;
+	LogFunctions::LogInfo(Defines::luaLogFile, "Player was healed");
+
+	return 1;
+}
+
+//------- End cheat functions --------//
+
 // Check lua globals, made this into a function
 bool
 CheckLua(lua_State *L, int r)
@@ -176,6 +323,16 @@ LuaTest::InitLua()
 
 	// This seems to work now.
 	lua_register(m_luaVM, "set_position", SetPlayerPositionLua);
+
+	lua_register(m_luaVM, "heal_player", HealPlayerLua);
+
+	// Cheat test
+	//Well this just crashes it..
+	lua_register(m_luaVM, "cheat_test", CheatTestNew);
+
+	// Toggle player control
+	lua_register(m_luaVM, "toggle_control", TogglePlayerControlLua);
+	
 	
 	//
 		
diff --git a/utils/lua/test.lua b/utils/lua/test.lua
index 75ba4f3d..3c683f53 100644
--- a/utils/lua/test.lua
+++ b/utils/lua/test.lua
@@ -1,13 +1,54 @@
-print("hello ReVC!")
+-- print("hello ReVC!")
+
+local setPositionEnabled = false
+local healPlayerEnabled = false
+-- This works fine for my new cheat test.
+-- I would like to eventually make my own menu for my lua functions.
+local cheatTestEnabled = true
+local playerControlTestEnabled = false
+
+-- TODO Setup these.
+local airportX = 22
+local airportY = 22
+local airportZ = 22
+
 
 -- This is disabled in the C++ code.
 function AddStuff(num1, num2)
 	return num1 + num2
 end
 
--- Test calling function from C++
--- OMG this works!! I was able to call this function in C++ that sets the players position.
--- What if i change this file while its running?
--- I can change this file while it's running!!
--- That's very useful, I can add menus to this once I figure out how to make them like the debug menu.
-set_position(3,3,30)
\ No newline at end of file
+-- Here is a list of stuff to be used for cheat_test
+-- cheat_test activates a list of cheats defined in my ReVC C++ code.
+-- 1. BLOWMEUP (This sets the players vehicle on fire if in one.)
+-- 2. KILLME (This kills the player.)
+-- 3. SPAWNCAR {vehicleID} (This spawns a vehicle with the specified vehicle ID)
+
+-- TODO Figure out how to add cheats to this.
+-- For now I'll just hard code a couple values to make sure its working.
+
+if setPositionEnabled then
+	-- Test calling function from C++
+	-- OMG this works!! I was able to call this function in C++ that sets the players position.
+	-- What if i change this file while its running?
+	-- I can change this file while it's running!!
+	-- That's very useful, I can add menus to this once I figure out how to make them like the debug menu.
+	set_position(3,3,30)
+
+-- This seems to work fine, heal the player if enabled.
+elseif healPlayerEnabled then
+	heal_player()
+
+-- I got this working somehow, Idk what I changed.
+elseif cheatTestEnabled then
+	-- cheat_test("BLOWMEUP")
+	-- cheat_test("KILLME")
+	cheat_test("SPAWNCAR", 150)
+
+
+elseif playerControlTestEnabled then
+	-- This makes it to where the player controls can be toggled on/off.
+	toggle_control()
+	
+end
+
-- 
2.45.1.windows.1

