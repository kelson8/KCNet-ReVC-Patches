From 3a084294534e7d1e3a8aff9fd4f0070a5f5bb9dd Mon Sep 17 00:00:00 2001
From: kelson8 <kelson@kelsoncraft.net>
Date: Wed, 15 Jan 2025 02:17:16 -0500
Subject: [PATCH 09/42] Add some code to play around with in preprocessor Add
 some weapon type enums. Add vehicle functions test. Add player message test,
 incomplete.

---
 src/control/CarCtrl.cpp                       |  14 +-
 src/core/Pad.h                                |   7 +-
 src/extras/test/enums/eWeaponType.h           |  59 +++++
 .../test/functions/vehicle_functions.cpp      | 240 ++++++++++++++++++
 src/extras/test/functions/vehicle_functions.h |  13 +
 src/extras/test/player_test.cpp               |  54 ++++
 src/extras/test/player_test.h                 |   6 +
 7 files changed, 388 insertions(+), 5 deletions(-)
 create mode 100644 src/extras/test/enums/eWeaponType.h
 create mode 100644 src/extras/test/functions/vehicle_functions.cpp
 create mode 100644 src/extras/test/functions/vehicle_functions.h
 create mode 100644 src/extras/test/player_test.cpp
 create mode 100644 src/extras/test/player_test.h

diff --git a/src/control/CarCtrl.cpp b/src/control/CarCtrl.cpp
index 6742ccfe..667f3706 100644
--- a/src/control/CarCtrl.cpp
+++ b/src/control/CarCtrl.cpp
@@ -381,11 +381,21 @@ CCarCtrl::GenerateOneRandomCar()
 		pVehicle->bCreatedAsPoliceVehicle = true;
 		break;
 	default:
+		#ifdef CUSTOM_CODE
+		// It looks like I can modify the traffic speeds using this.
 		pVehicle->AutoPilot.m_nCruiseSpeed = CGeneral::GetRandomNumberInRange(9, 14);
-		if (carClass == EXEC)
+		if(carClass == EXEC)
 			pVehicle->AutoPilot.m_nCruiseSpeed = CGeneral::GetRandomNumberInRange(12, 18);
-		else if (carClass == POOR)
+		else if(carClass == POOR)
 			pVehicle->AutoPilot.m_nCruiseSpeed = CGeneral::GetRandomNumberInRange(7, 10);
+		#else
+		// Why did I duplicate this?
+		//pVehicle->AutoPilot.m_nCruiseSpeed = CGeneral::GetRandomNumberInRange(9, 14);
+		if(carClass == EXEC)
+			pVehicle->AutoPilot.m_nCruiseSpeed = CGeneral::GetRandomNumberInRange(12, 18);
+		else if(carClass == POOR)
+			pVehicle->AutoPilot.m_nCruiseSpeed = CGeneral::GetRandomNumberInRange(7, 10);
+		#endif //CUSTOM_CODE
 		if (pVehicle->GetColModel()->boundingBox.max.y - pVehicle->GetColModel()->boundingBox.min.y > 10.0f || carClass == BIG) {
 			pVehicle->AutoPilot.m_nCruiseSpeed *= 3;
 			pVehicle->AutoPilot.m_nCruiseSpeed /= 4;
diff --git a/src/core/Pad.h b/src/core/Pad.h
index 3d030297..166c0aa9 100644
--- a/src/core/Pad.h
+++ b/src/core/Pad.h
@@ -207,9 +207,10 @@ public:
 	static void UpdatePads(void);
 	void ProcessPCSpecificStuff(void);
 
-	// Custom added by kelson8 on 2-1-2024 @ 10:05PM
-	// I never did get this working yet.
-	//static void NeverWantedCheat();
+#ifdef _CUSTOM_CODE
+	// Moved out of here
+	static void NeverWantedCheat();
+#endif // _CUSTOM_CODE
 
 	void Update(int16 pad);
 	
diff --git a/src/extras/test/enums/eWeaponType.h b/src/extras/test/enums/eWeaponType.h
new file mode 100644
index 00000000..cd919888
--- /dev/null
+++ b/src/extras/test/enums/eWeaponType.h
@@ -0,0 +1,59 @@
+#pragma once
+/*
+	Plugin-SDK (Grand Theft Auto Vice City) header file
+	Authors: GTA Community. See more here
+	https://github.com/DK22Pac/plugin-sdk
+	Do not delete this comment block. Respect others' work!
+*/
+#pragma once
+
+enum eWeaponType : unsigned int {
+	WEAPONTYPE_UNARMED = 0,
+	WEAPONTYPE_BRASSKNUCKLE = 1,
+	WEAPONTYPE_SCREWDRIVER = 2,
+	WEAPONTYPE_GOLFCLUB = 3,
+	WEAPONTYPE_NIGHTSTICK = 4,
+	WEAPONTYPE_KNIFE = 5,
+	WEAPONTYPE_BASEBALLBAT = 6,
+	WEAPONTYPE_HAMMER = 7,
+	WEAPONTYPE_CLEAVER = 8,
+	WEAPONTYPE_MACHETE = 9,
+	WEAPONTYPE_KATANA = 10,
+	WEAPONTYPE_CHAINSAW = 11,
+	WEAPONTYPE_GRENADE = 12,
+	WEAPONTYPE_DETONATOR_GRENADE = 13,
+	WEAPONTYPE_TEARGAS = 14,
+	WEAPONTYPE_MOLOTOV = 15,
+	WEAPONTYPE_ROCKET = 16,
+	WEAPONTYPE_PISTOL = 17,
+	WEAPONTYPE_PYTHON = 18,
+	WEAPONTYPE_SHOTGUN = 19,
+	WEAPONTYPE_SPAS12_SHOTGUN = 20,
+	WEAPONTYPE_STUBBY_SHOTGUN = 21,
+	WEAPONTYPE_TEC9 = 22,
+	WEAPONTYPE_UZI = 23,
+	WEAPONTYPE_SILENCED_INGRAM = 24,
+	WEAPONTYPE_MP5 = 25,
+	WEAPONTYPE_M4 = 26,
+	WEAPONTYPE_RUGER = 27,
+	WEAPONTYPE_SNIPERRIFLE = 28,
+	WEAPONTYPE_LASERSCOPE = 29,
+	WEAPONTYPE_ROCKETLAUNCHER = 30,
+	WEAPONTYPE_FLAMETHROWER = 31,
+	WEAPONTYPE_M60 = 32,
+	WEAPONTYPE_MINIGUN = 33,
+	WEAPONTYPE_DETONATOR = 34,
+	WEAPONTYPE_HELICANNON = 35,
+	WEAPONTYPE_CAMERA = 36,
+	WEAPONTYPE_PAD37 = 37,
+	WEAPONTYPE_ARMOUR = 38,
+	WEAPONTYPE_RAMMEDBYCAR = 39,
+	WEAPONTYPE_RUNOVERBYCAR = 40,
+	WEAPONTYPE_EXPLOSION = 41,
+	WEAPONTYPE_UZI_DRIVEBY = 42,
+	WEAPONTYPE_DROWNING = 43,
+	WEAPONTYPE_FALL = 44,
+	WEAPONTYPE_UNIDENTIFIED = 45,
+	WEAPONTYPE_ANYMELEE = 46,
+	WEAPONTYPE_ANYWEAPON = 47
+};
\ No newline at end of file
diff --git a/src/extras/test/functions/vehicle_functions.cpp b/src/extras/test/functions/vehicle_functions.cpp
new file mode 100644
index 00000000..0ee5a6d6
--- /dev/null
+++ b/src/extras/test/functions/vehicle_functions.cpp
@@ -0,0 +1,240 @@
+#include "vehicle_functions.h"
+
+//
+#define WITHDINPUT
+#include "common.h"
+#include "crossplatform.h"
+#include "platform.h"
+#ifdef XINPUT
+#include <xinput.h>
+#if !defined(PSAPI_VERSION) || (PSAPI_VERSION > 1)
+#pragma comment(lib, "Xinput9_1_0.lib")
+#else
+#pragma comment(lib, "Xinput.lib")
+#endif
+#endif
+
+//#include "Pad.h"
+//#include "ControllerConfig.h"
+//#include "Timer.h"
+//#include "Frontend.h"
+#include "Camera.h"
+#include "Game.h"
+#include "CutsceneMgr.h"
+#include "Font.h"
+#include "Hud.h"
+#include "Text.h"
+#include "Timer.h"
+#include "Record.h"
+#include "World.h"
+#include "Vehicle.h"
+#include "Ped.h"
+#include "Population.h"
+#include "Record.h"
+#include "Replay.h"
+#include "Weather.h"
+#include "Streaming.h"
+#include "PathFind.h"
+#include "Wanted.h"
+#include "WaterLevel.h"
+#include "General.h"
+#include "Fluff.h"
+#include "Gangs.h"
+#include "platform.h"
+#include "Stats.h"
+#include "CarCtrl.h"
+#include "TrafficLights.h"
+
+#include "PlayerInfo.h"
+#include "Placeable.h"
+#include "Entity.h"
+
+// Extra
+// This code works now in here! I can move my code out of Pad.cpp
+#ifdef CUSTOM_CODE
+// Enable test features in this file, only define under CUSTOM_CODE1
+#define _TEST
+
+#include "Bike.h"
+#include "Explosion.h"
+#include "Radar.h"
+#include "Vehicle.h"
+#include "vehicles/Automobile.h"
+
+#include "ScriptCommands.h"
+
+#include "PlayerInfo.h"
+
+// My code
+#include "extras\test\cheats\custom_cheats.h"
+#include "..\extras\test\enums\model_ids.h"
+#include "..\extras\test\scriptcommands_test.h"
+#include "Script.h"
+
+#include "test/scriptcommands_test.h"
+#endif // CUSTOM_CODE
+
+//
+
+
+void VehicleFunctions::SpawnVehicle()
+{
+	CPlayerPed *pPed = FindPlayerPed();
+	CVector pPedCoords = FindPlayerCoors();
+	CustomCheats *customCheats = new CustomCheats();
+
+	bool carSpawn = false;
+	bool bikeSpawn = true;
+	bool heliSpawn = false;
+	bool boatSpawn = false;
+
+	// PCJ 600 bike https://gtamods.com/wiki/List_of_vehicles_(VC)
+	// Get the vehicle model from my enum
+	int vehicleModel = VehicleModels::PCJ_600;
+	// Adapted from my cleo test in javascript
+	//
+	// This should remove everything around the area.
+	// CustomCheats::ClearItemsFromArea(10);
+	customCheats->ClearItemsFromArea(10);
+	// Original code:
+	// CWorld::ClearExcitingStuffFromArea(pPedCoords, 10, true);
+
+	// Request the model
+	CStreaming::RequestModel(vehicleModel, STREAMFLAGS_DONT_REMOVE);
+	CStreaming::LoadAllRequestedModels(false);
+
+	if(CStreaming::ms_aInfoForModel[vehicleModel].m_loadState & STREAMFLAGS_DONT_REMOVE) {
+		CStreaming::SetModelIsDeletable(vehicleModel);
+		CStreaming::SetModelTxdIsDeletable(vehicleModel);
+	}
+
+	// Don't attempt to use CAutoMobile for a Bike, it crashes it.
+	// CAutomobile *vehicle = new CAutomobile(vehicleModel, RANDOM_VEHICLE);
+
+#ifdef _TEST
+
+	// I wonder how to check if the vehicle is a car, bike, boat or helicopter.
+	//if(veh == CAutomobile) {}
+
+	//CAutomobile *car = new CAutomobile(vehicleModel, RANDOM_VEHICLE);
+
+	CBike *vehicle = new CBike(vehicleModel, RANDOM_VEHICLE);
+
+	if(bikeSpawn) { CBike *vehicle = new CBike(vehicleModel, RANDOM_VEHICLE); }
+
+	//switch(vehicle->m_vehType) 
+	//{
+	//case CBike::m_vehType:
+	//	break;
+	//}
+//// I wonder how to use this
+// switch (vehicle->m_vehType)
+//{
+
+//}
+
+// CBike *vehicle = new CBike(vehicleModel, RANDOM_VEHICLE);
+#else
+	CBike *vehicle = new CBike(vehicleModel, RANDOM_VEHICLE);
+#endif //_TEST1
+
+	if(vehicle != nil) {
+		// Add 2 to the z and y, so the vehicle doesn't crush the player.
+		// pPedCoords.z + 2;
+		// pPedCoords.y + 2;
+		vehicle->SetPosition(pPedCoords);
+
+		// Set the car to be able to be entered
+		vehicle->SetStatus(STATUS_ABANDONED);
+		vehicle->m_nDoorLock = CARLOCK_UNLOCKED;
+		// Possible fix for the engine not being on
+		vehicle->bEngineOn = true;
+
+#ifdef _TEST
+		// Test below
+		vehicle->BurstTyre(0, false);
+#endif // _TEST
+
+		// vehicle->
+
+		// Set the vehicle as owned by the player.
+		vehicle->bHasBeenOwnedByPlayer = true;
+
+		// Add vehicle to the world
+		CWorld::Add(vehicle);
+
+		// TODO Remove current vehicle
+
+		if(pPed->bInVehicle) {
+			CVehicle *playerVeh = pPed->m_pMyVehicle;
+			// playerVeh->
+			//  This just crashes it
+			// playerVeh->Remove();
+			// playerVeh->bRemoveFromWorld = true;
+			// playerVeh->DeleteRwObject();
+			//
+
+			// Custom code for each method, could be useful for other stuff.
+			// switch(playerVeh->m_vehType) {
+			// case VEHICLE_TYPE_CAR:
+			//	break;
+			// case VEHICLE_TYPE_BIKE:
+			//	break;
+			// case VEHICLE_TYPE_BOAT:
+			//	break;
+			// case VEHICLE_TYPE_HELI:
+			//	break;
+			//// Were planes useable in VC or 3?
+			// case VEHICLE_TYPE_PLANE:
+			//	break;
+			// default:
+			//	break;
+			// }
+			// if (playerVeh->IsBike()) {
+		}
+	}
+
+	// Warp the player into the vehicle
+	// Taken from Script4.cpp
+	// Well this was needed, there must be a ton of these objectives.
+	pPed->SetObjective(OBJECTIVE_ENTER_CAR_AS_DRIVER, vehicle);
+	// Put the player in the vehicle
+	pPed->WarpPedIntoCar(vehicle);
+}
+
+#ifdef _TEST1
+void 
+VehicleFunctions::ToggleVehicleInvincible(CVehicle *veh)
+{
+
+	if(!veh->bBulletProof && !veh->bCollisionProof && !veh->bExplosionProof && !veh->bFireProof && !veh->bMeleeProof) {
+		((CAutomobile *)FindPlayerVehicle())->Damage.SetEngineStatus(0);
+		((CAutomobile *)veh)->Fix();
+
+		veh->m_fHealth = 1000.0f;
+		veh->bBulletProof = true;
+		veh->bCollisionProof = true;
+		veh->bExplosionProof = true;
+		veh->bFireProof = true;
+		veh->bMeleeProof = true;
+		CHud::SetHelpMessage(TheText.Get("CHEATON"), true);
+	} else {
+		veh->bBulletProof = false;
+		veh->bCollisionProof = false;
+		veh->bExplosionProof = false;
+		veh->bFireProof = false;
+		veh->bMeleeProof = false;
+		CHud::SetHelpMessage(TheText.Get("CHEATOF"), true);
+	}
+}
+#endif //_TEST1
+
+// Check if the model has loaded
+// if(!CStreaming::HasModelLoaded())
+//{
+//	CStreaming::RequestModel();
+//	CStreaming::LoadAllRequestedModels(false);
+//}
+//}
+
+//}
\ No newline at end of file
diff --git a/src/extras/test/functions/vehicle_functions.h b/src/extras/test/functions/vehicle_functions.h
new file mode 100644
index 00000000..129be002
--- /dev/null
+++ b/src/extras/test/functions/vehicle_functions.h
@@ -0,0 +1,13 @@
+#pragma once
+//#include "Vehicle.h"
+
+//#define _TEST1
+
+class VehicleFunctions
+{
+public:
+	void SpawnVehicle();
+#ifdef _TEST1
+	static void ToggleVehicleInvincible(CVehicle *veh);
+#endif // _TEST1
+};
diff --git a/src/extras/test/player_test.cpp b/src/extras/test/player_test.cpp
new file mode 100644
index 00000000..0b4238b3
--- /dev/null
+++ b/src/extras/test/player_test.cpp
@@ -0,0 +1,54 @@
+//#define _TEST
+
+#ifdef _TEST
+// These are needed!
+#define WITHDINPUT
+#include "common.h"
+#include "crossplatform.h"
+#include "platform.h"
+#ifdef XINPUT
+#include <xinput.h>
+#if !defined(PSAPI_VERSION) || (PSAPI_VERSION > 1)
+#pragma comment(lib, "Xinput9_1_0.lib")
+#else
+#pragma comment(lib, "Xinput.lib")
+#endif
+#endif
+//
+
+
+#include "player_test.h"
+#include "Ped.h"
+#include "PlayerPed.h"
+#include "PlayerInfo.h"
+#include "Hud.h"
+
+#include <string>
+#include <iostream>
+
+
+// Not sure how to do this yet.
+// Print a message to the player
+void
+PlayerTest::ShowCurrentPosition()
+{
+	CPlayerPed *pPed = FindPlayerPed();
+	CVector playerPos = pPed->GetPosition();
+	float playerPosX = playerPos.x;
+	float playerPosY = playerPos.y;
+	float playerPosZ = playerPos.z;
+
+	// This didn't work. 
+	// https://stackoverflow.com/questions/34976862/c-convert-string-to-16-bit-unsigned-signed-int-float
+	//wchar *test;
+	//test = static_cast<std::string>("");
+	
+	// wchar* message, bool quick, bool displayForever
+	// // I'm not sure how to display text with this yet.
+	//CHud::SetHelpMessage(test, false, false);
+
+	
+
+
+}
+#endif //_TEST
\ No newline at end of file
diff --git a/src/extras/test/player_test.h b/src/extras/test/player_test.h
new file mode 100644
index 00000000..9c964913
--- /dev/null
+++ b/src/extras/test/player_test.h
@@ -0,0 +1,6 @@
+#pragma once
+class PlayerTest
+{
+public:
+	static void ShowCurrentPosition();
+};
\ No newline at end of file
-- 
2.45.1.windows.1

