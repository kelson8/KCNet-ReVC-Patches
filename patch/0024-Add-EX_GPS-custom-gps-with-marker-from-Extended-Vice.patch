From 21784e95725eb6eb0ca3575daa185caba79d05f9 Mon Sep 17 00:00:00 2001
From: kelson8 <kelson@kelsoncraft.net>
Date: Fri, 14 Feb 2025 22:57:12 -0500
Subject: [PATCH 24/42] Add EX_GPS, custom gps with marker from Extended Vice.
 Comment out IMGUI_TEST

---
 src/core/Frontend.cpp                  |  33 +++-
 src/core/Frontend.h                    |  10 +-
 src/core/MenuScreensCustom.cpp         |   5 +
 src/core/Radar.cpp                     | 223 +++++++++++++++++++++++++
 src/core/Radar.h                       |  12 ++
 src/core/common.h                      |   4 +
 src/core/config.h                      |   7 +
 src/extras/Imgui_test.cpp              |   2 +-
 src/extras/functions/ini_functions.cpp |  29 ++++
 src/renderer/Hud.cpp                   |   9 +
 src/renderer/Hud.h                     |   4 +
 11 files changed, 335 insertions(+), 3 deletions(-)

diff --git a/src/core/Frontend.cpp b/src/core/Frontend.cpp
index 40f0e373..b84cf683 100644
--- a/src/core/Frontend.cpp
+++ b/src/core/Frontend.cpp
@@ -550,6 +550,11 @@ CMenuManager::CMenuManager()
 #ifdef MISSION_REPLAY
 	m_bAttemptingMissionRetry = false;
 #endif
+
+#ifdef EX_GPS
+	m_PrefsGPS = true;
+#endif
+
 }
 
 void
@@ -1133,6 +1138,14 @@ CMenuManager::DrawStandardMenus(bool activeScreen)
 
 				switch (aScreens[m_nCurrScreen].m_aEntries[i].m_Action) {
 #ifdef GAMEPAD_MENU
+#ifdef EX_GPS
+				case MENUACTION_GPS:
+					if (m_PrefsGPS)
+						rightText = TheText.Get("FEM_ON");
+					else
+						rightText = TheText.Get("FEM_OFF");
+					break;
+#endif
 				case MENUACTION_CTRLVIBRATION:
 					if (m_PrefsUseVibration)
 						rightText = TheText.Get("FEM_ON");
@@ -4991,6 +5004,11 @@ CMenuManager::ProcessUserInput(uint8 goDown, uint8 goUp, uint8 optionSelected, u
 #else
 					TheCamera.m_bUseMouse3rdPerson = false;
 #endif
+
+#ifdef EX_GPS
+					m_PrefsGPS = true;
+#endif
+
 					SaveSettings();
 #ifdef LOAD_INI_SETTINGS
 					SaveINIControllerSettings();
@@ -5230,7 +5248,16 @@ CMenuManager::ProcessOnOffMenuOptions()
 		}
 		SaveSettings();
 		break;
-#endif
+
+#ifdef EX_GPS
+	case MENUACTION_GPS:
+		m_PrefsGPS = !m_PrefsGPS;
+		SaveSettings();
+		break;
+#endif // EX_GPS
+#endif // GAMEPAD_MENU
+
+
 	case MENUACTION_INVERTPADY:
 		CPad::bInvertLook4Pad = !CPad::bInvertLook4Pad;
 		SaveSettings(); // FIX: Why don't SaveSettings? Because of it's an hidden option? :(
@@ -5878,6 +5905,10 @@ CMenuManager::PrintMap(void)
 			m_fMapCenterX + m_fMapSize, m_fMapCenterY + m_fMapSize), CRGBA(255, 255, 255, FadeIn(255)));
 	}
 
+#ifdef EX_GPS
+	CRadar::DrawGPS();
+#endif
+
 	CRadar::DrawBlips();
 	if (m_PrefsShowLegends) {
 		CFont::SetWrapx(MENU_X_RIGHT_ALIGNED(40.0f));
diff --git a/src/core/Frontend.h b/src/core/Frontend.h
index b9be5a82..656964b1 100644
--- a/src/core/Frontend.h
+++ b/src/core/Frontend.h
@@ -305,7 +305,11 @@ enum eMenuAction
 #endif
 #ifdef MISSION_REPLAY
 	MENUACTION_REJECT_RETRY,
-	MENUACTION_UNK114
+	MENUACTION_UNK114,
+#endif
+
+#ifdef EX_GPS
+	MENUACTION_GPS,
 #endif
 };
 
@@ -723,6 +727,10 @@ public:
 	bool m_bAttemptingMissionRetry;
 #endif
 
+#ifdef EX_GPS
+	bool m_PrefsGPS;
+#endif
+
 #ifdef GAMEPAD_MENU
 	enum
 	{
diff --git a/src/core/MenuScreensCustom.cpp b/src/core/MenuScreensCustom.cpp
index 39de1089..2075f2e3 100644
--- a/src/core/MenuScreensCustom.cpp
+++ b/src/core/MenuScreensCustom.cpp
@@ -468,6 +468,11 @@ CMenuScreenCustom aScreens[] = {
 		MENUACTION_RADARMODE,	"FED_RDR", { nil, SAVESLOT_NONE, MENUPAGE_DISPLAY_SETTINGS }, 0, 0, MENUALIGN_LEFT,
 		MENUACTION_HUD,			"FED_HUD", { nil, SAVESLOT_NONE, MENUPAGE_DISPLAY_SETTINGS }, 0, 0, MENUALIGN_LEFT,
 		MENUACTION_SUBTITLES,	"FED_SUB", { nil, SAVESLOT_NONE, MENUPAGE_DISPLAY_SETTINGS }, 0, 0, MENUALIGN_LEFT,
+
+#ifdef EX_GPS
+		MENUACTION_GPS,			"FED_GPS", { nil, SAVESLOT_NONE, MENUPAGE_DISPLAY_SETTINGS }, 0, 0, MENUALIGN_LEFT,
+#endif
+
 		MENUACTION_CFO_DYNAMIC,	"FET_DEF", { new CCFODynamic(nil, nil, nil, nil, RestoreDefDisplay) }, 320, 0, MENUALIGN_CENTER,
 		MENUACTION_GOBACK,		"FEDS_TB", { nil, SAVESLOT_NONE, MENUPAGE_NONE}, 320, 0, MENUALIGN_CENTER,
 	},
diff --git a/src/core/Radar.cpp b/src/core/Radar.cpp
index 4e15559d..9489b03d 100644
--- a/src/core/Radar.cpp
+++ b/src/core/Radar.cpp
@@ -142,6 +142,10 @@ int CRadar::TargetMarkerId = -1;
 CVector CRadar::TargetMarkerPos;
 #endif
 
+#ifdef EX_GPS // Mission blip
+int CRadar::RouteBlipId = -1;
+#endif
+
 float CRadar::cachedCos;
 float CRadar::cachedSin;
 
@@ -243,6 +247,11 @@ void CRadar::ClearBlip(int32 i)
 		ms_RadarTrace[index].m_eBlipType = BLIP_NONE;
 		ms_RadarTrace[index].m_eBlipDisplay = BLIP_DISPLAY_NEITHER;
 		ms_RadarTrace[index].m_eRadarSprite = RADAR_SPRITE_NONE;
+#ifdef EX_GPS // Mission blip
+		if (index == RouteBlipId)
+			RouteBlipId = -1;
+#endif
+	
 	}
 }
 
@@ -859,6 +868,220 @@ void CRadar::DrawRotatingRadarSprite(CSprite2d* sprite, float x, float y, float
 	sprite->Draw(curPosn[3].x, curPosn[3].y, curPosn[2].x, curPosn[2].y, curPosn[0].x, curPosn[0].y, curPosn[1].x, curPosn[1].y, CRGBA(255, 255, 255, alpha));
 }
 
+#ifdef EX_GPS
+void CRadar::DrawGPS()
+{
+	if (!FrontEndMenuManager.m_PrefsGPS)
+		return;
+
+	if (!FrontEndMenuManager.m_bMenuMapActive && CWorld::Players[CWorld::PlayerInFocus].m_pRemoteVehicle)
+		return;
+
+	CVehicle* vehicle = FindPlayerVehicle();
+	if (!FrontEndMenuManager.m_bMenuMapActive && vehicle &&
+		(vehicle->IsBoat() || vehicle->IsRealHeli() || vehicle->IsPlane() || 
+		 vehicle->GetModelIndex() == MI_RCBANDIT || vehicle->GetModelIndex() == MI_RCBARON || 
+		 vehicle->GetModelIndex() == MI_RCGOBLIN || vehicle->GetModelIndex() == MI_RCRAIDER)) {
+
+		return;
+	}
+
+	const uint16 maxNodePoints = 500;
+	static CPathNode* resultNodes[maxNodePoints];
+	static CVector2D nodePoints[maxNodePoints];
+	static RwIm2DVertex lineVerts[maxNodePoints * 4];
+
+    if (FindPlayerPed() && (FindPlayerPed()->m_pMyVehicle && FindPlayerPed()->InVehicle() && CHud::m_bDrawRadar || FrontEndMenuManager.m_bMenuMapActive)) {
+		// Mission blip
+		if (RouteBlipId != -1 && ms_RadarTrace[RouteBlipId].m_bInUse) {
+			CVector destPosn;
+
+			switch (ms_RadarTrace[RouteBlipId].m_eBlipType) {
+			case BLIP_CAR: {
+				CEntity *entity = CPools::GetVehiclePool()->GetAt(ms_RadarTrace[RouteBlipId].m_nEntityHandle);
+				if (entity) destPosn = entity->GetPosition();
+				break;
+			}
+			case BLIP_CHAR: {
+				CEntity *entity = CPools::GetPedPool()->GetAt(ms_RadarTrace[RouteBlipId].m_nEntityHandle);
+				if (entity) destPosn = entity->GetPosition();
+				break;
+			}
+			case BLIP_OBJECT: {
+				CEntity *entity = CPools::GetObjectPool()->GetAt(ms_RadarTrace[RouteBlipId].m_nEntityHandle);
+				if (entity) destPosn = entity->GetPosition();
+				break;
+			}
+			default:
+				destPosn = ms_RadarTrace[RouteBlipId].m_vecPos;
+				break;
+			}
+
+			destPosn.z = CWorld::FindGroundZForCoord(destPosn.x, destPosn.y);
+
+			short nodesCount = 0;
+
+			ThePaths.DoPathSearch(0, FindPlayerCoors(), -1, destPosn, resultNodes, &nodesCount, maxNodePoints, nullptr, nil, 500.0f, -1);
+
+			int nodesCountDeleted = 0;
+			if (nodesCount > 0) {
+				for (short i = 0; i < nodesCount; i++) {
+					CVector nodePosn = resultNodes[i]->GetPosition();
+					CVector2D tmpPoint;
+					CRadar::TransformRealWorldPointToRadarSpace(tmpPoint, CVector2D(nodePosn.x, nodePosn.y));
+					if (!CHud::m_bDrawRadar && !FrontEndMenuManager.m_bMenuMapActive)
+						CRadar::TransformRadarPointToScreenSpace(nodePoints[i], tmpPoint);
+					else {
+						if (CRadar::LimitRadarPoint(tmpPoint) >= 1.0f)
+							nodesCountDeleted++;
+
+						CRadar::TransformRadarPointToScreenSpace(nodePoints[i], tmpPoint);
+					}
+				}
+
+				if (CHud::m_bDrawRadar && nodesCountDeleted != 0)
+					nodesCount -= nodesCountDeleted - 1;
+
+				RwRenderStateSet(rwRENDERSTATETEXTURERASTER, NULL);
+
+				unsigned int vertIndex = 0;
+				for (short i = 0; i < (nodesCount - 1); i++) {
+					CVector2D point[4], shift[2];
+					CVector2D dir = nodePoints[i + 1] - nodePoints[i];
+					float angle = atan2(dir.y, dir.x);
+					if (!CHud::m_bDrawRadar && !FrontEndMenuManager.m_bMenuMapActive) {
+						shift[0].x = cosf(angle - 1.5707963f) * 4.0f;
+						shift[0].y = sinf(angle - 1.5707963f) * 4.0f;
+						shift[1].x = cosf(angle + 1.5707963f) * 4.0f;
+						shift[1].y = sinf(angle + 1.5707963f) * 4.0f;
+					} else {
+						float mp = 1.0f;
+						if (!CHud::m_bDrawRadar) {
+							mp = FrontEndMenuManager.m_fMapSize - 140.0f;
+							if (mp < 140.0f)
+								mp = 140.0f;
+							else if (mp > 960.0f)
+								mp = 960.0f;
+							mp = mp / 960.0f + 0.4f;
+						}
+						shift[0].x = cosf(angle - 1.5707963f) * 4.0f * mp;
+						shift[0].y = sinf(angle - 1.5707963f) * 4.0f * mp;
+						shift[1].x = cosf(angle + 1.5707963f) * 4.0f * mp;
+						shift[1].y = sinf(angle + 1.5707963f) * 4.0f * mp;
+					}
+
+					uint32 color = GetRadarTraceColour(ms_RadarTrace[RouteBlipId].m_nColor, ms_RadarTrace[RouteBlipId].m_bDim);
+					CRGBA normalColor = CRGBA((uint8)(color >> 24), (uint8)(color >> 16), (uint8)(color >> 8), 255);
+					Setup2dVertex(lineVerts[vertIndex + 0], nodePoints[i].x + shift[0].x, nodePoints[i].y + shift[0].y, normalColor);
+					Setup2dVertex(lineVerts[vertIndex + 1], nodePoints[i + 1].x + shift[0].x, nodePoints[i + 1].y + shift[0].y, normalColor);
+					Setup2dVertex(lineVerts[vertIndex + 2], nodePoints[i].x + shift[1].x, nodePoints[i].y + shift[1].y, normalColor);
+					Setup2dVertex(lineVerts[vertIndex + 3], nodePoints[i + 1].x + shift[1].x, nodePoints[i + 1].y + shift[1].y, normalColor);
+					vertIndex += 4;
+				}
+
+				RwIm2DRenderPrimitive(rwPRIMTYPETRISTRIP, lineVerts, 4 * (nodesCount - 1));
+			}
+		}
+
+		// Waypoint
+		if (TargetMarkerId != -1) {
+			if (Distance(FindPlayerCoors(), TargetMarkerPos) < 30.0f) {
+				CRadar::ClearBlip(TargetMarkerId);
+				TargetMarkerId = -1;
+			}
+
+			CVector destPosn = TargetMarkerPos;
+			destPosn.z = CWorld::FindGroundZForCoord(destPosn.x, destPosn.y);
+
+			short nodesCount = 0;
+
+			ThePaths.DoPathSearch(0, FindPlayerCoors(), -1, destPosn, resultNodes, &nodesCount, maxNodePoints, nullptr, nil, 500.0f, -1);
+
+			int nodesCountDeleted = 0;
+			if (nodesCount > 0) {
+				for (short i = 0; i < nodesCount; i++) {
+					CVector nodePosn = resultNodes[i]->GetPosition();
+					CVector2D tmpPoint;
+					CRadar::TransformRealWorldPointToRadarSpace(tmpPoint, CVector2D(nodePosn.x, nodePosn.y));
+					if (!CHud::m_bDrawRadar && !FrontEndMenuManager.m_bMenuMapActive)
+						CRadar::TransformRadarPointToScreenSpace(nodePoints[i], tmpPoint);
+					else {
+						if (CRadar::LimitRadarPoint(tmpPoint) >= 1.0f)
+							nodesCountDeleted++;
+
+						CRadar::TransformRadarPointToScreenSpace(nodePoints[i], tmpPoint);
+					}
+				}
+
+				if (CHud::m_bDrawRadar && nodesCountDeleted != 0)
+					nodesCount -= nodesCountDeleted - 1;
+
+				RwRenderStateSet(rwRENDERSTATETEXTURERASTER, NULL);
+
+				unsigned int vertIndex = 0;
+				for (short i = 0; i < (nodesCount - 1); i++) {
+					CVector2D point[4], shift[2];
+					CVector2D dir = nodePoints[i + 1] - nodePoints[i];
+					float angle = atan2(dir.y, dir.x);
+					if (!CHud::m_bDrawRadar && !FrontEndMenuManager.m_bMenuMapActive) {
+						shift[0].x = cosf(angle - 1.5707963f) * 4.0f;
+						shift[0].y = sinf(angle - 1.5707963f) * 4.0f;
+						shift[1].x = cosf(angle + 1.5707963f) * 4.0f;
+						shift[1].y = sinf(angle + 1.5707963f) * 4.0f;
+					} else {
+						float mp = 1.0f;
+						if (!CHud::m_bDrawRadar) {
+							mp = FrontEndMenuManager.m_fMapSize - 140.0f;
+							if (mp < 140.0f)
+								mp = 140.0f;
+							else if (mp > 960.0f)
+								mp = 960.0f;
+							mp = mp / 960.0f + 0.4f;
+						}
+						shift[0].x = cosf(angle - 1.5707963f) * 4.0f * mp;
+						shift[0].y = sinf(angle - 1.5707963f) * 4.0f * mp;
+						shift[1].x = cosf(angle + 1.5707963f) * 4.0f * mp;
+						shift[1].y = sinf(angle + 1.5707963f) * 4.0f * mp;
+					}
+
+					Setup2dVertex(lineVerts[vertIndex + 0], nodePoints[i].x + shift[0].x, nodePoints[i].y + shift[0].y, WaypointColor);
+					Setup2dVertex(lineVerts[vertIndex + 1], nodePoints[i + 1].x + shift[0].x, nodePoints[i + 1].y + shift[0].y, WaypointColor);
+					Setup2dVertex(lineVerts[vertIndex + 2], nodePoints[i].x + shift[1].x, nodePoints[i].y + shift[1].y, WaypointColor);
+					Setup2dVertex(lineVerts[vertIndex + 3], nodePoints[i + 1].x + shift[1].x, nodePoints[i + 1].y + shift[1].y, WaypointColor);
+					vertIndex += 4;
+				}
+
+				RwIm2DRenderPrimitive(rwPRIMTYPETRISTRIP, lineVerts, 4 * (nodesCount - 1));
+			}
+		}
+    }
+}
+
+void CRadar::Setup2dVertex(RwIm2DVertex& vertex, float x, float y, CRGBA color)
+{
+	vertex.x = x;
+	vertex.y = y;
+	vertex.u = vertex.v = 0.0f;
+	vertex.z = RwIm2DGetNearScreenZ() + 0.0001f;
+	vertex.w = 1.11111116f;
+	vertex.color = RWRGBALONG(color.r, color.g, color.b, color.a);
+}
+
+void CRadar::SetBlipRoute(int32 i, bool bEnable)
+{
+	if (bEnable) {
+		int index = GetActualBlipArrayIndex(i);
+
+		if (index == -1)
+			return;
+
+		RouteBlipId = index;
+	} else {
+		RouteBlipId = -1;
+	}
+}
+#endif
+
 int32 CRadar::GetActualBlipArrayIndex(int32 i)
 {
 	if (i == -1)
diff --git a/src/core/Radar.h b/src/core/Radar.h
index afb37fe4..355fec63 100644
--- a/src/core/Radar.h
+++ b/src/core/Radar.h
@@ -241,6 +241,10 @@ public:
 	static CVector TargetMarkerPos;
 #endif
 
+#ifdef EX_GPS // Mission blip
+	static int RouteBlipId;
+#endif
+
 	static void InitFrontEndMap();
 	static void DrawYouAreHereSprite(float, float);
 #ifdef MAP_ENHANCEMENTS
@@ -263,6 +267,14 @@ public:
 	static void DrawRadarSection(int32 x, int32 y);
 	static void DrawRadarSprite(uint16 sprite, float x, float y, uint8 alpha);
 	static void DrawRotatingRadarSprite(CSprite2d* sprite, float x, float y, float angle, int32 alpha);
+
+
+#ifdef EX_GPS
+	static void DrawGPS();
+	static void Setup2dVertex(RwIm2DVertex& vertex, float x, float y, CRGBA color);
+	static void SetBlipRoute(int32 i, bool bEnable); // Mission blip
+#endif
+
 	static int32 GetActualBlipArrayIndex(int32 i);
 	static int32 GetNewUniqueBlipIndex(int32 i);
 	static uint32 GetRadarTraceColour(uint32 color, bool bright);
diff --git a/src/core/common.h b/src/core/common.h
index 12c80b71..4d0b95d2 100644
--- a/src/core/common.h
+++ b/src/core/common.h
@@ -337,6 +337,10 @@ void re3_trace(const char *filename, unsigned int lineno, const char *func, cons
 void re3_assert(const char *expr, const char *filename, unsigned int lineno, const char *func);
 void re3_usererror(const char *format, ...);
 
+#ifdef EX_GPS
+extern CRGBA WaypointColor;
+#endif
+
 #define DEBUGBREAK() __debugbreak();
 
 // Switch to enable development messages.
diff --git a/src/core/config.h b/src/core/config.h
index 19c0ef7f..f165535d 100644
--- a/src/core/config.h
+++ b/src/core/config.h
@@ -9,6 +9,13 @@
 #define VICE_EXTENDED
 #ifdef VICE_EXTENDED
 #define EX_LOADING_GAME_SAVE_ON_STARTUP
+// Adds support for GPS marker like in Extended Vice project.
+// Will display a marker that will lead you to your destination like
+// in GTA 4 or GTA 5, also the marker texture has been changed to
+// look like the GTA SA one.
+// Also, there is an option to toggle this under display settings.
+#define EX_GPS
+
 #endif //VICE_EXTENDED
 
 /* TODO Get these working from the Vice Extended source code
diff --git a/src/extras/Imgui_test.cpp b/src/extras/Imgui_test.cpp
index 6d398b19..713ba8a6 100644
--- a/src/extras/Imgui_test.cpp
+++ b/src/extras/Imgui_test.cpp
@@ -12,7 +12,7 @@
 #ifndef IMGUI_TEST
 // I somewhat got this working so I have enabled it for now.
 // This is most likely Windows only for now like this.
-#define IMGUI_TEST
+//#define IMGUI_TEST
 #endif
 
 #ifdef IMGUI_TEST
diff --git a/src/extras/functions/ini_functions.cpp b/src/extras/functions/ini_functions.cpp
index 27046817..50a61082 100644
--- a/src/extras/functions/ini_functions.cpp
+++ b/src/extras/functions/ini_functions.cpp
@@ -76,6 +76,25 @@
 mINI::INIFile ini("reVC.ini");
 mINI::INIStructure cfg;
 
+#ifdef EX_GPS
+
+CRGBA ReadAndGetWaypointColor(const char* key)
+{
+	CRGBA color = CRGBA(180, 24, 24, 255);
+
+	mINI::INIMap<std::string> section = cfg.get("Features");
+	if (section.has(key)) {
+		uint32 red, green, blue;
+		sscanf(section.get(key).c_str(), "%i, %i, %i", &red, &green, &blue);
+		color = CRGBA(red, green, blue, 255);
+		return color;
+	}
+	return color;
+}
+
+	CRGBA WaypointColor = ReadAndGetWaypointColor("WaypointColorRGB");
+#endif
+
 bool
 ReadIniIfExists(const char *cat, const char *key, uint32 *out)
 {
@@ -429,9 +448,19 @@ LoadINISettings()
 	ReadIniIfExists("VideoMode", "Depth", &FrontEndMenuManager.m_nPrefsDepth);
 	ReadIniIfExists("VideoMode", "Subsystem", &FrontEndMenuManager.m_nPrefsSubsystem);
 	// Windowed mode is loaded below in CUSTOM_FRONTEND_OPTIONS section
+
+#ifdef EX_GPS
+	StoreIni("Display", "GPS", FrontEndMenuManager.m_PrefsGPS);
+#endif
+
 #else
 	ReadIniIfExists("Graphics", "VideoMode", &FrontEndMenuManager.m_nDisplayVideoMode);
 #endif
+
+#ifdef EX_GPS
+	ReadIniIfExists("Display", "GPS", &FrontEndMenuManager.m_PrefsGPS);
+#endif
+
 	ReadIniIfExists("Controller", "HeadBob1stPerson", &TheCamera.m_bHeadBob);
 	ReadIniIfExists("Controller", "HorizantalMouseSens", &TheCamera.m_fMouseAccelHorzntl);
 	ReadIniIfExists("Controller", "InvertMouseVertically", &MousePointerStateHelper.bInvertVertically);
diff --git a/src/renderer/Hud.cpp b/src/renderer/Hud.cpp
index 70d11574..79e24fc7 100644
--- a/src/renderer/Hud.cpp
+++ b/src/renderer/Hud.cpp
@@ -94,6 +94,10 @@ int16 CHud::m_ItemToFlash;
 bool CHud::m_HideRadar;
 int32 CHud::m_ClockState;
 
+#ifdef EX_GPS
+bool CHud::m_bDrawRadar;
+#endif
+
 // These aren't really in CHud
 float CHud::BigMessageInUse[6];
 float CHud::BigMessageAlpha[6];
@@ -1079,6 +1083,11 @@ void CHud::Draw()
 				rect.Translate(SCREEN_SCALE_X_FIX(0.0f), SCREEN_SCALE_Y_FIX(-2.0f));
 				Sprites[HUD_RADARDISC].Draw(rect, RADARDISC_COLOR);
 			}
+#ifdef EX_GPS
+			m_bDrawRadar = true;
+			CRadar::DrawGPS();
+			m_bDrawRadar = false;
+#endif	
 			CRadar::DrawBlips();
 		}
 	}
diff --git a/src/renderer/Hud.h b/src/renderer/Hud.h
index a4b9609a..db715d8d 100644
--- a/src/renderer/Hud.h
+++ b/src/renderer/Hud.h
@@ -81,6 +81,10 @@ public:
 	static bool m_HideRadar;
 	static int32 m_ClockState;
 
+#ifdef EX_GPS
+	static bool m_bDrawRadar;
+#endif
+
 	// These aren't really in CHud
 	static float BigMessageInUse[6];
 	static float BigMessageAlpha[6];
-- 
2.45.1.windows.1

