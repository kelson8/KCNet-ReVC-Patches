From c7e3bc3d1e58e44081cfebc8c8253b073bb7e0ae Mon Sep 17 00:00:00 2001
From: kelson8 <kelson@kelsoncraft.net>
Date: Thu, 20 Mar 2025 20:32:27 -0400
Subject: [PATCH 125/129] Fix bug in vehicle functions, add a check to see if
 the player is dead. Add lua events file, kcnet-events.lua and set it up under
 CGame::Process. Add blow up player vehicle in lua_functions. Load  the warp
 locations into memory for my warp menu in CGame::Initialise. Fix blow up
 vehicles cheat to not blow up the players vehicle. Add spawn player in
 vehicle checkbox to new vehicle spawner. Add test logging for memory
 addresses in misc_menu. Add function in vehicle menu that toggles the tanks
 blowing up cars when hit. Separate ImGuiCarColors functions in
 vehicle_spawn_menu. Enable both the old and new vehicle spawners, add
 collapsing headers. Make update-lua.bat copy the new kcnet-events.lua file.
 Fix set_position in lua, update patch and commit number.

---
 guides/create-patches.md                   |  2 +-
 src/core/Game.cpp                          |  9 +++-
 src/core/config.h                          | 18 +++++--
 src/extras/cheats/custom_cheats.cpp        | 19 ++++++-
 src/extras/defines.cpp                     |  3 ++
 src/extras/defines.h                       |  2 +
 src/extras/functions/ini_functions.cpp     | 63 ++++++++++++++--------
 src/extras/functions/vehicle_functions.cpp | 10 +++-
 src/extras/lua/lua_functions.cpp           | 15 +++++-
 src/extras/lua/lua_functions.h             |  1 +
 src/extras/lua/lua_test.cpp                | 33 ++++++++++--
 src/extras/lua/lua_test.h                  |  5 +-
 src/extras/menus/misc_menu.cpp             | 42 +++++++++++++--
 src/extras/menus/vehicle_menu.cpp          | 43 +++++++++++++++
 src/extras/menus/vehicle_spawn_menu.cpp    | 20 +++++--
 utils/lua/kcnet-events.lua                 | 13 +++++
 utils/lua/test.lua                         | 30 +++++++++--
 utils/lua/update-lua.bat                   |  1 +
 18 files changed, 278 insertions(+), 51 deletions(-)
 create mode 100644 utils/lua/kcnet-events.lua

diff --git a/guides/create-patches.md b/guides/create-patches.md
index c45bfabe..d6c9e79a 100644
--- a/guides/create-patches.md
+++ b/guides/create-patches.md
@@ -1,7 +1,7 @@
 # To create patches
 * Link to this: https://stackoverflow.com/questions/52884437/git-generate-a-single-patch-across-multiple-commits
 
-(Currently on commit 124, patch number: 124)
+(Currently on commit 125, patch number: 125)
 
 1. Run this command in the root of this project: git format-patch \<patchnumber\> -o patches
 2. Update the patch number in this file, and update the patch number in patches/~patch-number.txt
\ No newline at end of file
diff --git a/src/core/Game.cpp b/src/core/Game.cpp
index 6e6db495..5a7ba4c9 100644
--- a/src/core/Game.cpp
+++ b/src/core/Game.cpp
@@ -581,12 +581,14 @@ bool CGame::Initialise(const char* datFile)
 	//CGame game = CGame();
 	MiscUtil miscUtil = MiscUtil();
 
-	// TODO Test this.
 #ifdef NEW_WARP_TEST
 	std::cout << defines.KcLogString << "categorizedWarps size after loading : " << iniFunctions.categorizedWarps.size() << std::endl;
 #endif
 	iniFunctions.LoadWarpIni();
 
+	// Loading the locations into memory, for use in the ImGui menu.
+	iniFunctions.LoadLocations();
+
 #ifdef NEW_WARP_TEST
 	std::cout << defines.KcLogString << "g_gameInstance set to in Game.cpp : " << g_gameInstance << std::endl;
 #endif
@@ -1052,6 +1054,11 @@ void CGame::Process(void)
 			FindPlayerPed()->Teleport(PlayerCoords);
 			VarUpdatePlayerCoords = false;
 		}
+#endif
+#ifdef LUA_EVENT_TEST
+		LuaTest luaTest = LuaTest();
+		// Load events from kcnet-events.lua or whatever is set in defines.cpp.
+		luaTest.LuaEvents();
 #endif
 		CSprite2d::SetRecipNearClip();
 		CSprite2d::InitPerFrame();
diff --git a/src/core/config.h b/src/core/config.h
index 6a2fecaa..107f80af 100644
--- a/src/core/config.h
+++ b/src/core/config.h
@@ -113,6 +113,12 @@
 // This works fine now!
 #define SWIMMING
 
+// Copied in changes from this define
+// Well this breaks shooting, I cannot shoot if I have this defined for some reason
+// TODO Test again, I added more missing items to this.
+// This is still broken...
+//#define IMPROVED_MENU_AND_INPUT
+
 // Enable the plugin sdk test
 // I have it in src/extras/plugin_sdk_test
 // Files:
@@ -120,10 +126,6 @@
 // Well this doesn't crash but I don't think I have the dll implementation right, I have disabled this for now.
 // #define PLUGIN_SDK_TEST
 
-// Copied in changes from this define
-// Well this breaks shooting, I cannot shoot if I have this defined for some reason
-// #define IMPROVED_MENU_AND_INPUT
-
 // Copied in changes from these three defines, they don't work so I disabled all this for now.
 // #define VEHICLE_MODS
 // #define IMPROVED_VEHICLES
@@ -155,6 +157,7 @@
 // End working
 
 // Enable better climbing, this breaks the swimming code above so I disabled it.
+// Well I got it to work with this, but the climbing doesn't do anything so I'll keep it off.
 //#define CLIMBING
 
 // TODO Fix this
@@ -578,6 +581,13 @@ enum Config {
 // Toggle the lua test, so far this just has a F8 keybind that sets the players position.
 #define LUA_TEST
 
+#ifdef LUA_TEST
+// This works for basic lua events!!!
+// I setup the blow_up_vehicle function in lua.
+// Just don't put anything that'll constantly run in this lua file.
+#define LUA_EVENT_TEST
+#endif
+
 // Move most debug functions into src/extras/debug/debug_functions.cpp
 #define _MOVE_DEBUG_FILE
 
diff --git a/src/extras/cheats/custom_cheats.cpp b/src/extras/cheats/custom_cheats.cpp
index 946a7389..c5fe16bc 100644
--- a/src/extras/cheats/custom_cheats.cpp
+++ b/src/extras/cheats/custom_cheats.cpp
@@ -238,17 +238,32 @@ CustomCheats::LoadCutscene(const char* name)
 /// I have switched the debug menu function to using this.
 /// Taken from Blowup cars cheat, I figured I would put a version in here to mess with
 /// Umm, why the hell doesn't cleo redux call this? It says cheat activated but does nothing.
+/// Modifed to not blow up the players vehicle if they are in one.
 /// </summary>
 void
 CustomCheats::BlowUpAllCars()
 {
 	//BlowUpCarsCheat();
 	CHud::SetHelpMessage(TheText.Get("CHEAT1"), true);
+	VehicleFunctions vehicleFunctions = VehicleFunctions();
 
 	int i = CPools::GetVehiclePool()->GetSize();
 	while(i-- > 0) {
-		if(CVehicle *veh = CPools::GetVehiclePool()->GetSlot(i)) 
-			veh->BlowUpCar(nil);
+		if (CVehicle* veh = CPools::GetVehiclePool()->GetSlot(i)) 
+		{
+			// I had to add this check for this not to break
+			if (vehicleFunctions.IsPlayerInVehicle())
+			{
+				// Check if the player is in a vehicle, if so exclude them from being blown up.
+				if(CWorld::Players[CWorld::PlayerInFocus].m_pPed->m_pMyVehicle != veh) 
+				{ 
+					veh->BlowUpCar(nil); 
+				}
+			} else {
+				// Run this if the player isn't in a vehicle
+				veh->BlowUpCar(nil); 
+			}			
+		}
 	}
 }
 
diff --git a/src/extras/defines.cpp b/src/extras/defines.cpp
index 397cfaaf..371ef334 100644
--- a/src/extras/defines.cpp
+++ b/src/extras/defines.cpp
@@ -47,6 +47,9 @@ std::string luaScriptsFolder = viceExtendedFolder + "lua_scripts/";
 std::string Defines::luaScript = luaScriptsFolder + "test.lua";
 std::string Defines::luaLocationsScript = luaScriptsFolder + "locations.lua";
 
+std::string Defines::luaEventsScript = luaScriptsFolder + "kcnet-events.lua";
+
+
 // Ini files, ini_functions.cpp is now set to grab the file names from here.
 std::string Defines::mainIniFile = "reVC.ini";
 std::string Defines::imGuiControlsIniFile = viceExtendedFolder + "ImGui-Controls.ini";
diff --git a/src/extras/defines.h b/src/extras/defines.h
index 56e2eba7..afe8391b 100644
--- a/src/extras/defines.h
+++ b/src/extras/defines.h
@@ -33,6 +33,8 @@ public:
 	// Lua
 	static std::string luaScript;
 	static std::string luaLocationsScript;
+	static std::string luaEventsScript;
+
 
 	// Ini
 	static std::string mainIniFile;
diff --git a/src/extras/functions/ini_functions.cpp b/src/extras/functions/ini_functions.cpp
index e61914fd..2e6b8513 100644
--- a/src/extras/functions/ini_functions.cpp
+++ b/src/extras/functions/ini_functions.cpp
@@ -226,42 +226,57 @@ IniFunctions::LoadVehiclesFromIni(const std::string &filename)
 /// TODO Fix this to have a spawn button at the bottom.
 /// </summary>
 /// <param name="categories"></param>
+/// 
+bool spawnPlayerInVehicle = false;
 void
 IniFunctions::DisplayVehicles(const std::vector<IniFunctions::VehicleCategory> &categories)
 {
 	CustomCheats customCheats = CustomCheats();
 
-	ImGui::Separator();
-	ImGui::Text("Vehicle Spawner");
+	if(ImGui::CollapsingHeader("Vehicle Spawner")) {
 
-	for(const auto &category : categories) {
-		if(ImGui::CollapsingHeader(category.name.c_str())) {
-			if(ImGui::BeginListBox(("##" + category.name).c_str(),
-			                       ImVec2(-FLT_MIN, category.vehicles.size() * ImGui::GetTextLineHeightWithSpacing()))) {
-				
-				for(const auto &vehicle : category.vehicles) {
-					ImGui::Text("%s", vehicle.first.c_str()); // Display the vehicle name
+		ImGui::Separator();
+		ImGui::Text("Vehicle Spawner");
 
-					// Oh this one removes the
-					// if(ImGui::Selectable(location.first.c_str())) {}
-					ImGui::SameLine(); // Place the button on the same line
+		// Well this seems to work like this.
+		ImGui::Checkbox("Spawn in vehicle", &spawnPlayerInVehicle);
+
+		for(const auto &category : categories) {
+			if(ImGui::CollapsingHeader(category.name.c_str())) {
+
+				if(ImGui::BeginListBox(("##" + category.name).c_str(),
+				                       ImVec2(-FLT_MIN, category.vehicles.size() * ImGui::GetTextLineHeightWithSpacing()))) {
+
+					for(const auto &vehicle : category.vehicles) {
+						ImGui::Text("%s", vehicle.first.c_str()); // Display the vehicle name
 
-					if(ImGui::Button(("Spawn##" + vehicle.first).c_str())) { // Add a teleport button
-						std::cout << defines.KcLogString << "Spawning: " << category.name << " - " << vehicle.first << std::endl;
-						std::cout << defines.KcLogString << "Vehicle ID: " << vehicle.second.id << std::endl;
-						
-						// Clear the area
-						customCheats.ClearItemsFromArea(25);
+						// if(ImGui::Selectable(location.first.c_str())) {}
+						// ImGui::SameLine(); // Place the button on the same line
 
-						// Spawn the vehicle
-						VehicleFunctions::SpawnVehicle(vehicle.second.id, false, false);
-						//PlayerCheats::SetPlayerPosition(location.second.posX, location.second.posY, location.second.posZ);
+						if(ImGui::Button(("Spawn##" + vehicle.first).c_str())) { // Add a teleport button
+							std::cout << defines.KcLogString << "Spawning: " << category.name << " - " << vehicle.first
+							          << std::endl;
+							std::cout << defines.KcLogString << "Vehicle ID: " << vehicle.second.id << std::endl;
+
+							// Clear the area
+							customCheats.ClearItemsFromArea(25);
+
+							// Spawn the vehicle
+							if(spawnPlayerInVehicle) {
+								VehicleFunctions::SpawnVehicle(vehicle.second.id, true, true);
+							} else {
+								VehicleFunctions::SpawnVehicle(vehicle.second.id, false, false);
+							}
+
+							// PlayerCheats::SetPlayerPosition(location.second.posX, location.second.posY, location.second.posZ);
+						}
 					}
+					ImGui::EndListBox();
 				}
-				ImGui::EndListBox();
 			}
 		}
 	}
+
 }
 
 //------------------
@@ -1162,7 +1177,9 @@ LoadINISettings()
 	ReadIniIfExists("Graphics", "Trails", &CMBlur::BlurOn);
 #endif
 	ReadIniIfExists("General", "SkinFile", FrontEndMenuManager.m_PrefsSkinFile, 256);
+#ifndef IMPROVED_MENU_AND_INPUT
 	ReadIniIfExists("Controller", "Method", &FrontEndMenuManager.m_ControlMethod);
+#endif
 	ReadIniIfExists("General", "Language", &FrontEndMenuManager.m_PrefsLanguage);
 	ReadIniIfExists("Display", "ShowHud", &FrontEndMenuManager.m_PrefsShowHud);
 	ReadIniIfExists("Display", "RadarMode", &FrontEndMenuManager.m_PrefsRadarMode);
@@ -1321,7 +1338,9 @@ SaveINISettings()
 #endif
 	StoreIni("Graphics", "FrameLimiter", FrontEndMenuManager.m_PrefsFrameLimiter);
 	StoreIni("General", "SkinFile", FrontEndMenuManager.m_PrefsSkinFile, 256);
+#ifndef IMPROVED_MENU_AND_INPUT
 	StoreIni("Controller", "Method", FrontEndMenuManager.m_ControlMethod);
+#endif
 	StoreIni("General", "Language", FrontEndMenuManager.m_PrefsLanguage);
 	StoreIni("Display", "ShowHud", FrontEndMenuManager.m_PrefsShowHud);
 	StoreIni("Display", "RadarMode", FrontEndMenuManager.m_PrefsRadarMode);
diff --git a/src/extras/functions/vehicle_functions.cpp b/src/extras/functions/vehicle_functions.cpp
index ba67cfc3..ca94805e 100644
--- a/src/extras/functions/vehicle_functions.cpp
+++ b/src/extras/functions/vehicle_functions.cpp
@@ -134,17 +134,23 @@ VehicleFunctions::BlowUpVehicle()
 }
 
 /// <summary>
-/// Check if a player is in a vehicle
+/// Check if a player is in a vehicle, 
+/// Also, check if they are entering a vehicle and not dead.
 /// </summary>
 /// <returns>If the player is in a vehicle.</returns>
 bool
 VehicleFunctions::IsPlayerInVehicle()
 {
 	CPlayerPed *pPed = FindPlayerPed();
+	// TODO Is this needed?
+	CEntity *playerEntity = FindPlayerEntity();
 
 	CVehicle *playerVeh = pPed->m_pMyVehicle;
 
-	if(!pPed->EnteringCar() && pPed->bInVehicle) 
+	// Add check for if player is dead
+
+	//if(!pPed->EnteringCar() && pPed->bInVehicle && !((CPed*)playerEntity)->DyingOrDead())
+	if(!pPed->EnteringCar() && pPed->bInVehicle && !pPed->DyingOrDead())
 	{ 
 		return true; 
 	}
diff --git a/src/extras/lua/lua_functions.cpp b/src/extras/lua/lua_functions.cpp
index 3e61928e..73f76635 100644
--- a/src/extras/lua/lua_functions.cpp
+++ b/src/extras/lua/lua_functions.cpp
@@ -206,8 +206,21 @@ logMessageLua(lua_State* L)
 	return 1;
 }
 
+/// <summary>
+/// TODO Test this for the events in lua.
+/// </summary>
+/// <param name="L"></param>
+/// <returns></returns>
 extern "C" int
-blowUpPlayerVehicle(lua_State *L)
+blowUpPlayerVehicleLua(lua_State *L)
 {
+	VehicleFunctions vehicleFunctions = VehicleFunctions();
+	bool isInVehicle = vehicleFunctions.IsPlayerInVehicle();
+
+	if (isInVehicle) 
+	{ 
+		vehicleFunctions.BlowUpVehicle();
+	}
+
 	return 1;
 }
\ No newline at end of file
diff --git a/src/extras/lua/lua_functions.h b/src/extras/lua/lua_functions.h
index d3ad6aca..d626e504 100644
--- a/src/extras/lua/lua_functions.h
+++ b/src/extras/lua/lua_functions.h
@@ -19,6 +19,7 @@ extern "C" {
 	extern int logPlayerHeadingLua(lua_State *L);
 
 	extern int isPlayerInVehicleLua(lua_State *L);
+    extern int blowUpPlayerVehicleLua(lua_State *L);
     extern int logMessageLua(lua_State *L);
 
 #ifdef __cplusplus
diff --git a/src/extras/lua/lua_test.cpp b/src/extras/lua/lua_test.cpp
index 06d74a51..a5ce529a 100644
--- a/src/extras/lua/lua_test.cpp
+++ b/src/extras/lua/lua_test.cpp
@@ -486,8 +486,8 @@ LuaTest::RegisterLuaFunctions(lua_State *L)
 	// 
 
 	// This seems to work now.
-	//lua_register(m_luaVM, "set_position", SetPlayerPositionLua);
-	lua_register(LuaTest::GetInstance().GetLuaState(), "set_position", SetPlayerPositionLua);
+	lua_register(L, "set_position", SetPlayerPositionLua);
+	//lua_register(LuaTest::GetInstance().GetLuaState(), "set_position", SetPlayerPositionLua);
 
 	lua_register(L, "heal_player", HealPlayerLua);
 
@@ -518,16 +518,17 @@ LuaTest::RegisterLuaFunctions(lua_State *L)
 	lua_register(L, "cancel_override_restart", cancelOverrideNextRestartLua);
 
 	// Toggles for losing weapons when dying.
-	// lua_register(m_luaVM, "toggle_lose_weapons_on_death", toggleLoseWeaponsOnDeathLua);
 	lua_register(L, "enable_lose_weapons_on_death", enableLoseWeaponsOnDeathLua);
 	lua_register(L, "disable_lose_weapons_on_death", disableLoseWeaponsOnDeathLua);
 
-	// Test for logging the player coords and heading
+	// Log the player coords and heading
 	lua_register(L, "log_player_coords", logPlayerCoordsLua);
 	lua_register(L, "log_player_heading", logPlayerHeadingLua);
 
-	// Test for checking if player is in vehicle
+	// Check if player is in a vehicle
 	lua_register(L, "is_player_in_vehicle", isPlayerInVehicleLua);
+	// Blow up the players vehicle
+	lua_register(L, "blow_up_vehicle", blowUpPlayerVehicleLua);
 
 	// Log messages in lua
 	// This works, log an info message in lua
@@ -536,6 +537,28 @@ LuaTest::RegisterLuaFunctions(lua_State *L)
 	
 }
 
+/// <summary>
+/// This works for events in lua within a separate file, I tested it and if I have the same
+/// item in test.lua (Main script) it won't run the blow up vehicle function if enabled without the keybind.
+/// Running in CGame::Process
+/// </summary>
+void 
+LuaTest::LuaEvents()
+{
+	Defines defines = Defines();
+	LuaTest luaTest = LuaTest();
+
+	luaTest.RegisterLuaFunctions(m_luaVM);
+
+	if(CheckLua(m_luaVM, luaL_dofile(m_luaVM, defines.luaEventsScript.c_str()))) 
+	{
+
+	} else {
+		LogFunctions::LogError(defines.logFile, "The lua file " + defines.luaEventsScript + "Couldn't be loaded!");
+	}
+
+}
+
 /// <summary>
 /// Taken idea from this in CLuaMain.cpp within MTA SA.
 /// https://github.com/multitheftauto/mtasa-blue/blob/master/Client/mods/deathmatch/logic/lua/CLuaMain.cpp
diff --git a/src/extras/lua/lua_test.h b/src/extras/lua/lua_test.h
index 7518447a..c621ddf6 100644
--- a/src/extras/lua/lua_test.h
+++ b/src/extras/lua/lua_test.h
@@ -24,7 +24,7 @@ private:
 	// lua_State *m_luaVM;
 	lua_State *m_luaVM;
 
-	// This doesn't work right yet, crashes the game.
+	// Register the lua functions
 	void RegisterLuaFunctions(lua_State *L);
 
 	//LuaTest() { 
@@ -69,6 +69,9 @@ public:
 	
 	bool CheckLua(lua_State *L, int r);
 
+	// Run the custom event system I am working on in Lua
+	void LuaEvents();
+
 	// These might work for getting the m_luaVM variable in the private class above.
 	static LuaTest& GetInstance()
 	{ 
diff --git a/src/extras/menus/misc_menu.cpp b/src/extras/menus/misc_menu.cpp
index b48f50df..5fe85604 100644
--- a/src/extras/menus/misc_menu.cpp
+++ b/src/extras/menus/misc_menu.cpp
@@ -72,6 +72,8 @@
 #include <locale>
 #include <codecvt>
 
+#include "misc_util.h"
+
 // TODO Move into a utilites file
 #include <direct.h>
 
@@ -88,6 +90,8 @@
 
 #include "toml_imgui.h"
 
+#include "Automobile.h"
+
 bool showHud = true;
 // This will toggle the controller button that is shown in ImGui
 bool toggleControllerText = false;
@@ -98,8 +102,6 @@ bool drawKcNetText = false;
 // Show the current directory in ImGui
 bool showCurrentDirectory = false;
 
-
-
  // Timecyc stuff
 static int m_nTimecycHour = 8;
 static std::vector<std::string> m_WeatherNames {
@@ -607,7 +609,8 @@ MiscMenu::DrawKCNetTextBox()
 
 /// <summary>
 /// Check if player is near the safehouse beside the stadium on the left side of the map.
-/// TODO Fix this, it just crashes the game.
+/// This seems to work fine.
+/// TODO Make the Area3DCheckCommand into a boolean.
 /// </summary>
 void
 logAreaTest()
@@ -626,6 +629,32 @@ logAreaTest()
 	areaCheckTest.Area3DCheckCommand(x1, y1, z1, x2, y2, z2);
 }
 
+/// <summary>
+/// TODO Reimplement COMMAND_LOAD_AND_LAUNCH_MISSION_INTERNAL
+/// </summary>
+void
+loadAndLaunchMissionInternal()
+{
+
+}
+
+
+void 
+displayPlayerHealthMemAddress()
+{
+	CPlayerPed *pPlayer = FindPlayerPed();
+	Defines defines = Defines();
+	MiscUtil miscUtil = MiscUtil();
+
+	float playerHealth = pPlayer->m_fHealth;
+
+	std::string memAddressString = "The memory address to player health is: " + miscUtil.AddressToString(&playerHealth);
+
+	LogFunctions::LogInfo(defines.logFile, memAddressString);
+
+}
+
+
 //
 
 //----------- Misc tab ----------//
@@ -724,7 +753,6 @@ void MiscMenu::MiscTab()
 		ToggleHud();
 	}
 
-
 	// Show a test counter on the screen like in the scripts, the text doesn't work and this doesn't do anything yet.
 	if(ImGui::Checkbox("Display counter test", &counterEnabled)) 
 	{ 
@@ -736,6 +764,12 @@ void MiscMenu::MiscTab()
 		logAreaTest(); 
 	}
 
+	ImGui::Text("Logs the memory address to the player health");
+	if (ImGui::Button("Player health mem addr")) 
+	{ 
+		displayPlayerHealthMemAddress();
+	}
+
 	ImGui::Separator();
 	// Fun functions
 	ImGui::Text("Fun functions");
diff --git a/src/extras/menus/vehicle_menu.cpp b/src/extras/menus/vehicle_menu.cpp
index dd8870f2..86223ce0 100644
--- a/src/extras/menus/vehicle_menu.cpp
+++ b/src/extras/menus/vehicle_menu.cpp
@@ -28,11 +28,15 @@
 #include "PlayerPed.h"
 #include "PlayerInfo.h"
 
+#include "Automobile.h"
 
 // Vehicle
 bool highVehicleMass = false;
 bool vehicleInvincible = false;
 
+// Set if the tank can blow up vehicles when hitting them, defaults to true.
+bool tankBlowUpCars = true;
+
 void
 toggleVehicleInvincible()
 {
@@ -143,6 +147,26 @@ unlockCarsInArea(float leftBottomX, float leftBottomY, float topRightX, float to
 	VehicleFunctions::UnlockAllCarDoorsInArea(leftBottomX, leftBottomY, topRightX, topRightY);
 }
 
+/// <summary>
+/// Toggle the tank blowing up vehicles when they are hit.
+/// </summary>
+void
+toggleTankDetonateCars()
+{
+	VehicleFunctions vehicleFunctions = VehicleFunctions();
+	PlayerUtil playerUtil = PlayerUtil();
+	Defines defines = Defines();
+
+	if(vehicleFunctions.IsPlayerInVehicle()) {
+		CVehicle *playerVeh = playerUtil.GetCurrentVehicle();
+		((CAutomobile *)playerVeh)->bTankDetonateCars = tankBlowUpCars;
+		std::string canTankBlowUpCarsString =
+		    tankBlowUpCars ? "You tank can now blow up vehicles when hitting them" : "You tank can no longer blow up vehicles when hitting them";
+
+		LogFunctions::LogInfo(defines.logFile, canTankBlowUpCarsString);
+	}
+}
+
 //
 
 //
@@ -183,6 +207,25 @@ VehicleMenu::VehicleTab()
 		unlockCarsInArea(20, 20, 20, 20);
 	}
 
+	// This works
+	ImGui::Text("This toggles the tank being able to blow vehicles up from hitting them");
+
+	// This works for making a disabled checkbox if the player isn't in a vehicle.
+	if (vehicleFunctions.IsPlayerInVehicle())
+	{
+		if(ImGui::Checkbox("Tank blow up vehicles", &tankBlowUpCars)) 
+		{ 
+			toggleTankDetonateCars(); 
+		}
+	} else {
+		// Disable the following widgets
+		ImGui::Text("You are not in a vehicle!");
+		ImGui::BeginDisabled(true);
+		if(ImGui::Checkbox("Tank blow up vehicles", &tankBlowUpCars)) { toggleTankDetonateCars(); }
+		// Re-enable widgets
+		ImGui::EndDisabled();
+	}
+
 	ImGui::Separator();
 	// Fun functions
 	ImGui::Text("Fun functions");
diff --git a/src/extras/menus/vehicle_spawn_menu.cpp b/src/extras/menus/vehicle_spawn_menu.cpp
index e095ed57..60d4786e 100644
--- a/src/extras/menus/vehicle_spawn_menu.cpp
+++ b/src/extras/menus/vehicle_spawn_menu.cpp
@@ -178,7 +178,8 @@ VehicleSpawnMenu::ImGuiVehicleList()
 	}
 
 	// Show the list of car colors and the button
-	ImGuiCarColors();
+	// Oh, this was here, moved into the menu tab function.
+	//ImGuiCarColors();
 
 	// Original working function, moved into another function.
 	//ImGuiFunctions::InputIntClamp("Color 1", &carColor1, 1, 10, 0, 250);
@@ -214,11 +215,22 @@ VehicleSpawnMenu::VehicleSpawnTab()
 
 	// Test a new vehicle list, moved spawn in vehicle, vehicle list box, and submit button in here.
 	// I will be using this one for now, I still need to work on the one below that lists everything.
-	ImGuiVehicleList();
+	if (ImGui::CollapsingHeader("Old vehicle list"))
+	{
+		ImGuiVehicleList();
+		ImGuiCarColors();
+	}
 
 	// This is a new test in the iniFunctions file, reads vehicles.ini in 'ViceExtended/'
-	// Well this new category works now, I just have to setup the spawn in vehicle button
-	//iniFunctions.DisplayVehicles(iniFunctions.LoadVehiclesFromIni(defines.vehiclesIniFile));
+	// Well this new category works now, it doesn't look as neat as it can be and the names are internal like this:
+	// 'TopFun' 'FireTruk', but for the most part they are readable.
+	iniFunctions.DisplayVehicles(iniFunctions.LoadVehiclesFromIni(defines.vehiclesIniFile));
+
+	// Show the vehicle colors
+	if (ImGui::CollapsingHeader("Vehicle colors")) 
+	{ 
+		ImGuiCarColors();
+	}
 
 	
 }
diff --git a/utils/lua/kcnet-events.lua b/utils/lua/kcnet-events.lua
new file mode 100644
index 00000000..122dbb05
--- /dev/null
+++ b/utils/lua/kcnet-events.lua
@@ -0,0 +1,13 @@
+-- My custom event system running in lua
+-- KCNet Event System ReVC
+
+local chaos_mode = false
+
+-- if is_player_in_vehicle() then
+if chaos_mode then
+    -- Player vehicle check is done in the function, although I could change that if needed.
+	blow_up_vehicle()
+	-- Blow up vehicle
+end
+
+-----
\ No newline at end of file
diff --git a/utils/lua/test.lua b/utils/lua/test.lua
index ff73f7af..830fa5a4 100644
--- a/utils/lua/test.lua
+++ b/utils/lua/test.lua
@@ -7,6 +7,13 @@
 -- TODO Rename this file to kcnet_revc.lua
 -- Also try to rename it in the C++ side.
 
+-- This lua file runs when the game starts up, and when the player is busted/wasted.
+-- I could make it load specific parts of this if a player is in a vehicle.
+
+-----------
+-- Toggles
+-----------
+
 local setPositionEnabled = false
 local healPlayerEnabled = false
 -- This works fine for my new cheat test.
@@ -33,7 +40,12 @@ local disablePeds = false
 -- Set vehicle density to 0.0
 local disableVehicles = false
 
--- -- Locations
+-- Display a log message using my C++ functions, logs to 'ViceExtended/logs/KCNet-ReVC-lua.log'
+local log_test = false
+
+-----------
+-- Locations
+-----------
 -- -- TODO Figure out how to move these into another file
 
 local spawnX = -258.1
@@ -53,6 +65,16 @@ local airportHeading = 0.0
 -- Set C++ values
 -----------
 
+-- Test for logging in lua, this works!
+if log_test then
+	if is_player_in_vehicle() then
+		log_info("KCNet - Player is in a vehicle")
+	else
+		log_info("KCNet - Player is not in a vehicle")
+	end
+	-- log_info("KCNet - Test msg from lua")
+end
+
 -- Toggle the respawn point or if the player respawns normally
 -- This is mostly working, it only takes effect after the player dies once.
 -- TODO Add this to my ImGui menu later.
@@ -83,9 +105,7 @@ end
 -- lose_weapons_bool = false
 
 -- If the player will lose their weapons when dying, set to true by default
-
-
-
+-- If set to false, the player will not lose weapons when dying.
 local lose_weapons = false
 
 if not lose_weapons then
@@ -94,6 +114,8 @@ else
 	enable_lose_weapons_on_death()
 end
 
+
+
 -- Disabled
 -- toggle_lose_weapons_on_death()
 
diff --git a/utils/lua/update-lua.bat b/utils/lua/update-lua.bat
index fba12be0..3be2a157 100644
--- a/utils/lua/update-lua.bat
+++ b/utils/lua/update-lua.bat
@@ -3,5 +3,6 @@
 copy test.lua "C:\Rockstar Games\GTA Vice City\ViceExtended\lua_scripts"
 :: This copies the locations.lua test.
 copy locations.lua "C:\Rockstar Games\GTA Vice City\ViceExtended\lua_scripts"
+copy kcnet-events.lua "C:\Rockstar Games\GTA Vice City\ViceExtended\lua_scripts"
 :: Copy the new setup_game.lua test.
 @REM copy setup_game.lua "C:\Rockstar Games\GTA Vice City\ViceExtended\lua_scripts"
-- 
2.45.1.windows.1

